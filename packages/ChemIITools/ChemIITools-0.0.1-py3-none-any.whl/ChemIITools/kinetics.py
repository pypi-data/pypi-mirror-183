# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_Kinetics.ipynb.

# %% auto 0
__all__ = ['steady_state_calc', 'oreg_calc_radau', 'oreg_calc', 'oreg_calc_RK4']

# %% ../nbs/02_Kinetics.ipynb 2
#| echo: false
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

# %% ../nbs/02_Kinetics.ipynb 3
def steady_state_calc(rates):
    """
    Calculate the steady state equilibrium of reaction a<->b<->c, given the rate of the forwards and backwards processes at each step
    """
    kf1 = rates[0]
    kr1 = rates[1]
    kf2 = rates[2]
    kr2 = rates[3]
    mat = np.array([[-kf1,kr1,0],[0,kf2,-kr2],[1,1,1]])
    vec = np.array([0,0,1])
    mat_inv = np.linalg.inv(mat)
    out = np.matmul(mat_inv, vec)
    return out

# %% ../nbs/02_Kinetics.ipynb 9
def _deriv(t, concs, k1, k2, k3, k4, k5):
    """
    Returns the time derivatives of concs = A, B, X, Y, Z, P, Q
    """
    A, B, X, Y, Z, P, Q = concs
    Adot = -A*Y*k1
    Bdot = -B*X*k3
    Xdot =A*Y*k1-X*Y*k2+B*X*k3-2*X*X*k4
    Ydot = -A*Y*k1-X*Y*k2 + Z*k5
    Zdot = B*X*k3 - Z*k5
    Pdot = A*Y*k1 + X*Y*k2
    Qdot = X*X*k4
    return Adot, Bdot, Xdot, Ydot, Zdot, Pdot, Qdot

# %% ../nbs/02_Kinetics.ipynb 10
def oreg_calc_radau(concs, rates={'k1':1.34, 'k2':1.6e9, 'k3':8e3, 'k4':4e7,'k5':1}):
    """
    Calculates the time dependent concentrations of species in the oregonator system using the Radau method
    """
    # Maximum time, time point spacings and the time grid (all in s).
    tmax, dt = 120, 1e-6
    t = np.arange(0, tmax+dt, dt)

    conc_t = solve_ivp(_deriv, t_span=(0, tmax), y0 = concs, method='Radau', dense_output=True, t_eval = None,
    args=(rates['k1'],rates['k2'],rates['k3'],rates['k4'],rates['k5']))
    # Unpack dynamical variables as a function of time.
    return t, conc_t

# %% ../nbs/02_Kinetics.ipynb 11
def oreg_calc(concs, rates={'k1':1.34, 'k2':1.6e9, 'k3':8e3, 'k4':4e7,'k5':1}):
    """
    Calculates the time dependent concentrations of species in the oregonator system using the Euler method
    """
    # Maximum time, time point spacings and the time grid (all in s).
    tmax, dt = 90, 1e-6
    t = np.arange(0, tmax+dt, dt)
    conc_t = np.zeros((len(t),len(concs)))
    for i, c in enumerate(conc_t):
        if i == len(t)-1: break
        if i == 0:
            conc_t[i] = concs
        k_1 = _deriv(1, c, rates['k1'],rates['k2'],rates['k3'],rates['k4'],rates['k5'])
        k_1 = np.array(k_1)
        conc_t[i+1]=c+k_1*dt
    conc_t = conc_t.transpose()
    return t, conc_t

# %% ../nbs/02_Kinetics.ipynb 12
def oreg_calc_RK4(concs, rates={'k1':1.34, 'k2':1.6e9, 'k3':8e3, 'k4':4e7,'k5':1}):
    """
    Calculates the time dependent concentrations of species in the oregonator system using the Euler method
    """
    # Maximum time, time point spacings and the time grid (all in s).
    tmax, dt = 90, 1e-5
    t = np.arange(0, tmax+dt, dt)
    conc_t = np.zeros((len(t),len(concs)))
    for i, c in enumerate(conc_t):
        if i == len(t)-1: break
        if i == 0:
            conc_t[i] = concs
        k_1 = np.array(_deriv(1, c, rates['k1'],rates['k2'],rates['k3'],rates['k4'],rates['k5']))
        k_2 = np.array(_deriv(1, c+dt*k_1/2, rates['k1'],rates['k2'],rates['k3'],rates['k4'],rates['k5']))
        k_3 = np.array(_deriv(1, c+dt*k_2/2, rates['k1'],rates['k2'],rates['k3'],rates['k4'],rates['k5']))
        k_4 = np.array(_deriv(1, c+dt*k_3, rates['k1'],rates['k2'],rates['k3'],rates['k4'],rates['k5']))
        conc_t[i+1]=c+dt*(k_1+2*k_2+2*k_3+k_4)/6
    conc_t = conc_t.transpose()
    return t, conc_t
