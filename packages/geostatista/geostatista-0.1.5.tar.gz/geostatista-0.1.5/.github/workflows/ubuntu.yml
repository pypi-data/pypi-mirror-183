name: Linux
on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main
jobs:
  Run:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest]
        python-version: ["3.9", "3.10", "3.11"]
    env:
      OS: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Install GDAL
        run: |
            python -m pip install --upgrade pip
            pip install --no-cache-dir Cython
            pip install --find-links=https://girder.github.io/large_image_wheels --no-cache GDAL
      - name: Test GDAL installation
        run: |
            python -c "from osgeo import gdal"
            gdalinfo --version
      - name: Install dependencies
        run: |
            pip install -r requirements.txt -r requirements-dev.txt
            python setup.py install

#      - name: Install dependencies
#        run: |
#          $CONDA/bin/mamba env update --file environment.yml --name base
#          python setup.py install
#    - name: Lint with flake8
#      run: |
#        # add CONDA/bin/ in front of everything
#        $CONDA/bin/conda install flake8
#        # stop the build if there are Python syntax errors or undefined names
#        $CONDA/bin/flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#        $CONDA/bin/flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Generate coverage report
#        working-directory: ../
        run: |
          pwd
          python -m pytest -vvv --cov=geostatista --cov-report=xml

#      - name: Upload coverage to Codecov
#        uses: codecov/codecov-action@v1
#        with:
#          token: ${{ secrets.CODECOV_TOKEN }}
#          files: ./coverage1.xml,./coverage2.xml
#          directory: ./coverage/reports/
#          flags: unittests
#          env_vars: OS,PYTHON
#          name: codecov-umbrella
#          fail_ci_if_error: true
#          path_to_write_report: ./coverage/codecov_report.txt
#          verbose: true
