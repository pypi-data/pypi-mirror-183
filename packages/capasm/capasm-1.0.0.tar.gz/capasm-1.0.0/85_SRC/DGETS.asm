0005        UNL  
0010        NAM  DGET  
0020        DEF  RUNTIM
0030        DEF  TOKS  
0040        DEF  BASIC 
0050        DEF  ERMSG 
0060 RUNTIM DEF  INIT  
0070        DEF  GET.  
0080 BASIC  DEF  DECOM.
0090        DEF  GPARSE
0100        BYT  377,377
0110 TOKS   ASP  "DGET"
0120        ASP  "DECOM$"
0130 ERMSG  BYT  377
0140 INIT   RTN  
0150        BYT  20,56
0160 DECOM. JSB  =ONEI            ! POP LINE#
0170        LDM  R76,R45          ! MOVE FOR FNDLIN
0180        JSB  =FNDLIN
0190        STM  R36,R24
0200        POMD R45,+R24         ! POP LINE#
0210        BIN  
0220        CMM  R45,=231,251,2   ! END?
0230        JZR  NOLINE           ! YES
0240        LDM  R30,=INPBUF
0250        JSB  =DECOM           ! GET LINE
0260        CMB  R17,=300         ! ERRORS IN DECOM?
0270        JCY  ERLINE           ! JIF YES
0280        LDM  R26,=INPBUF
0290        SBM  R30,R26
0300 PULEN  PUMD R#,+R12          ! PUSH LENGTH
0310        PUMD R26,+R12         ! PUSH ADDRESS
0320 ERLINE RTN  
0330 NOLINE CLM  R30              !  NULL STRING
0340        JMP  PULEN            ! PARSE AND RUN FOR GET
0350 GPARSE PUMD R40,+R6          ! SAVE INPUT TOKEN
0360        JSB  =STREX+          ! FILE NAME ON R12 STACK
0370        POMD R40,-R6
0380        JEZ  ERR   
0390        LDB  R42,=371
0400        PUBD R42,+R12
0410        PUBD R43,+R12
0420        PUBD R43,+R12
0430        RTN  
0440 ERR    JSB  =ERROR+
0450        BYT  130
0460        BYT  141
0470 GET.   JSB  =TAPIN-          ! INIT TAPE
0480        JSB  =GETNAM          ! FETCH FILE NAME
0490        JSB  =DSCAN           ! NAME IN DIRECTORY?
0500        JEZ  ASNNAM           ! JIF YES
0510        JSB  =ER67D           ! NO NAME
0520 ASNNAM LDBD R47,X36,D.TYPE   ! DATA FILE TYPE?
0530        ANM  R47,=DATATY
0540        JNZ  OKSOFR           ! JIF YES
0550        JSB  =ER68D           ! WRONG TYPE
0560 OKSOFR JSB  =FET44           ! GET FILE#
0570        CLM  R40
0580        STBD R40,=B.ERFL      ! CLEAR ERROR FLAG
0590        LDBD R40,=CURFIL
0600        ICB  R46              !  LOG.REC. 1
0610        STMD R40,=B.FILE
0620        JSB  =COMLOG          ! HOW MANY LOG RECS?
0630        STMD R36,=B.#R/F
0640        STMD R32,=B.#B/R      ! BYTES/REC
0650        LDM  R56,=RECBUF      ! LOAD ADDRESS
0660        JSB  =READ85          ! READ 1ST REC
0670        JSB  =STOPTP          ! AND STOP
0680        CLB  R16              ! FOR PARSING
0690        JSB  =FXLEN           ! SET FOR EDITS
0700        LDMD R12,=NXTMEM      ! FIX 12 TOO
0710        JMP  NXTLIN           ! START IT
0720 EOR$   LDMD R30,=BINTAB
0730        JSB  X30,OUTLR        ! ADVANCE ON EOR
0740 NXTLIN CLM  R66
0750        LDBD R66,=B.ERFL      ! FILE OVF?
0760        JNZ  QUIT!!           ! QUIT IF YES
0770        LDBD R66,=B.PPTR      ! PHYS PTR
0780        ADM  R66,=RECBUF      ! INTO RECBUF
0790        LDBD R32,R66          ! FETCH THE BYTE
0800        ICB  R32              ! STRING?
0810        JNZ  NOTEOF           ! AT LEAST ITS NOT EOF
0820 QUIT!! JSB  =SET240          ! SET FOR QUITTING
0830        JSB  =TAPEXT          ! XPORT BACK DOWN
0840        RTN  
0850 NOTEOF JRN  QUIT!!           ! JIF NOT STRING
0860        CMB  R#,=360
0870        JZR  EOR$             ! JIF EOR
0880        LDMD R40,=B.LPTR
0890        SBM  R46,R40          ! BYTES/REC-CURRENT PTR
0900        CMM  R46,=4,0         ! JUST A $HEADER?
0910        JNC  EOR$             ! JIF YES
0920        LDM  R26,=INPBUF
0930        STMD R26,=RESDAT
0940 GETDAT LDMD R46,=BINTAB
0950        JSB  X46,S$HDR        ! CHEW UP HEADER
0960        STMD R56,=DATLEN      ! SET LENGTH
0970        JZR  NXTLIN           ! LOOP IF NULL
0980        CMM  R56,=210,0       ! STRING TOO BIG?
0990        JCY  QUIT!!           ! JIF YES
1000        LDMD R66,=B.LPTR
1010        STM  R66,R76
1020        ADM  R66,R56          ! ADD LENGTH
1030        LDMD R36,=B.#B/R      ! BYTES/REC
1040        CMM  R36,R66          ! LONGET THAN STRING?
1050        JCY  INBNDR           ! JIF YES
1060        SBM  R36,R76          ! SUBSTRING
1070        STMD R36,=DATLEN
1080        LDMD R36,=BINTAB
1090        JSB  X36,INBND        ! READ A PIECE
1100        JMP  GETDAT           ! LOOP FOR REST
1110 JMMP   JMP  NXTLIN
1120 INBNDR LDMD R26,=BINTAB
1130        JSB  X26,INBND        ! READ A STRING
1140        LDMD R26,=RESDAT      ! ADD A CR
1150        LDB  R32,=CR    
1160        PUBD R32,+R26
1170        LDMD R32,=BINTAB
1180        JSB  X32,PARSTP       ! PARSE THE LINE
1190        STMD R12,=STSIZE      ! AFTER PARSE
1200        BIN  
1210        CMB  R17,=300         !  ERRORS?
1220        JCY  QUIT!!           ! JIF YES
1230        JMP  JMMP             ! ELSE GET NEXT LINE
1240 PARSTP CLB  R36
1250        PUBD R36,+R6
1260 PRSTP2 LDM  R10,=INPBUF
1270        STMD R10,=SAVR10
1280        JSB  =GCHAR 
1290        JSB  =INTEGR
1300        BIN  
1310        JEZ  PTAPRN           ! PARSING FINISHED
1320        CMB  R20,=CR    
1330        JZR  WARNTP
1340        JSB  =P.PARS
1350        TSB  R17
1360        JPS  PTAPRN           ! PARSING FINISHED
1370 WARNTP POBD R36,-R6
1380        ICB  R36
1390        PUBD R36,+R6
1400        JEV  PTAPRN
1410        LDBD R36,=ERRORS
1420        CMB  R36,=23
1430        JZR  PTAPRN
1440        STBD R36,=ERNUM#
1450        LDM  R36,=AUTO# 
1460        STMD R36,=PCR         ! STATEMENT #
1470        CLM  R36
1480        STMD R36,=ERRORS
1490        LDB  R16,=2
1500        ANM  R17,=77
1510        JSB  =WARN  
1520        BYT  134
1530        LDM  R10,=INPBUF
1540        LDM  R36,R10
1550        ICM  R36
1560 MOVE-1 POBD R20,+R36
1570        PUBD R20,+R10         ! MOVE ONE BYTE
1580        CMB  R20,=BLANK       ! IS IT A BLANK
1590        JZR  MOVE-1           ! YES - MOVE NEXT BYTE
1600        JSB  =DIGIT 
1610        JEN  MOVE-1           ! MOVE NEXT BYTE
1620        LDB  R20,=BANG        ! MOVE ! TO
1630        PUBD R20,-R10         ! R10 STACK
1640        CLB  R16
1650        JMP  PRSTP2           ! CONTINUE PARSING
1660 PTAPRN POBD R36,-R6
1670        RTN  
1680 ! MORE UTILITIE
1690 INBND  LDMD R26,=BINTAB
1700        JSB  X26,RD+ADV       ! GET NEXT BYTE
1710        LDMD R26,=RESDAT
1720        PUBD R32,+R26         ! PUSH BYTE TO INPBUF
1730        STMD R26,=RESDAT      ! UPDATE ADDRESS
1740        LDMD R26,=DATLEN
1750        DCM  R26              ! DECR. DATA COUNT
1760        STMD R26,=DATLEN
1770        JNZ  INBND            ! LOOP
1780        RTN  
1790 S$HDR  LDMD R26,=BINTAB
1800        JSB  X26,RD+ADV
1810        LDMD R26,=BINTAB
1820        JSB  X26,RD+ADV       ! GET STRING LENGTH
1830        PUBD R#,+R6
1840        LDMD R26,=BINTAB
1850        JSB  X26,RD+ADV       ! HIGH ORDER LENGTH
1860        STB  R#,R57
1870        POBD R56,-R6          ! LOW ORDER BYTE
1880        RTN  
1890 RD+ADV CLM  R66
1900        LDBD R66,=B.PPTR      ! MOVE PPTR
1910        ADM  R66,=RECBUF
1920        LDBD R32,R66          ! GET DATA BYTE
1930        STBD R32,=DATUM       ! SAVE IT
1940        LDMD R36,=B.#B/R      ! COMPUTE NEXT POSITION
1950        LDMD R66,=B.LPTR
1960        ICM  R66
1970        CMM  R66,R36          ! OUTSIDE THIS LREC?
1980        JCY  OUTLR            ! JIF YES
1990        STM  R66,R64
2000        LDMD R66,=B.LREC      ! SAME REC
2010        JMP  LROK+ 
2020 OUTLR  LDMD R36,=B.LREC
2030        ICM  R36              ! BUMP LREC COUNTER
2040 OUTLR+ LDMD R66,=B.#R/F      ! END OF THE FILE?
2050        CMM  R66,R36
2060        JCY  LROK             ! JIF NO
2070        LDB  R66,=2           ! FLAG THE ERROR
2080        STBD R66,=B.ERFL
2090        JMP  REST32
2100 LROK   CLM  R64
2110        LDM  R66,R36
2120 LROK+  STMD R64,=B.LPTR
2130        DCM  R66              ! CALC PHYSICAL PTR
2140        LDMD R76,=B.#B/R
2150        JSB  =INTMUL
2160        LDMD R64,=B.LPTR
2170        CLM  R66
2180        ADM  R54,R64
2190        LDMD R66,=B.PREC      ! SAME PREC?
2200        CMM  R66,R55
2210        DRP  R54
2220        JZR  NOR/W            ! JIF YES
2230        STM  R54,R65
2240        STMD R65,=B.PPTR      ! SET NEW PTR
2250        STMD R66,=CURREC      ! NEW REC
2260        LDM  R56,=RECBUF      ! LOAD ADDRESS
2270        JSB  =READ85          ! READ NEXT REC
2280        JSB  =STOPTP
2290        JMP  REST32           ! RESTORE DATA BYTE
2300 NOR/W  STBD R#,=B.PPTR       ! SET PPTR
2310 REST32 LDBD R32,=DATUM       ! RESTORE DATA BYTE
2320        RTN  
2330 B.FILE DAD  101043
2340 B.PPTR DAD  101044
2350 B.PREC DAD  101045
2360 B.LPTR DAD  101047
2370 B.LREC DAD  101051
2380 B.#R/F DAD  101053
2390 B.#B/R DAD  101055
2400 B.ERFL DAD  101057
2410 TAPIN- DAD  24455
2420 ER68D  DAD  21715
2430 ER67D  DAD  24325
2440 COMLOG DAD  27352
2450 READ85 DAD  24670
2451 BINTAB DAD  101233
2460 ONEI   DAD  56154
2470 FNDLIN DAD  44151
2480 INPBUF DAD  100310
2490 DECOM  DAD  46041
2500 STREX+ DAD  13623
2510 ERROR+ DAD  06611
2520 GETNAM DAD  26511
2530 DSCAN  DAD  22516
2540 D.TYPE EQU  7
2550 DATATY EQU  20
2560 FET44  DAD  31524
2570 CURFIL DAD  101274
2580 RECBUF DAD  102000
2590 STOPTP DAD  20172
2600 FXLEN  DAD  36707
2610 NXTMEM DAD  100006
2620 SET240 DAD  11243
2630 TAPEXT DAD  22000
2640 RESDAT DAD  101225
2650 DATLEN DAD  101223
2660 CR     EQU  15
2670 STSIZE DAD  101130
2680 SAVR10 DAD  101227
2690 GCHAR  DAD  11755
2700 INTEGR DAD  11447
2710 P.PARS DAD  10646
2720 ERRORS DAD  100070
2730 ERNUM# DAD  100064
2740 AUTO#  DAD  100054
2750 PCR    DAD  100642
2760 WARN   DAD  6365
2770 BLANK  EQU  40
2780 DIGIT  DAD  12027
2790 BANG   EQU  41
2800 DATUM  DAD  100163
2810 INTMUL DAD  53076
2820 CURREC DAD  101276
2830        FIN  
