import abc as _abc

def _is_completed_in_limited_time(seconds, func, *args):...

class __BaseTestCase(_abc.ABC):
    def __init__(self, tester, failure_message):...
    @_abc.abstractmethod
    def run(self):...
    
class __KeywordCheckTest(__BaseTestCase):
    def __init__(self, tester, failure_message, test_script_words):...
    @_abc.abstractmethod
    def run(self):...

class RequiredModuleTest(__BaseTestCase):
    def __init__(self, tester, failure_message, module_name, definded_modules):...
    def run(self):...

class RequiredObjectTest(__BaseTestCase):
    def __init__(self, tester, failure_message, object_name, definded_objects):...
    def run(self):...

class InvalidObjectTest(__KeywordCheckTest):
    def __init__(self, tester, failure_message, test_script_words, object_name):...
    def run(self):...

class InvalidKeywordTest(__KeywordCheckTest):
    def __init__(self, tester, failure_message, test_script_words, keyword):...
    def run(self):...

class InvalidOperatorTest(__KeywordCheckTest):
    def __init__(self, tester, failure_message, test_script_words, keyword):...
    def run(self):...

class LimitTimeTest(__BaseTestCase):
    def __init__(self, tester, failure_message, time_limit, target):...
    def run(self, *args, **kwargs):...

class RecursionTest(__BaseTestCase):
    def __init__(self, tester, failure_message, target, require_recursion=...):...
    def run(self, *args, **kwargs):...