# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['sio_asyncapi', 'sio_asyncapi.asyncapi', 'sio_asyncapi.asyncapi.models']

package_data = \
{'': ['*']}

install_requires = \
['flask-socketio>=5.3.2,<6.0.0',
 'loguru>=0.6.0,<0.7.0',
 'pydantic[email]>=1.10.4,<2.0.0',
 'python-engineio>=4.3.4,<5.0.0',
 'pyyaml>=6.0,<7.0']

setup_kwargs = {
    'name': 'sio-asyncapi',
    'version': '0.3.0',
    'description': 'Flask SocketIO with auto-generate Asyncapi documentation',
    'long_description': 'SIO-AsyncAPI\n============\n\n[![PyPI Version][pypi-image]][pypi-url]\n[![Build Status][build-image]][build-url]\n[![Code Coverage][coverage-image]][coverage-url]\n[![][versions-image]][versions-url]\n\n<!-- Badges: -->\n\n[pypi-image]: https://img.shields.io/pypi/v/sio_asyncapi\n[pypi-url]: https://pypi.org/project/sio_asyncapi/\n[build-image]: https://github.com/daler-rahimov/sio-asyncapi/actions/workflows/python-package.yml/badge.svg\n[build-url]: https://github.com/daler-rahimov/sio-asyncapi/actions/workflows/python-package.yml\n[coverage-image]: https://codecov.io/gh/daler-rahimov/sio-asyncapi/branch/develop/graph/badge.svg\n[coverage-url]: https://app.codecov.io/gh/daler-rahimov/sio-asyncapi\n[versions-image]: https://img.shields.io/pypi/pyversions/sio_asyncapi/\n[versions-url]: https://pypi.org/project/sio_asyncapi/\n\n\nSIO-AsyncAPI is a Python library built on the top of [Flask-SocketIO](https://flask-socketio.readthedocs.io/) and driven by [AsyncAPI](https://www.asyncapi.com/). It allows you to generate an AsyncAPI specification from your SocketIO server and validate messages against it.\n\nSimilar to FastAPI, SIO-AsyncAPI allows you to define your SocketIO server using Python type annotations and Pydantic models. It also provides a way to generate an AsyncAPI specification from your SocketIO server.\n\n\n## Installation\n\n```bash\npip install sio_asyncapi\n```\n\n## Basic Example\n\n```py\n# examples/simple.py\n\nfrom flask import Flask\nfrom sio_asyncapi import AsyncAPISocketIO, ResponseValidationError, RequestValidationError\nfrom pydantic import BaseModel, Field, EmailStr\nfrom typing import Optional\nimport logging\nlogger = logging.getLogger(__name__)\n\napp = Flask(__name__)\n\nsocketio = AsyncAPISocketIO(\n    app,\n    validate=True,\n    generate_docs=True,\n    version="1.0.0",\n    title="Demo",\n    description="Demo Server",\n    server_url="http://localhost:5000",\n    server_name="DEMO_SIO",\n)\n\n\nclass UserSignUpRequest(BaseModel):\n    """Request model for user sign up"""\n    email: EmailStr = Field(..., description="User email", example="bob@gmail.com")\n    password: str = Field(..., description="User password", example="123456")\n\n\nclass UserSignUpResponse(BaseModel):\n    """Response model for user sign up"""\n    success: bool = Field(True, description="Success status")\n    error: Optional[str] = Field( None, description="Error message if any",\n        example="Invalid request")\n\n\n@socketio.on("user_sign_up", get_from_typehint=True)\ndef user_sign_up(request: UserSignUpRequest) -> UserSignUpResponse:\n    """User sign up"""\n    _ = request\n    return UserSignUpResponse(success=True, error=None)\n\n@socketio.on_error_default\ndef default_error_handler(e: Exception):\n    """\n    Default error handler. It called if no other error handler defined.\n    Handles RequestValidationError and ResponseValidationError errors.\n    """\n    if isinstance(e, RequestValidationError):\n        logger.error(f"Request validation error: {e}")\n        return UserSignUpResponse(error=str(e), success=False).json()\n    elif isinstance(e, ResponseValidationError):\n        logger.critical(f"Response validation error: {e}")\n        raise e\n    else:\n        logger.critical(f"Unknown error: {e}")\n        raise e\n\nif __name__ == \'__main__\':\n    socketio.run(app, debug=True)\n\n# import pathlib\n# if __name__ == "__main__":\n#     path = pathlib.Path(__file__).parent / "simple.yml"\n#     doc_str = socketio.asyncapi_doc.get_yaml()\n#     with open(path, "w") as f:\n#         f.write(doc_str)\n#     print(doc_str)\n\n```\n\nHere is how validation error looks like in FireCamp:\n![](https://github.com/daler-rahimov/sio-asyncapi/blob/master/doc/assets/20221219000309.png?raw=true)\n\nIn order to get the AsyncAPI specification from your SocketIO server instead of running the server, you can do the following:\n```python\nimport pathlib\nif __name__ == "__main__":\n    path = pathlib.Path(__file__).parent / "simple.yml"\n    doc_str = socketio.asyncapi_doc.get_yaml()\n    with open(path, "w") as f:\n        f.write(doc_str)\n    print(doc_str)\n\n```\nExample of the AsyncAPI specification generated from the above example:\n```yaml\n# examples/simple.yml\n\nasyncapi: 2.5.0\nchannels:\n  /:\n    publish:\n      message:\n        oneOf:\n        - $ref: \'#/components/messages/User_Sign_Up\'\n    subscribe:\n      message:\n        oneOf: []\n    x-handlers:\n      disconnect: disconnect\ncomponents:\n  messages:\n    User_Sign_Up:\n      description: User sign up\n      name: user_sign_up\n      payload:\n        $ref: \'#/components/schemas/UserSignUpRequest\'\n        deprecated: false\n      x-ack:\n        description: Response model for user sign up\n        properties:\n          error:\n            description: Error message if any\n            example: Invalid request\n            title: Error\n            type: string\n          success:\n            default: true\n            description: Success status\n            title: Success\n            type: boolean\n        title: UserSignUpResponse\n        type: object\n  schemas:\n    NoSpec:\n      deprecated: false\n      description: Specification is not provided\n    UserSignUpRequest:\n      description: Request model for user sign up\n      properties:\n        email:\n          description: User email\n          example: bob@gmail.com\n          format: email\n          title: Email\n          type: string\n        password:\n          description: User password\n          example: \'123456\'\n          title: Password\n          type: string\n      required:\n      - email\n      - password\n      title: UserSignUpRequest\n      type: object\n    UserSignUpResponse:\n      description: Response model for user sign up\n      properties:\n        error:\n          description: Error message if any\n          example: Invalid request\n          title: Error\n          type: string\n        success:\n          default: true\n          description: Success status\n          title: Success\n          type: boolean\n      title: UserSignUpResponse\n      type: object\ninfo:\n  description: \'Demo Server\n\n    <br/> AsyncAPI currently does not support Socket.IO binding and Web Socket like\n    syntax used for now.\n\n    In order to add support for Socket.IO ACK value, AsyncAPI is extended with with\n    x-ack keyword.\n\n    This documentation should **NOT** be used for generating code due to these limitations.\n\n    \'\n  title: Demo\n  version: 1.0.0\nservers:\n  DEMO_SIO:\n    protocol: socketio\n    url: http://localhost:5000\n\n```\n\nRendered version of the above AsyncAPI specification:\n![](https://github.com/daler-rahimov/sio-asyncapi/blob/master/doc/assets/20221219000543.png?raw=true)\n\n## Converting from Flask-SocketIO to SIO-AsyncAPI\nSIO-AsyncAPI is built on top of Flask-SocketIO and all unit tests of Flask-SocketIO are tested against SIO-AsyncAPI. If you converting your SocketIO server from Flask-SocketIO to SIO-AsyncAPI, you can be sure that your SocketIO server will work as expected. When converting your SocketIO server from Flask-SocketIO to SIO-AsyncAPI, it\'s as simple as changing the import statement:\n\n```python\n# instead of `from flask_socketio import SocketIO`\nfrom sio_asyncapi import AsyncAPISocketIO as SocketIO\n...\n# There are additional arguments that you can pass to the constructor of AsyncAPISocketIO\nsocketio = SocketIO(app)\n...\n```\n\n## Acknowledgements\nMost of the implementation follows research done by Dimitrios Dedoussis (https://www.asyncapi.com/blog/socketio-part2) and uses some Pydantic models from [here](https://github.com/albertnadal/asyncapi-schema-pydantic)\n\n## Missing Features\nSIO-AsyncAPI is still in its early stages and there are some features that are not yet implemented. If you are interested in contributing to SIO-AsyncAPI any contribution is welcome. Here is the list of missing features:\n\n- [x] Support of AsycnAPI documentation and validation for `emit` messages\n- [ ] Support of Flask-SocketIO `namespaces` and `rooms`\n- [ ] Authentication and security auto documentation\n- [ ] `connect` and `disconnect` handlers auto documentation\n',
    'author': 'Daler Rahimov',
    'author_email': 'daler.edu@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8.10,<4.0.0',
}


setup(**setup_kwargs)
