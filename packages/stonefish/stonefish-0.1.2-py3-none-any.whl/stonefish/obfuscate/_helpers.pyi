import libcst as cst
from _typeshed import Incomplete
from pathlib import Path
from typing import Callable

def get_random_name(k: int = ...): ...
def apply_to_all_py_recursively(paths: list[Union[Path, str]], fun: Callable) -> None: ...

class FixAllNames(cst.CSTTransformer):
    applied_name_changes: Incomplete
    def __init__(self, applied_name_changes: dict[str, str]) -> None: ...
    def leave_Name(self, orig_node, updated_node): ...

class FixAllStrings(cst.CSTTransformer):
    string_changes: Incomplete
    def __init__(self, string_changes: dict[str, str]) -> None: ...
    def leave_SimpleString(self, orig_node, updated_node): ...

class RelativeImportFinder(cst.CSTVisitor):
    dirpath: Incomplete
    new_method_names: Incomplete
    new_import_names: Incomplete
    def __init__(self, dirpath: Path, new_method_names: dict[tuple[Path, str], str]) -> None: ...
    def visit_ImportFrom(self, node): ...

class NameFinder(cst.CSTVisitor):
    names: Incomplete
    def __init__(self) -> None: ...
    def visit_Name(self, node) -> None: ...
