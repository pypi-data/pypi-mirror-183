import libcst as cst
from ._helpers import FixAllNames as FixAllNames, FixAllStrings as FixAllStrings, RelativeImportFinder as RelativeImportFinder, apply_to_all_py_recursively as apply_to_all_py_recursively, get_random_name as get_random_name
from _typeshed import Incomplete
from pathlib import Path

def rename_private_functions(paths: list[Union[Path, str]], seed: Union[int, None] = ...) -> None: ...
def set_new_names(paths): ...
def rename_private_functions_string(py_source: str, rename_all_functions: bool = ..., seed: Union[int, None] = ...) -> tuple[str, dict]: ...
def fix_imports(paths: list[Path], new_names) -> None: ...

class RemoveTypeAnnotations(cst.CSTTransformer):
    def leave_Annotation(self, orig_node, updated_node): ...

class RemoveDocstring(cst.CSTTransformer):
    def leave_FunctionDef(self, orig_node, updated_node): ...

class RenameFunctions(cst.CSTTransformer):
    new_names: Incomplete
    def __init__(self, new_names) -> None: ...
    def leave_FunctionDef(self, orig_node, updated_node): ...
    def leave_Name(self, orig_node, updated_node): ...

class GetNewNamesAllFunctions(cst.CSTVisitor):
    new_names: Incomplete
    def __init__(self) -> None: ...
    def visit_FunctionDef(self, node) -> None: ...

class GetNewNamesUnderscoredFunctions(cst.CSTVisitor):
    new_names: Incomplete
    def __init__(self) -> None: ...
    def visit_FunctionDef(self, node) -> None: ...
