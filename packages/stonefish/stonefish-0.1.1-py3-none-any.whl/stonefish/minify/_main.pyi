import libcst as cst

def minify_source(py_source: str) -> str: ...
def remove_comments(tree): ...
def remove_docstrings(tree): ...
def remove_whitespace(tree): ...

class WhitespaceRemover(cst.CSTTransformer):
    def leave_Module(self, orig_node, updated_node): ...
    def leave_AssignTarget(self, orig_node, updated_node): ...
    def leave_EmptyLine(self, orig_node, updated_node): ...
    def leave_TrailingWhitespace(self, orig_node, updated_node): ...
    def leave_And(self, orig_node, updated_node): ...
    def leave_Or(self, orig_node, updated_node): ...
    def leave_Add(self, orig_node, updated_node): ...
    def leave_Subtract(self, orig_node, updated_node): ...
    def leave_Multiply(self, orig_node, updated_node): ...
    def leave_Divide(self, orig_node, updated_node): ...
    def leave_FunctionDef(self, orig_node, updated_node): ...
    def leave_ClassDef(self, orig_node, updated_node): ...
    def leave_Param(self, orig_node, updated_node): ...
    def leave_Comma(self, orig_node, updated_node): ...
    def leave_Call(self, orig_node, updated_node): ...
    def leave_Annotation(self, orig_node, updated_node): ...
    def leave_Equal(self, orig_node, updated_node): ...
    def leave_NotEqual(self, orig_node, updated_node): ...
    def leave_GreaterThanEqual(self, orig_node, updated_node): ...
    def leave_LessThanEqual(self, orig_node, updated_node): ...
    def leave_GreaterThan(self, orig_node, updated_node): ...
    def leave_LessThan(self, orig_node, updated_node): ...
    def leave_AddAssign(self, orig_node, updated_node): ...
    def leave_SubtractAssign(self, orig_node, updated_node): ...
    def leave_MultiplyAssign(self, orig_node, updated_node): ...
    def leave_DivideAssign(self, orig_node, updated_node): ...
    def leave_DictElement(self, orig_node, updated_node): ...
    def leave_DictComp(self, orig_node, updated_node): ...
    def leave_LeftCurlyBrace(self, orig_node, updated_node): ...
    def leave_RightCurlyBrace(self, orig_node, updated_node): ...
    def leave_LeftSquareBracket(self, orig_node, updated_node): ...
    def leave_RightSquareBracket(self, orig_node, updated_node): ...
    def leave_Arg(self, orig_node, updated_node): ...
    def leave_LeftParen(self, orig_node, updated_node): ...
    def leave_RightParen(self, orig_node, updated_node): ...
    def leave_CompFor(self, orig_node, updated_node): ...
    def leave_IfExp(self, orig_node, updated_node): ...
    def leave_Return(self, orig_node, updated_node): ...
    def leave_Del(self, orig_node, updated_node): ...
    def leave_Import(self, orig_node, updated_node): ...
    def leave_ImportFrom(self, orig_node, updated_node): ...
    def leave_For(self, orig_node, updated_node): ...
    def leave_While(self, orig_node, updated_node): ...
    def leave_If(self, orig_node, updated_node): ...
    def leave_In(self, orig_node, updated_node): ...
    def leave_AsName(self, orig_node, updated_node): ...
    def leave_ExceptHandler(self, orig_node, updated_node): ...
