# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import common_pb2 as proto_dot_common__pb2
from proto import proxima_be_pb2 as proto_dot_proxima__be__pb2


class ProximaServiceStub(object):
    """! GRPC service 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create_collection = channel.unary_unary(
                '/proxima.be.proto.ProximaService/create_collection',
                request_serializer=proto_dot_proxima__be__pb2.CollectionConfig.SerializeToString,
                response_deserializer=proto_dot_common__pb2.Status.FromString,
                )
        self.drop_collection = channel.unary_unary(
                '/proxima.be.proto.ProximaService/drop_collection',
                request_serializer=proto_dot_proxima__be__pb2.CollectionName.SerializeToString,
                response_deserializer=proto_dot_common__pb2.Status.FromString,
                )
        self.describe_collection = channel.unary_unary(
                '/proxima.be.proto.ProximaService/describe_collection',
                request_serializer=proto_dot_proxima__be__pb2.CollectionName.SerializeToString,
                response_deserializer=proto_dot_proxima__be__pb2.DescribeCollectionResponse.FromString,
                )
        self.list_collections = channel.unary_unary(
                '/proxima.be.proto.ProximaService/list_collections',
                request_serializer=proto_dot_proxima__be__pb2.ListCondition.SerializeToString,
                response_deserializer=proto_dot_proxima__be__pb2.ListCollectionsResponse.FromString,
                )
        self.stats_collection = channel.unary_unary(
                '/proxima.be.proto.ProximaService/stats_collection',
                request_serializer=proto_dot_proxima__be__pb2.CollectionName.SerializeToString,
                response_deserializer=proto_dot_proxima__be__pb2.StatsCollectionResponse.FromString,
                )
        self.write = channel.unary_unary(
                '/proxima.be.proto.ProximaService/write',
                request_serializer=proto_dot_proxima__be__pb2.WriteRequest.SerializeToString,
                response_deserializer=proto_dot_common__pb2.Status.FromString,
                )
        self.query = channel.unary_unary(
                '/proxima.be.proto.ProximaService/query',
                request_serializer=proto_dot_proxima__be__pb2.QueryRequest.SerializeToString,
                response_deserializer=proto_dot_proxima__be__pb2.QueryResponse.FromString,
                )
        self.get_document_by_key = channel.unary_unary(
                '/proxima.be.proto.ProximaService/get_document_by_key',
                request_serializer=proto_dot_proxima__be__pb2.GetDocumentRequest.SerializeToString,
                response_deserializer=proto_dot_proxima__be__pb2.GetDocumentResponse.FromString,
                )
        self.get_version = channel.unary_unary(
                '/proxima.be.proto.ProximaService/get_version',
                request_serializer=proto_dot_proxima__be__pb2.GetVersionRequest.SerializeToString,
                response_deserializer=proto_dot_proxima__be__pb2.GetVersionResponse.FromString,
                )


class ProximaServiceServicer(object):
    """! GRPC service 
    """

    def create_collection(self, request, context):
        """Create a collection 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def drop_collection(self, request, context):
        """Drop a collection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def describe_collection(self, request, context):
        """Get information of a collection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_collections(self, request, context):
        """Get all collection information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stats_collection(self, request, context):
        """Get collection statstics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def write(self, request, context):
        """Write records
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def query(self, request, context):
        """Knn query records
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_document_by_key(self, request, context):
        """Get document information by primary key
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_version(self, request, context):
        """Get server version
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProximaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create_collection': grpc.unary_unary_rpc_method_handler(
                    servicer.create_collection,
                    request_deserializer=proto_dot_proxima__be__pb2.CollectionConfig.FromString,
                    response_serializer=proto_dot_common__pb2.Status.SerializeToString,
            ),
            'drop_collection': grpc.unary_unary_rpc_method_handler(
                    servicer.drop_collection,
                    request_deserializer=proto_dot_proxima__be__pb2.CollectionName.FromString,
                    response_serializer=proto_dot_common__pb2.Status.SerializeToString,
            ),
            'describe_collection': grpc.unary_unary_rpc_method_handler(
                    servicer.describe_collection,
                    request_deserializer=proto_dot_proxima__be__pb2.CollectionName.FromString,
                    response_serializer=proto_dot_proxima__be__pb2.DescribeCollectionResponse.SerializeToString,
            ),
            'list_collections': grpc.unary_unary_rpc_method_handler(
                    servicer.list_collections,
                    request_deserializer=proto_dot_proxima__be__pb2.ListCondition.FromString,
                    response_serializer=proto_dot_proxima__be__pb2.ListCollectionsResponse.SerializeToString,
            ),
            'stats_collection': grpc.unary_unary_rpc_method_handler(
                    servicer.stats_collection,
                    request_deserializer=proto_dot_proxima__be__pb2.CollectionName.FromString,
                    response_serializer=proto_dot_proxima__be__pb2.StatsCollectionResponse.SerializeToString,
            ),
            'write': grpc.unary_unary_rpc_method_handler(
                    servicer.write,
                    request_deserializer=proto_dot_proxima__be__pb2.WriteRequest.FromString,
                    response_serializer=proto_dot_common__pb2.Status.SerializeToString,
            ),
            'query': grpc.unary_unary_rpc_method_handler(
                    servicer.query,
                    request_deserializer=proto_dot_proxima__be__pb2.QueryRequest.FromString,
                    response_serializer=proto_dot_proxima__be__pb2.QueryResponse.SerializeToString,
            ),
            'get_document_by_key': grpc.unary_unary_rpc_method_handler(
                    servicer.get_document_by_key,
                    request_deserializer=proto_dot_proxima__be__pb2.GetDocumentRequest.FromString,
                    response_serializer=proto_dot_proxima__be__pb2.GetDocumentResponse.SerializeToString,
            ),
            'get_version': grpc.unary_unary_rpc_method_handler(
                    servicer.get_version,
                    request_deserializer=proto_dot_proxima__be__pb2.GetVersionRequest.FromString,
                    response_serializer=proto_dot_proxima__be__pb2.GetVersionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proxima.be.proto.ProximaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ProximaService(object):
    """! GRPC service 
    """

    @staticmethod
    def create_collection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.be.proto.ProximaService/create_collection',
            proto_dot_proxima__be__pb2.CollectionConfig.SerializeToString,
            proto_dot_common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def drop_collection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.be.proto.ProximaService/drop_collection',
            proto_dot_proxima__be__pb2.CollectionName.SerializeToString,
            proto_dot_common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def describe_collection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.be.proto.ProximaService/describe_collection',
            proto_dot_proxima__be__pb2.CollectionName.SerializeToString,
            proto_dot_proxima__be__pb2.DescribeCollectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_collections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.be.proto.ProximaService/list_collections',
            proto_dot_proxima__be__pb2.ListCondition.SerializeToString,
            proto_dot_proxima__be__pb2.ListCollectionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stats_collection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.be.proto.ProximaService/stats_collection',
            proto_dot_proxima__be__pb2.CollectionName.SerializeToString,
            proto_dot_proxima__be__pb2.StatsCollectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.be.proto.ProximaService/write',
            proto_dot_proxima__be__pb2.WriteRequest.SerializeToString,
            proto_dot_common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.be.proto.ProximaService/query',
            proto_dot_proxima__be__pb2.QueryRequest.SerializeToString,
            proto_dot_proxima__be__pb2.QueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_document_by_key(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.be.proto.ProximaService/get_document_by_key',
            proto_dot_proxima__be__pb2.GetDocumentRequest.SerializeToString,
            proto_dot_proxima__be__pb2.GetDocumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_version(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.be.proto.ProximaService/get_version',
            proto_dot_proxima__be__pb2.GetVersionRequest.SerializeToString,
            proto_dot_proxima__be__pb2.GetVersionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class HttpProximaServiceStub(object):
    """! Restful APIs of ProximaService for management of proxima be
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.collection = channel.unary_unary(
                '/proxima.be.proto.HttpProximaService/collection',
                request_serializer=proto_dot_common__pb2.HttpRequest.SerializeToString,
                response_deserializer=proto_dot_common__pb2.HttpResponse.FromString,
                )
        self.stats_collection = channel.unary_unary(
                '/proxima.be.proto.HttpProximaService/stats_collection',
                request_serializer=proto_dot_common__pb2.HttpRequest.SerializeToString,
                response_deserializer=proto_dot_common__pb2.HttpResponse.FromString,
                )
        self.write = channel.unary_unary(
                '/proxima.be.proto.HttpProximaService/write',
                request_serializer=proto_dot_common__pb2.HttpRequest.SerializeToString,
                response_deserializer=proto_dot_common__pb2.HttpResponse.FromString,
                )
        self.query = channel.unary_unary(
                '/proxima.be.proto.HttpProximaService/query',
                request_serializer=proto_dot_common__pb2.HttpRequest.SerializeToString,
                response_deserializer=proto_dot_common__pb2.HttpResponse.FromString,
                )
        self.get_document_by_key = channel.unary_unary(
                '/proxima.be.proto.HttpProximaService/get_document_by_key',
                request_serializer=proto_dot_common__pb2.HttpRequest.SerializeToString,
                response_deserializer=proto_dot_common__pb2.HttpResponse.FromString,
                )
        self.list_collections = channel.unary_unary(
                '/proxima.be.proto.HttpProximaService/list_collections',
                request_serializer=proto_dot_common__pb2.HttpRequest.SerializeToString,
                response_deserializer=proto_dot_common__pb2.HttpResponse.FromString,
                )
        self.get_version = channel.unary_unary(
                '/proxima.be.proto.HttpProximaService/get_version',
                request_serializer=proto_dot_common__pb2.HttpRequest.SerializeToString,
                response_deserializer=proto_dot_common__pb2.HttpResponse.FromString,
                )


class HttpProximaServiceServicer(object):
    """! Restful APIs of ProximaService for management of proxima be
    """

    def collection(self, request, context):
        """! Collection management APIS
        1. Create Collection
        Http: POST /v1/collection/{collection}
        You can use the create collection API to add a new collection to an Proxima BE server. When creating an
        index, you need specify the CollectionConfig as json string attached to the body
        2. Get Collection
        HTTP: GET /{collection}
        Returns information about one collection named by Path Param ${collection}.
        3. Delete Collection
        HTTP: DEL /{collection}
        Deletes an existing collection named by Path Param ${collection}
        4. Update Collection
        HTTP: PUT /{collection}, supported later

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stats_collection(self, request, context):
        """! Retrieve Stat of Collection
        HTTP: GET /v1/collection/{collection}/stat

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def write(self, request, context):
        """! Write records to collection
        HTTP: POST /v1/collection/{collection}/index

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def query(self, request, context):
        """! Query documents on collection
        HTTP: POST /v1/collection/{collection}/query

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_document_by_key(self, request, context):
        """! Write records to collection
        HTTP: GET /v1/collection/{collection}/doc?key={primary_key}

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_collections(self, request, context):
        """! List Collections
        HTTP: GET /v1/collections?repository={repo}
        Returns information about collections. Query param ${repo} specified collection should have been attached
        repository named by ${repo}

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_version(self, request, context):
        """! Get server version
        HTTP: GET /version
        Returns version string
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HttpProximaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'collection': grpc.unary_unary_rpc_method_handler(
                    servicer.collection,
                    request_deserializer=proto_dot_common__pb2.HttpRequest.FromString,
                    response_serializer=proto_dot_common__pb2.HttpResponse.SerializeToString,
            ),
            'stats_collection': grpc.unary_unary_rpc_method_handler(
                    servicer.stats_collection,
                    request_deserializer=proto_dot_common__pb2.HttpRequest.FromString,
                    response_serializer=proto_dot_common__pb2.HttpResponse.SerializeToString,
            ),
            'write': grpc.unary_unary_rpc_method_handler(
                    servicer.write,
                    request_deserializer=proto_dot_common__pb2.HttpRequest.FromString,
                    response_serializer=proto_dot_common__pb2.HttpResponse.SerializeToString,
            ),
            'query': grpc.unary_unary_rpc_method_handler(
                    servicer.query,
                    request_deserializer=proto_dot_common__pb2.HttpRequest.FromString,
                    response_serializer=proto_dot_common__pb2.HttpResponse.SerializeToString,
            ),
            'get_document_by_key': grpc.unary_unary_rpc_method_handler(
                    servicer.get_document_by_key,
                    request_deserializer=proto_dot_common__pb2.HttpRequest.FromString,
                    response_serializer=proto_dot_common__pb2.HttpResponse.SerializeToString,
            ),
            'list_collections': grpc.unary_unary_rpc_method_handler(
                    servicer.list_collections,
                    request_deserializer=proto_dot_common__pb2.HttpRequest.FromString,
                    response_serializer=proto_dot_common__pb2.HttpResponse.SerializeToString,
            ),
            'get_version': grpc.unary_unary_rpc_method_handler(
                    servicer.get_version,
                    request_deserializer=proto_dot_common__pb2.HttpRequest.FromString,
                    response_serializer=proto_dot_common__pb2.HttpResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proxima.be.proto.HttpProximaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HttpProximaService(object):
    """! Restful APIs of ProximaService for management of proxima be
    """

    @staticmethod
    def collection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.be.proto.HttpProximaService/collection',
            proto_dot_common__pb2.HttpRequest.SerializeToString,
            proto_dot_common__pb2.HttpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stats_collection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.be.proto.HttpProximaService/stats_collection',
            proto_dot_common__pb2.HttpRequest.SerializeToString,
            proto_dot_common__pb2.HttpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.be.proto.HttpProximaService/write',
            proto_dot_common__pb2.HttpRequest.SerializeToString,
            proto_dot_common__pb2.HttpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.be.proto.HttpProximaService/query',
            proto_dot_common__pb2.HttpRequest.SerializeToString,
            proto_dot_common__pb2.HttpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_document_by_key(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.be.proto.HttpProximaService/get_document_by_key',
            proto_dot_common__pb2.HttpRequest.SerializeToString,
            proto_dot_common__pb2.HttpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_collections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.be.proto.HttpProximaService/list_collections',
            proto_dot_common__pb2.HttpRequest.SerializeToString,
            proto_dot_common__pb2.HttpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_version(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.be.proto.HttpProximaService/get_version',
            proto_dot_common__pb2.HttpRequest.SerializeToString,
            proto_dot_common__pb2.HttpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
