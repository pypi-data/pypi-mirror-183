# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['tmac', 'tmac.plus', 'tmac.plus_aws', 'tmac.threat_library']

package_data = \
{'': ['*'], 'tmac': ['templates/*'], 'tmac.threat_library': ['templates/*']}

install_requires = \
['diagrams>=0.23.1,<0.24.0', 'jinja2>=3.1.2,<4.0.0', 'tabulate>=0.9.0,<0.10.0']

setup_kwargs = {
    'name': 'tmac',
    'version': '0.0.9',
    'description': 'Agile Threat Modeling as Code',
    'long_description': '# tmac\n> Agile Threat Modeling as Code\n- Close to the code - close to developers\n\n## Install\n```bash\npip install tmac\n```\n\n## How to use\n```bash\npython3 tmac.py\n```\n\n```python\n#!/usr/bin/env python3\n\nfrom tmac import (\n    Model,\n    Process,\n    Protocol,\n    Score,\n    TableFormat,\n    Technology,\n    TrustBoundary,\n)\nfrom tmac.plus import Browser, Database\n\nmodel = Model("Demo Model", description="Sample description")\n\ninternet = TrustBoundary(model, "Internet")\ndmz = TrustBoundary(model, "DMZ")\nintranet = TrustBoundary(model, "Intranet")\n\nbrowser = Browser(model, "Browser", trust_boundary=internet)\n\nweb_server = Process(\n    model,\n    "WebServer",\n    technology=Technology.WEB_APPLICATION,\n    trust_boundary=dmz,\n)\n\ndatabase = Database(\n    model,\n    "Database",\n    trust_boundary=intranet,\n)\n\nweb_traffic = browser.add_data_flow(\n    "WebTraffic",\n    destination=web_server,\n    protocol=Protocol.HTTPS,\n)\n\nweb_traffic.transfers(\n    "UserCredentials",\n    confidentiality=Score.HIGH,\n    integrity=Score.HIGH,\n    availability=Score.HIGH,\n)\n\ndatabase_traffic = web_server.add_data_flow(\n    "DatabaseTraffic",\n    destination=database,\n    protocol=Protocol.SQL,\n)\n\ndatabase_traffic.transfers(\n    "UserDetails",\n    confidentiality=Score.HIGH,\n    integrity=Score.HIGH,\n    availability=Score.HIGH,\n)\n\nprint(model.risks_table(table_format=TableFormat.GITHUB))\n```\nOutput:\n| ID                                 | Category                | Risk                                                                            | Treatment   |\n|------------------------------------|-------------------------|---------------------------------------------------------------------------------|-------------|\n| CAPEC-62@WebServer@WebTraffic      | Subvert Access Control  | Cross-Site Request Forgery (CSRF) risk at WebServer via WebTraffic from Browser | in-progress |\n| CAPEC-63@WebServer                 | Inject Unexpected Items | Cross-Site Scripting (XSS) risk at WebServer                                    | accepted    |\n| CAPEC-66@WebServer@DatabaseTraffic | Inject Unexpected Items | SQL Injection risk at WebServer against database Database via DatabaseTraffic   | mitigated   |\n|...|...|...|...|\n```python\nprint(model.create_backlog_table(table_format=TableFormat.GITHUB))\n```\nOutput:\n| ID                                            | Category                                     | User Story                                                                                                                                                                                                                                                         | State       |\n|-----------------------------------------------|----------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------|\n| ASVS-13.2.3@CAPEC-62@WebServer@WebTraffic     | RESTful Web Service                          | Verify that RESTful web services that utilize cookies are protected from Cross-Site Request Forgery via the use of at least one or more of the following: double submit cookie pattern, CSRF nonces, or Origin request header checks.                              | draft       |\n| ASVS-5.3.5@CAPEC-66@WebServer@DatabaseTraffic | Output Encoding and Injection Prevention     | Verify that where parameterized or safer mechanisms are not present, context-specific output encoding is used to protect against injection attacks, such as the use of SQL escaping to protect against SQL injection.                                              | closed      |\n| ASVS-1.2.3@CAPEC-62@WebServer@WebTraffic      | Authentication Architecture                  | Verify that the application uses a single vetted authentication mechanism that is known to be secure, can be extended to include strong authentication, and has sufficient logging and monitoring to detect account abuse or breaches.                             | in-progress |\n|...|...|...|...|\n## Jupyter Threatbooks\n> Threat modeling with jupyter notebooks\n\n![threatbook.png](https://github.com/hupe1980/tmac/raw/main/.assets/threatbook.png)\n\n## Generating Diagrams\n```python\nmodel.create_data_flow_diagram()\n```\n![threatbook.png](https://github.com/hupe1980/tmac/raw/main/.assets/data-flow-diagram.png)\n\n## High level elements (tmac/plus*)\n```python\nfrom tmac.plus_aws import ApplicationLoadBalancer\n\n# ...\n\nalb = ApplicationLoadBalancer(model, "ALB", waf=True)\n\n```\n\n## Custom ThreatLibrary\n```python\nfrom tmac import Model, ThreatLibrary\n\nlib = ThreatLibrary()\n\nlib.add_threat("""... your custom threats ...""")\n\nmodel = Model("Demo Model", threat_library=lib)\n```\n## Examples\n\nSee more complete [examples](https://github.com/hupe1980/tmac/tree/master/examples).\n\n## Prior work and other related projects\n- [pytm](https://github.com/izar/pytm) - A Pythonic framework for threat modeling\n- [threagile](https://github.com/Threagile/threagile) - Agile Threat Modeling Toolkit\n- [cdk-threagile](https://github.com/hupe1980/cdk-threagile) - Agile Threat Modeling as Code\n- [OpenThreatModel](https://github.com/iriusrisk/OpenThreatModel) - OpenThreatModel\n\n## License\n\n[MIT](LICENSE)',
    'author': 'hupe1980',
    'author_email': 'None',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/hupe1980/tmac',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.11,<4.0',
}


setup(**setup_kwargs)
