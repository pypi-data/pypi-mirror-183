window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "hcitools", "modulename": "hcitools", "type": "module", "doc": "<h1 id=\"hcitools\"><code>hcitools</code></h1>\n\n<p>The <code>hcitools</code> package provides tools for analyzing and visualizing data \ngenerated in high-content imaging experiments. </p>\n\n<h1 id=\"installation\">Installation</h1>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># Clone repository</span>\ngit clone -b prod git@mygithub.gsk.com:to561778/hci-tools.git\n\n<span class=\"c1\"># Install package</span>\npython -m pip install -e hci-tools\n</code></pre></div>\n\n<h1 id=\"usage\">Usage</h1>\n\n<p>Package documentation is available <a href=\"https://mygithub.gsk.com/pages/to561778/hci-tools/hcitools.html\">here</a>.\nSee <a href=\"docs/examples/\">docs/examples</a> for detailed guides for generating figures \nand performing various analysis steps.</p>\n\n<h1 id=\"developer-instructions\">Developer Instructions</h1>\n\n<p>Use the script below to set up a development environment for this package.</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># Clone the repository</span>\ngit clone -b dev git@mygithub.gsk.com:to561778/hci-tools.git\n<span class=\"nb\">cd</span> hci-tools\n\n<span class=\"c1\"># Create conda environment</span>\nconda env create -f environment.yml\nconda activate hcitools\n\n<span class=\"c1\"># Install the package</span>\npython -m pip install -e .\n</code></pre></div>\n\n<blockquote>\n  <h3 id=\"deploying-changes\">Deploying Changes</h3>\n  \n  <p>Once changes have been made, use the <code>scripts/deploy.sh</code> script to rebuild the \n  package wheel and update the documentation. This will also reinstall the \n  package in the active environment.  </p>\n  \n  <p><strong>Note:</strong> Only run <code>deploy.sh</code> from the top-level hci-tools directory.</p>\n</blockquote>\n\n<h1 id=\"examples\">Examples</h1>\n\n<h2 id=\"heatmaps\">Heatmaps</h2>\n\n<p>This example will show you how to generate various heatmaps and how to annotate \nthem using the plotly library.</p>\n\n<h3 id=\"datasets\">Datasets</h3>\n\n<p>This example makes use of two of the built-in datasets listed below</p>\n\n<ul>\n<li><code>covid</code> - Protein expression data from a cohort of COVID-19 patients</li>\n<li><code>ros-mito</code> - High content imaging features from an experiment.</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># Import</span>\n<span class=\"kn\">from</span> <span class=\"nn\">hcitools</span> <span class=\"kn\">import</span> <span class=\"n\">datasets</span><span class=\"p\">,</span> <span class=\"n\">plot</span>\n\n<span class=\"c1\"># Load datasets</span>\n<span class=\"n\">covid</span> <span class=\"o\">=</span> <span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">load_dataset</span><span class=\"p\">(</span><span class=\"s1\">&#39;covid&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ros</span> <span class=\"o\">=</span> <span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">load_dataset</span><span class=\"p\">(</span><span class=\"s1\">&#39;ros-mito&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Plotly renderer</span>\n<span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">set_renderer</span><span class=\"p\">(</span><span class=\"s1\">&#39;notebook&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># Use this when running notebook</span>\n<span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">set_renderer</span><span class=\"p\">(</span><span class=\"s1\">&#39;iframe_connected&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># Use this when rendering docs</span>\n</code></pre></div>\n\n<h3 id=\"protein-expression-heatmaps\">Protein Expression Heatmaps</h3>\n\n<p>Here, we'll create a heatmap to look at the expression of proteins in the \npatients' blood. We'll include colorbars for patient sex and mortality. \nWe'll also look at how you could add annotations to highlight certain regions \nof the heatmap.</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># Prepare data frame</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">covid</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n    <span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">regex</span><span class=\"o\">=</span><span class=\"s1\">&#39;^B-&#39;</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>  <span class=\"c1\"># Keep only blood markers</span>\n<span class=\"n\">metadata</span> <span class=\"o\">=</span>  <span class=\"n\">covid</span><span class=\"p\">[[</span><span class=\"s1\">&#39;Mortality&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Sex&#39;</span><span class=\"p\">]]</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:]</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Define groups for heatmap</span>\n<span class=\"n\">row_groups</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">(</span><span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n<span class=\"n\">row_group_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Mortality&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Sex&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">row_colors</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;Alive&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;#38d652&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Dead&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;#d93e38&#39;</span><span class=\"p\">,</span>\n              <span class=\"s1\">&#39;Male&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;blue&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Female&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;pink&#39;</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># Create heatmap</span>\n<span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">heatmap</span><span class=\"p\">(</span>\n    <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span>\n    <span class=\"n\">clust_rows</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">clust_cols</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">row_colors</span><span class=\"o\">=</span><span class=\"n\">row_colors</span><span class=\"p\">,</span>\n    <span class=\"n\">row_groups</span><span class=\"o\">=</span><span class=\"n\">row_groups</span><span class=\"p\">,</span>\n    <span class=\"n\">row_group_names</span><span class=\"o\">=</span><span class=\"n\">row_group_names</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Add a title and tweak the size</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">update_layout</span><span class=\"p\">(</span>\n    <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;Blood Biomarkers&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">title_x</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span>\n    <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">400</span><span class=\"p\">,</span>\n    <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">700</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Annotate highly expressed proteins</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">add_shape</span><span class=\"p\">(</span>\n    <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">&#39;rect&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">x0</span><span class=\"o\">=</span><span class=\"s1\">&#39;MCP-1&#39;</span><span class=\"p\">,</span> <span class=\"n\">x1</span><span class=\"o\">=</span><span class=\"s1\">&#39;EGF&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">y0</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">y1</span><span class=\"o\">=</span><span class=\"mi\">88</span><span class=\"p\">,</span>\n    <span class=\"n\">row</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;black&#39;</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<iframe\n    scrolling=\"no\"\n    width=\"720px\"\n    height=\"420\"\n    src=\"assets/heatmaps_figure_2.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n\n<h3 id=\"correlation-maps\">Correlation Maps</h3>\n\n<p>Here, we'll generate a heatmap to visualize the correlation of blood proteins \nwith markers of clinical severity.</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># Prepare data frame</span>\n<span class=\"nb\">vars</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;APACHE1h&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;APACHE24h&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;CCI&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">covid</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n    <span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"nb\">vars</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">regex</span><span class=\"o\">=</span><span class=\"s1\">&#39;^B-&#39;</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">reset_index</span><span class=\"p\">()</span>\n    <span class=\"o\">.</span><span class=\"n\">corr</span><span class=\"p\">()</span>\n    <span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"nb\">vars</span><span class=\"p\">,</span> <span class=\"p\">:]</span>\n    <span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"nb\">vars</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:]</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Create heatmap</span>\n<span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">heatmap</span><span class=\"p\">(</span>\n    <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span>\n    <span class=\"n\">clust_cols</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">clust_rows</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">update_layout</span><span class=\"p\">(</span>\n    <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;Correlation with Clinical Severity&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">title_x</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span>\n    <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">400</span><span class=\"p\">,</span>\n    <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">700</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Show ticks on the y axis (these are hidden by default)</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">update_yaxes</span><span class=\"p\">(</span>\n    <span class=\"n\">showticklabels</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n    <span class=\"n\">tickfont_size</span><span class=\"o\">=</span><span class=\"mi\">14</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<iframe\n    scrolling=\"no\"\n    width=\"720px\"\n    height=\"420\"\n    src=\"assets/heatmaps_figure_3.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n\n<h3 id=\"plate-map\">Plate Map</h3>\n\n<p>Next, we'll show how you can generate an interactive heatmap to view expression \nacross a 96 (or 384) well plate using high-content imaging data.</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">plate_heatmap</span><span class=\"p\">(</span>\n    <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">ros</span><span class=\"p\">,</span>\n    <span class=\"n\">feature</span><span class=\"o\">=</span><span class=\"s2\">&quot;Non-border cells - Number of Objects&quot;</span>\n<span class=\"p\">)</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">update_layout</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">900</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">)</span>\n\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<iframe\n    scrolling=\"no\"\n    width=\"920px\"\n    height=\"520\"\n    src=\"assets/heatmaps_figure_4.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n\n<h2 id=\"clustering\">Clustering</h2>\n\n<p>This example will show you how to perform dimensionality reduction and visualize \nany resulting clusters. We will also show how certain preprocessing steps can \nbe done using <code>preprocess.clean_data</code>.</p>\n\n<h3 id=\"datasets-2\">Datasets</h3>\n\n<p>This example makes use of the <code>ros-mito</code> data set which contains features \nextracted from high-content images.</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># Imports</span>\n<span class=\"kn\">from</span> <span class=\"nn\">hcitools</span> <span class=\"kn\">import</span> <span class=\"n\">datasets</span><span class=\"p\">,</span> <span class=\"n\">plot</span><span class=\"p\">,</span> <span class=\"n\">analysis</span><span class=\"p\">,</span> <span class=\"n\">preprocess</span>\n\n<span class=\"c1\"># Load dataset</span>\n<span class=\"n\">ros</span> <span class=\"o\">=</span> <span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">load_dataset</span><span class=\"p\">(</span><span class=\"s1\">&#39;ros-mito&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Plotly renderer</span>\n<span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">set_renderer</span><span class=\"p\">(</span><span class=\"s1\">&#39;notebook&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># Use this when running notebook</span>\n<span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">set_renderer</span><span class=\"p\">(</span><span class=\"s1\">&#39;iframe_connected&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># Use this when rendering docs</span>\n</code></pre></div>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># Preprocessing</span>\n<span class=\"n\">meta</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Well&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Row&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Column&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Timepoint&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Compound&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Conc&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">dropped</span><span class=\"p\">,</span> <span class=\"n\">LOG</span> <span class=\"o\">=</span> <span class=\"n\">preprocess</span><span class=\"o\">.</span><span class=\"n\">clean_data</span><span class=\"p\">(</span>\n    <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">ros</span><span class=\"p\">,</span>\n    <span class=\"n\">metacols</span><span class=\"o\">=</span><span class=\"n\">meta</span><span class=\"p\">,</span>\n    <span class=\"n\">dropna</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">drop_low_var</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span>\n    <span class=\"n\">corr_thresh</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">,</span>\n    <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"p\">)</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"n\">meta</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Generate clusters with default arguments</span>\n<span class=\"n\">proj</span><span class=\"p\">,</span> <span class=\"n\">expvar</span> <span class=\"o\">=</span> <span class=\"n\">analysis</span><span class=\"o\">.</span><span class=\"n\">dim_reduction</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;pca&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;tsne&#39;</span><span class=\"p\">])</span>\n</code></pre></div>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># Plot PCA components</span>\n<span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">pca_comps</span><span class=\"p\">(</span><span class=\"n\">proj</span><span class=\"p\">,</span> <span class=\"n\">expvar</span><span class=\"p\">,</span> <span class=\"n\">n_comps</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">update_layout</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">700</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">400</span><span class=\"p\">)</span>\n\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<iframe\n    scrolling=\"no\"\n    width=\"720px\"\n    height=\"420\"\n    src=\"assets/clustering_figure_3.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"c1\"># Compare 2 compounds</span>\n<span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">clusters</span><span class=\"p\">(</span><span class=\"n\">proj</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Sorafenib Tosylate&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Imatinib mesylate&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;tsne&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">update_layout</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">750</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">450</span><span class=\"p\">)</span>\n\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre></div>\n\n<iframe\n    scrolling=\"no\"\n    width=\"770px\"\n    height=\"470\"\n    src=\"assets/clustering_figure_4.html\"\n    frameborder=\"0\"\n    allowfullscreen\n></iframe>\n"}, {"fullname": "hcitools.datasets", "modulename": "hcitools", "qualname": "datasets", "type": "class", "doc": "<p>Class for loading built-in datasets</p>\n"}, {"fullname": "hcitools.datasets.__init__", "modulename": "hcitools", "qualname": "datasets.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "hcitools.datasets.list_datasets", "modulename": "hcitools", "qualname": "datasets.list_datasets", "type": "function", "doc": "<p>List available built-in datasets</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hcitools.datasets.load_dataset", "modulename": "hcitools", "qualname": "datasets.load_dataset", "type": "function", "doc": "<p>Load a built-in dataset</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>dataset</code></strong> (str):\nOne of 'covid', 'caer' or 'ros-mito'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pd.DataFrame</strong>: Desired dataset</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hcitools.analysis", "modulename": "hcitools.analysis", "type": "module", "doc": "<p>This module contains functions and classes for performing statistical analysis \nand machine learning</p>\n"}, {"fullname": "hcitools.analysis.dim_reduction", "modulename": "hcitools.analysis", "qualname": "dim_reduction", "type": "function", "doc": "<p>Perform dimensionality reduction on data </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>data</code></strong> (pd.DataFrame):\nData frame of features. Should only contain numeric columns.\nMetadata can be stored in the index</li>\n<li><strong><code>method</code></strong> (str or list, optional):\nMethod(s) to use for dimensionality reduction, \nby default ['pca', 'tsne', 'umap']</li>\n<li><strong><code>{pca, tsne, umap}_kws</code></strong> (dict, optional):\nArguments for the estimators, by default None</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pd.DataFrame</strong>: Data frame of low-dimensional projections</li>\n<li><strong>np.array</strong>: Only if 'pca' in method, list of explained variances</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;pca&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;tsne&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;umap&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">pca_kws</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tsne_kws</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">umap_kws</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hcitools.plot", "modulename": "hcitools.plot", "type": "module", "doc": "<p>This module contains functions for visualizing data and analysis results.</p>\n"}, {"fullname": "hcitools.plot.set_renderer", "modulename": "hcitools.plot", "qualname": "set_renderer", "type": "function", "doc": "<p>Set the plotly default renderer</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">renderer</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hcitools.plot.colormap", "modulename": "hcitools.plot", "qualname": "colormap", "type": "class", "doc": "<p>Custom colormaps for plotly figures</p>\n\n<p>These colormaps assume the data has been scaled to between 0 and 1.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong><code>OgBu</code></strong> (list):\nSeaborn diverging colorscale from blue (low) to orange (high)</li>\n</ul>\n"}, {"fullname": "hcitools.plot.colormap.__init__", "modulename": "hcitools.plot", "qualname": "colormap.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "hcitools.plot.colormap.OgBu", "modulename": "hcitools.plot", "qualname": "colormap.OgBu", "type": "variable", "doc": "<p></p>\n", "default_value": " = [[0.0, &#x27;#3F7F93&#x27;], [0.1, &#x27;#6296A6&#x27;], [0.2, &#x27;#85ADB9&#x27;], [0.3, &#x27;#A9C4CC&#x27;], [0.4, &#x27;#CDDBE0&#x27;], [0.5, &#x27;#F2F1F1&#x27;], [0.6, &#x27;#E9D2CD&#x27;], [0.7, &#x27;#DFB3A7&#x27;], [0.8, &#x27;#D69483&#x27;], [0.9, &#x27;#CC745D&#x27;], [1.0, &#x27;#C3553A&#x27;]]"}, {"fullname": "hcitools.plot.LabelEncoder", "modulename": "hcitools.plot", "qualname": "LabelEncoder", "type": "class", "doc": "<p>Encode target labels with values between 0 and n_classes-1</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong><code>encoder</code></strong> (dict):\ndictionary mapping target labels to encodings</li>\n<li><strong><code>decoder</code></strong> (dict):\ndictionary mapping encodings to target labels</li>\n<li><strong><code>dtype</code></strong> (np.dtype):\ndtype of original labels</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p><code>encode(labels)</code>\n    Encode a list of target labels\n<code>decode(enc_labels)</code>\n    Decode a list of encoded labels</p>\n"}, {"fullname": "hcitools.plot.LabelEncoder.__init__", "modulename": "hcitools.plot", "qualname": "LabelEncoder.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "hcitools.plot.LabelEncoder.encode", "modulename": "hcitools.plot", "qualname": "LabelEncoder.encode", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>labels</code></strong> (array_like):\nlist of target labels</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.array</strong>: Encoded labels</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>AssertionError</strong>: If <code>enc_labels</code> is not 1-dimensional</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">labels</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hcitools.plot.LabelEncoder.decode", "modulename": "hcitools.plot", "qualname": "LabelEncoder.decode", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>enc_labels</code></strong> (array_like):\nlist of encoded lavels</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.array</strong>: Decoded labels</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>AssertionError</strong>: If <code>enc_labels</code> is not 1-dimensional</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enc_labels</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hcitools.plot.plate_heatmap", "modulename": "hcitools.plot", "qualname": "plate_heatmap", "type": "function", "doc": "<p>Create an interactive plate heatmap; Including an animation for timelapses</p>\n\n<p>This function assumes that <code>data</code> contains the following columns: <code>row</code>, \n<code>column</code>, <code>time_col</code>, <code>compound</code>, <code>conc</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>data</code></strong> (pd.DataFrame):\na data frame of features including certain metadata columns</li>\n<li><strong><code>feature</code></strong> (str):\nfeature to populate plate with</li>\n<li><strong><code>time_col</code></strong> (str, optional):\ncolumn that defines time points, by default 'timepoint'\nThis assumes the first time point is 1.</li>\n<li><strong><code>colorscale</code></strong> (list, optional):\nPlotly-compatible colormap, by default <code>colormap.OgBu</code>\nSee <code>colormap.OgBu</code> for examples.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>go.Figure</strong>: Plotly figure</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">feature</span>,</span><span class=\"param\">\t<span class=\"n\">time_col</span><span class=\"o\">=</span><span class=\"s1\">&#39;timepoint&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">colorscale</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;#3F7F93&#39;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;#6296A6&#39;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;#85ADB9&#39;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;#A9C4CC&#39;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;#CDDBE0&#39;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"s1\">&#39;#F2F1F1&#39;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.6</span><span class=\"p\">,</span> <span class=\"s1\">&#39;#E9D2CD&#39;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"s1\">&#39;#DFB3A7&#39;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"s1\">&#39;#D69483&#39;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"s1\">&#39;#CC745D&#39;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;#C3553A&#39;</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hcitools.plot.pca_comps", "modulename": "hcitools.plot", "qualname": "pca_comps", "type": "function", "doc": "<p>Plot a scatter grid of PCA components</p>\n\n<p>This function is written to use the output from <code>process.dim_reduction</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>proj</code></strong> (_pd.DataFrame):\nData frame with pca projections, from <code>process.dim_reduction</code></li>\n<li><strong><code>exp_var</code></strong> (array_like):\nList of explained variances for each PCA component</li>\n<li><strong><code>time_col</code></strong> (str, optional):\nColumn containing time points; must be in index; by default 'timepoint'</li>\n<li><strong><code>n_comps</code></strong> (int, optional):\nNumber of pca components to plot, by default 4</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>go.Figure</strong>: Plotly figure</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">proj</span>, </span><span class=\"param\"><span class=\"n\">exp_var</span>, </span><span class=\"param\"><span class=\"n\">time_col</span><span class=\"o\">=</span><span class=\"s1\">&#39;timepoint&#39;</span>, </span><span class=\"param\"><span class=\"n\">n_comps</span><span class=\"o\">=</span><span class=\"mi\">4</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hcitools.plot.clusters", "modulename": "hcitools.plot", "qualname": "clusters", "type": "function", "doc": "<p>Create clustering figures that compare 2 compounds.</p>\n\n<p>This function is written to use the output from <code>process.dim_reduction</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>data</code></strong> (pd.DataFrame):\n_description_</li>\n<li><strong><code>compound_a</code></strong> (str):\nCompound A (red points)</li>\n<li><strong><code>compound_b</code></strong> (str):\nCompound B (green points)</li>\n<li><strong><code>method</code></strong> (str):\nOne of 'PCA', 'tSNE' or 'UMAP'</li>\n<li><strong><code>time_col</code></strong> (str, optional):\nColumn containing time points, by default 'timepoint'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>go.Figure</strong>: Plotly figure</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">compound_a</span>, </span><span class=\"param\"><span class=\"n\">compound_b</span>, </span><span class=\"param\"><span class=\"n\">method</span>, </span><span class=\"param\"><span class=\"n\">time_col</span><span class=\"o\">=</span><span class=\"s1\">&#39;timepoint&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hcitools.plot.distplot", "modulename": "hcitools.plot", "qualname": "distplot", "type": "function", "doc": "<p>Create boxplots showing the distibution of features for different groups.</p>\n\n<p>This generates a figure with as many subplots as there are features</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>data</code></strong> (pd.DataFrame):\nData frame to plot</li>\n<li><strong><code>features</code></strong> (list):\nList of features to visualize</li>\n<li><strong><code>group_col</code></strong> (str):\n<code>data</code> column that contains groups of interest</li>\n<li><strong><code>tooltips</code></strong> (dict, optional):\nDictionary that defines annotation tooltips, by default None\nKeys = Tooltip Name; <br />\nValues = Corresponding column in <code>data</code></li>\n<li><strong><code>kind</code></strong> (str, optional):\nType of plot to generate; one of 'box', 'bar', by default 'box'</li>\n<li><strong><code>col_wrap</code></strong> (int, optional):\nNumber of columns allowed in layout, by default 3</li>\n<li><strong><code>title_len</code></strong> (int, optional):\nWrap length for subplot titles, by default 30</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>go.Figure</strong>: Plotly figure</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>NotImplementedError</strong>: When <code>kind != 'box'</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">features</span>,</span><span class=\"param\">\t<span class=\"n\">group_col</span>,</span><span class=\"param\">\t<span class=\"n\">tooltips</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">&#39;box&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">col_wrap</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">title_len</span><span class=\"o\">=</span><span class=\"mi\">30</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hcitools.plot.textplot", "modulename": "hcitools.plot", "qualname": "textplot", "type": "function", "doc": "<p>Create a blank figure to display some text. Serves as placeholder for \nactual figure.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>text</code></strong> (str):\nMessage to display in figure</li>\n</ul>\n\n<h6 id=\"return\">Return</h6>\n\n<p>go.Figure\n    Plotly figure</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hcitools.plot.gifify", "modulename": "hcitools.plot", "qualname": "gifify", "type": "function", "doc": "<p>Export a plotly animation as a gif</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>fig</code></strong> (go.Figure):\nPlotly figure</li>\n<li><strong><code>file</code></strong> (str):\nPath to file where figure gif will be stored</li>\n<li><strong><code>frame_title</code></strong> (str, optional):\nTitle that describes each frame, by default 'Frame'</li>\n<li><strong><code>fps</code></strong> (int, optional):\nFrame rate, by default 30</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fig</span>, </span><span class=\"param\"><span class=\"n\">file</span>, </span><span class=\"param\"><span class=\"n\">frame_title</span><span class=\"o\">=</span><span class=\"s1\">&#39;Frame&#39;</span>, </span><span class=\"param\"><span class=\"n\">fps</span><span class=\"o\">=</span><span class=\"mi\">30</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hcitools.plot.heatmap", "modulename": "hcitools.plot", "qualname": "heatmap", "type": "function", "doc": "<p>Construct an interactive heatmap</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (pd.DataFrame):\nData to plota</li>\n<li><strong>{row, col}_groups</strong> (dict):\nDictionary assigning groups to rows or columns.\nKeys should be the index or columns of data.\nValues should be a list of groups.</li>\n<li><strong>{row, col}_group_names</strong> (list):\nNames for each of the row/col groups\nShould be the same length as the lists in {row, col}_groups</li>\n<li><strong>{row, col}_colors</strong> (dict):\nDictionary defining colors for each group.\nKeys = groups;  Values = colors;</li>\n<li><strong>clust_{rows, cols}</strong> (bool):\nShould row and/or column clustering be performed</li>\n<li><strong>cluster_kws</strong> (dict):\nkwargs for sns.clustermap</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">col_groups</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">col_colors</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">col_group_names</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">row_groups</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">row_colors</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">row_group_names</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">clust_cols</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">clust_rows</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_kws</span><span class=\"o\">=</span><span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hcitools.preprocess", "modulename": "hcitools.preprocess", "type": "module", "doc": "<p>This module contains functions for data preprocessing</p>\n"}, {"fullname": "hcitools.preprocess.drop_high_corr", "modulename": "hcitools.preprocess", "qualname": "drop_high_corr", "type": "function", "doc": "<p>Remove features with correaltions above a threshold from a data frame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>data</code></strong> (pd.DataFrame):\nOriginal data frame</li>\n<li><strong><code>thresh</code></strong> (float, optional):\nCorrelation threshold, by default 0.95</li>\n<li><strong><code>method</code></strong> (str, optional):\nEither 'pearson' or 'spearman', by default 'pearson'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pd.DataFrame</strong>: Data frame without highly correlated features</li>\n<li><strong>dict</strong>: Keys = features still in data frame\nValues = list of highly correlated features</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">thresh</span><span class=\"o\">=</span><span class=\"mf\">0.95</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;pearson&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hcitools.preprocess.drop_low_variance", "modulename": "hcitools.preprocess", "qualname": "drop_low_variance", "type": "function", "doc": "<p>Remove low-variance features from a data frame</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>data</code></strong> (pd.DataFrame):\nOriginal data frame</li>\n<li><strong><code>thresh</code></strong> (float, optional):\nVariance threshold, by default 0.0</li>\n<li><strong><code>na_replacement</code></strong> (int, optional):\nReplacement value for NAs, by default -999</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pd.DataFrame</strong>: Data frame without low-variance features</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">thresh</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>, </span><span class=\"param\"><span class=\"n\">na_replacement</span><span class=\"o\">=-</span><span class=\"mi\">999</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hcitools.preprocess.clean_data", "modulename": "hcitools.preprocess", "qualname": "clean_data", "type": "function", "doc": "<p>Perform preprocessing steps on a high-content imaging data</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>data</code></strong> (pd.DataFrame):\nOriginal data frame</li>\n<li><strong><code>metacols</code></strong> (list):\nList of non-numeric columns in data frame</li>\n<li><strong><code>dropna</code></strong> (bool, optional):\nDrop NA-only columns and any rows with NAs, by default False</li>\n<li><strong><code>drop_low_var</code></strong> (float, optional):\nThreshold for dropping low variance features, by default None</li>\n<li><strong><code>corr_thresh</code></strong> (float, optional):\nThreshold for dropping highly correlated features, by default None</li>\n<li><strong><code>corr_method</code></strong> (str, optional):\nCorrelation method, by default 'spearman'</li>\n<li><strong><code>intens_norm</code></strong> (bool, optional):\nShould intensity-based features be normalized, by default False</li>\n<li><strong><code>intens_rgx</code></strong> (str, optional):\nRegular expression for identifying intensity based features, \nby default <code>r'Intensity'</code></li>\n<li><strong><code>num_objs</code></strong> (str, optional):\nFeature definining object counts, by default 'number of objects'</li>\n<li><strong><code>verbose</code></strong> (bool, optional):\nShould a log of processing steps be returned, by default False</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pd.DataFrame</strong>: Preprocessed data</li>\n<li><strong>list</strong>: Only if <code>verbose == True</code>, preprocessing log</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">metacols</span>,</span><span class=\"param\">\t<span class=\"n\">dropna</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">drop_low_var</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">corr_thresh</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">corr_method</span><span class=\"o\">=</span><span class=\"s1\">&#39;pearson&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">intens_norm</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">intens_rgx</span><span class=\"o\">=</span><span class=\"s1\">&#39;Intensity&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">num_objs</span><span class=\"o\">=</span><span class=\"s1\">&#39;number of objects&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "hcitools.preprocess.normalize", "modulename": "hcitools.preprocess", "qualname": "normalize", "type": "function", "doc": "<p>Normalize a data frame</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong> (pd.DataFrame):\nOriginal data frame</li>\n<li><strong>method</strong> (str, optional):\nEither 'minmax' or 'z', by default 'minmax'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pd.DataFrame</strong>: Normalized data frame</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>NotImplementedError</strong>: If method isn't 'minmax' or 'z'</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;minmax&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();