#!/usr/bin/python3
# SPDX-FileCopyrightText: Â© 2014 Josef Hahn
# SPDX-License-Identifier: AGPL-3.0-only

import os
import sys
sys.path.append(os.path.abspath(__file__+"/../../.."))
from parzzleytest.test import *


class Test(unittest.TestCase):

    def test_main(self):

        setconfig("""<?xml version="1.0" ?>
<parzzleyconfig>
    <sync name="test" interval="0s">
        <fs type="LocalFilesystem" path="${MYDIR}m" name="master">
            <aspect type="TrashRemove" trashdelay="20s"/>
        </fs>
        <fs type="LocalFilesystem" path="${MYDIR}s" name="slave">
            <aspect type="TrashRemove" trashdelay="20s"/>
        </fs>
        <aspect type="DefaultSync"/>
        <aspect type="Logging" logupdate="1" logcreate="1" logremove="1" />
    </sync>
</parzzleyconfig>
        """)

        write2file("m/d1/d2/f1", "f1")
        write2file("m/d1/d2/f2", "f2")
        write2file("m/d1/f3", "f3a")
        write2file("m/d1/d2/d3/f4", "f4")
        write2file("m/D1/f5", "a")
        write2file("m/d5/d6/f11", "x")
        write2file("m/d5/d7", "x")
        write2file("s/d5/d7/f11", "x")
        write2file("s/d5/d6", "x")
        write2file("s/d1/d2/f6", "f6")
        write2file("m/d8/f20", "x")
        write2file("m/d8/f21", "x")
        write2file("s/d2/f7", "f7")
        time.sleep(2)
        write2file("s/d1/f3", "f3b")
        write2file("s/d1/d2/d4/f8", "f8")
        write2file("s/D1/f5", "b")
        write2file("m/trashcolltest/f2", "f2b")
        SYNC()
        self.assertTrue(isdir("m/d1"))
        self.assertTrue(isdir("m/d1"))
        self.assertTrue(isdir("m/d1/d2"))
        self.assertTrue(isdir("m/d1/d2/d3"))
        self.assertTrue(isdir("m/d2"))
        self.assertTrue(isdir("m/d1/d2/d4"))
        self.assertTrue(isdir("s/d1"))
        self.assertTrue(isdir("s/d1/d2"))
        self.assertTrue(isdir("s/d1/d2/d3"))
        self.assertTrue(isdir("s/d2"))
        self.assertTrue(isdir("s/d1/d2/d4"))
        self.assertTrue(isdir("m/d5/d6"))
        self.assertTrue(isdir("s/d5/d7"))
        self.assertTrue(readfile("m/d1/d2/f1") == "f1")
        self.assertTrue(readfile("m/d1/d2/f2") == "f2")
        self.assertTrue(readfile("m/d1/d2/d3/f4") == "f4")
        self.assertTrue(readfile("m/d1/d2/f6") == "f6")
        self.assertTrue(readfile("m/d2/f7") == "f7")
        self.assertTrue(readfile("m/d1/d2/d4/f8") == "f8")
        self.assertTrue(readfile("s/d1/d2/f1") == "f1")
        self.assertTrue(readfile("s/d1/d2/f2") == "f2")
        self.assertTrue(readfile("s/d1/d2/d3/f4") == "f4")
        self.assertTrue(readfile("s/d1/d2/f6") == "f6")
        self.assertTrue(readfile("s/d2/f7") == "f7")
        self.assertTrue(readfile("s/d1/d2/d4/f8") == "f8")
        self.assertTrue(readfile("m/D1/f5") == "a")
        self.assertTrue(readfile("s/D1/f5") == "b")
        self.assertTrue(readfile("m/d1/f3") == "f3a")
        self.assertTrue(readfile("s/d1/f3") == "f3b")
        self.assertTrue(readfile("m/d5/d7") == "x")
        self.assertTrue(readfile("s/d5/d6") == "x")
        self.assertTrue(haslogentry("d5/d7", verb="conflict"))
        self.assertTrue(haslogentry("d5/d6", verb="conflict"))
        self.assertTrue(haslogentry("d1/f3", verb="conflict"))
        self.assertTrue(haslogentry("D1/f5", verb="conflict"))
        write2file("m/d1/d2/f9", "f9")
        write2file("s/d1/d2/fA", "fA")
        write2file("m/d1/d2/d6/f11", "f11")
        write2file("s/d1/d2/d6/f12", "f12")
        deletefile("m/d1/d2/f1")
        deletefile("s/d1/d2/f2")
        deletefile("s/trashcolltest/f2")
        write2file("s/d2/f7", "f7neu")
        time.sleep(2)
        deletefile("m/d2/f7")
        write2file("m/d8/f20", "y")
        write2file("s/d8/f21", "z")
        SYNC()
        self.assertTrue(readfile("s/d8/f20") == "y")
        self.assertTrue(readfile("m/d8/f20") == "y")
        self.assertTrue(readfile("s/d8/f21") == "z")
        self.assertTrue(readfile("m/d8/f21") == "z")
        self.assertTrue(readfile("m/d2/f7") == "f7neu")
        self.assertTrue(readfile("s/d2/f7") == "f7neu")
        self.assertTrue(haslogentry("d1/d2/f1", verb="trash"))
        self.assertTrue(haslogentry("d1/d2/f2", verb="trash"))
        self.assertTrue(haslogentry("trashcolltest/f2", verb="trash"))
        self.assertTrue(trashed("s/d1/d2/f1") == "f1")
        self.assertTrue(trashed("m/d1/d2/f2") == "f2")
        self.assertTrue(trashed("m/trashcolltest/f2") == "f2b")
        self.assertTrue(not fileexists("s/d1/d2/f1"))
        self.assertTrue(not fileexists("m/d1/d2/f2"))
        self.assertTrue(not fileexists("m/trashcolltest/f2"))
        self.assertTrue(readfile("s/d2/f7") == "f7neu")
        self.assertTrue(readfile("m/d1/d2/f9") == "f9")
        self.assertTrue(readfile("s/d1/d2/fA") == "fA")
        self.assertTrue(readfile("m/d1/d2/d6/f11") == "f11")
        self.assertTrue(readfile("s/d1/d2/d6/f12") == "f12")
        self.assertTrue(readfile("s/d1/d2/f9") == "f9")
        self.assertTrue(readfile("m/d1/d2/fA") == "fA")
        self.assertTrue(readfile("s/d1/d2/d6/f11") == "f11")
        self.assertTrue(readfile("m/d1/d2/d6/f12") == "f12")
        self.assertTrue(readfile("m/d1/d2/d3/f4") == "f4")
        self.assertTrue(readfile("m/d1/d2/f6") == "f6")
        self.assertTrue(readfile("m/d1/d2/d4/f8") == "f8")
        self.assertTrue(readfile("s/d1/d2/d3/f4") == "f4")
        self.assertTrue(readfile("s/d1/d2/f6") == "f6")
        self.assertTrue(readfile("s/d1/d2/d4/f8") == "f8")
        self.assertTrue(readfile("m/D1/f5") == "a")
        self.assertTrue(readfile("s/D1/f5") == "b")
        self.assertTrue(readfile("m/d1/f3") == "f3a")
        self.assertTrue(readfile("s/d1/f3") == "f3b")
        self.assertTrue(readfile("m/d5/d7") == "x")
        self.assertTrue(readfile("s/d5/d6") == "x")
        self.assertTrue(haslogentry("d5/d7", verb="conflict"))
        self.assertTrue(haslogentry("d5/d6", verb="conflict"))
        self.assertTrue(haslogentry("d1/f3", verb="conflict"))
        time.sleep(10)
        SYNC()
        self.assertTrue(trashed("s/d1/d2/f1") == "f1")
        self.assertTrue(trashed("m/d1/d2/f2") == "f2")
        self.assertTrue(trashed("m/trashcolltest/f2") == "f2b")
        time.sleep(10)
        SYNC()
        self.assertTrue((not fileexistspattern("s/d1/d2/f1")) and (trashed("s/d1/d2/f1") is None))
        self.assertTrue((not fileexistspattern("m/d1/d2/f2")) and (trashed("m/d1/d2/f2") is None))
        self.assertTrue((not fileexistspattern("m/trashcolltest/f2")) and (trashed("m/trashcolltest/f2") is None))
        self.assertTrue(haslogentry("d5/d7", verb="conflict"))
        self.assertTrue(haslogentry("d5/d6", verb="conflict"))
        self.assertTrue(haslogentry("d1/f3", verb="conflict"))
        self.assertTrue(haslogentry("D1/f5", verb="conflict"))
        self.assertTrue(readfile("m/D1/f5") == "a")
        self.assertTrue(readfile("s/D1/f5") == "b")
        self.assertTrue(readfile("m/d1/f3") == "f3a")
        self.assertTrue(readfile("s/d1/f3") == "f3b")
        self.assertTrue(readfile("m/d5/d7") == "x")
        self.assertTrue(readfile("s/d5/d6") == "x")


if __name__ == '__main__':
    unittest.main()
