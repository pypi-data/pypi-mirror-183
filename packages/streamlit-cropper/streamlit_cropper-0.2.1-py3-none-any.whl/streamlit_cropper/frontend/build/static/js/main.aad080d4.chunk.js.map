{"version":3,"sources":["streamlit/streamlit.ts","streamlit/ArrowTable.ts","streamlit/StreamlitReact.tsx","StreamlitCropper.tsx","index.tsx"],"names":["ComponentMessageType","ArrowTable","dataBuffer","indexBuffer","columnsBuffer","styler","dataTable","indexTable","columnsTable","getCell","rowIndex","columnIndex","isBlankCell","headerRows","headerColumns","isIndexCell","isColumnsCell","classNames","push","type","join","content","dataColumnIndex","getContent","dataRowIndex","id","uuid","displayValuesTable","table","column","getColumnAt","getColumnTypeId","Type","Timestamp","nanosToDate","get","this","Table","from","caption","styles","undefined","length","numCols","rows","dataRows","columns","dataColumns","schema","fields","typeId","nanos","Date","Streamlit","API_VERSION","RENDER_EVENT","events","EventTarget","registeredMessageListener","lastFrameHeight","setComponentReady","window","addEventListener","onMessageEvent","sendBackMsg","COMPONENT_READY","apiVersion","setFrameHeight","height","document","body","scrollHeight","SET_FRAME_HEIGHT","setComponentValue","value","SET_COMPONENT_VALUE","event","data","onRenderMessage","args","console","error","dataframeArgs","argsDataframeToObject","eventData","disabled","Boolean","CustomEvent","detail","dispatchEvent","argsDataframe","argsDataframeArrow","map","key","toArrowTable","Object","fromEntries","df","index","parent","postMessage","isStreamlitMessage","React","PureComponent","withStreamlitConnection","WrappedComponent","ComponentWrapper","props","componentDidMount","onRenderEvent","componentDidUpdate","state","componentError","componentWillUnmount","removeEventListener","renderEvent","setState","renderData","render","message","width","innerWidth","getDerivedStateFromError","hoistNonReactStatics","useState","fabric","Canvas","canvas","setCanvas","canvasWidth","canvasHeight","imageData","invisCanvas","createElement","ctx","getContext","idata","createImageData","set","putImageData","dataUri","toDataURL","useEffect","rectTop","rectLeft","rectWidth","rectHeight","boxColor","lockAspect","enableRetinaScaling","backgroundImage","uniScaleTransform","rect","Rect","left","top","fill","objectCaching","stroke","strokeWidth","hasRotatingPoint","add","realtimeUpdate","handleEvent","renderAll","coords","getObjects","getBoundingRect","on","off","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.aad080d4.chunk.js","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018-2020 Streamlit Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// Safari doesn't support the EventTarget class, so we use a shim.\r\nimport { EventTarget } from \"event-target-shim\"\r\nimport { ArrowDataframeProto, ArrowTable } from \"./ArrowTable\"\r\n\r\n/** Data sent in the custom Streamlit render event. */\r\nexport interface RenderData {\r\n  args: any\r\n  disabled: boolean\r\n}\r\n\r\n/** Messages from Component -> Streamlit */\r\nenum ComponentMessageType {\r\n  // A component sends this message when it's ready to receive messages\r\n  // from Streamlit. Streamlit won't send any messages until it gets this.\r\n  // Data: { apiVersion: number }\r\n  COMPONENT_READY = \"streamlit:componentReady\",\r\n\r\n  // The component has a new widget value. Send it back to Streamlit, which\r\n  // will then re-run the app.\r\n  // Data: { value: any }\r\n  SET_COMPONENT_VALUE = \"streamlit:setComponentValue\",\r\n\r\n  // The component has a new height for its iframe.\r\n  // Data: { height: number }\r\n  SET_FRAME_HEIGHT = \"streamlit:setFrameHeight\",\r\n}\r\n\r\n/**\r\n * Streamlit communication API.\r\n *\r\n * Components can send data to Streamlit via the functions defined here,\r\n * and receive data from Streamlit via the `events` property.\r\n */\r\nexport class Streamlit {\r\n  /**\r\n   * The Streamlit component API version we're targetting.\r\n   * There's currently only 1!\r\n   */\r\n  public static readonly API_VERSION = 1\r\n\r\n  public static readonly RENDER_EVENT = \"streamlit:render\"\r\n\r\n  /** Dispatches events received from Streamlit. */\r\n  public static readonly events = new EventTarget()\r\n\r\n  private static registeredMessageListener = false\r\n  private static lastFrameHeight?: number\r\n\r\n  /**\r\n   * Tell Streamlit that the component is ready to start receiving data.\r\n   * Streamlit will defer emitting RENDER events until it receives the\r\n   * COMPONENT_READY message.\r\n   */\r\n  public static setComponentReady = (): void => {\r\n    if (!Streamlit.registeredMessageListener) {\r\n      // Register for message events if we haven't already\r\n      window.addEventListener(\"message\", Streamlit.onMessageEvent)\r\n      Streamlit.registeredMessageListener = true\r\n    }\r\n\r\n    Streamlit.sendBackMsg(ComponentMessageType.COMPONENT_READY, {\r\n      apiVersion: Streamlit.API_VERSION,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Report the component's height to Streamlit.\r\n   * This should be called every time the component changes its DOM - that is,\r\n   * when it's first loaded, and any time it updates.\r\n   */\r\n  public static setFrameHeight = (height?: number): void => {\r\n    if (height === undefined) {\r\n      // `height` is optional. If undefined, it defaults to scrollHeight,\r\n      // which is the entire height of the element minus its border,\r\n      // scrollbar, and margin.\r\n      height = document.body.scrollHeight\r\n    }\r\n\r\n    if (height === Streamlit.lastFrameHeight) {\r\n      // Don't bother updating if our height hasn't changed.\r\n      return\r\n    }\r\n\r\n    Streamlit.lastFrameHeight = height\r\n    Streamlit.sendBackMsg(ComponentMessageType.SET_FRAME_HEIGHT, { height })\r\n  }\r\n\r\n  /**\r\n   * Set the component's value. This value will be returned to the Python\r\n   * script, and the script will be re-run.\r\n   *\r\n   * For example:\r\n   *\r\n   * JavaScript:\r\n   * Streamlit.setComponentValue(\"ahoy!\")\r\n   *\r\n   * Python:\r\n   * value = st.my_component(...)\r\n   * st.write(value) # -> \"ahoy!\"\r\n   *\r\n   * The value must be serializable into JSON.\r\n   */\r\n  public static setComponentValue = (value: any): void => {\r\n    Streamlit.sendBackMsg(ComponentMessageType.SET_COMPONENT_VALUE, { value })\r\n  }\r\n\r\n  /** Receive a ForwardMsg from the Streamlit app */\r\n  private static onMessageEvent = (event: MessageEvent): void => {\r\n    const type = event.data[\"type\"]\r\n    switch (type) {\r\n      case Streamlit.RENDER_EVENT:\r\n        Streamlit.onRenderMessage(event.data)\r\n        break\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle an untyped Streamlit render event and redispatch it as a\r\n   * StreamlitRenderEvent.\r\n   */\r\n  private static onRenderMessage = (data: any): void => {\r\n    let args = data[\"args\"]\r\n    if (args == null) {\r\n      console.error(\r\n        `Got null args in onRenderMessage. This should never happen`\r\n      )\r\n      args = {}\r\n    }\r\n\r\n    // Parse our dataframe arguments with arrow, and merge them into our args dict\r\n    const dataframeArgs =\r\n      data[\"dfs\"] && data[\"dfs\"].length > 0\r\n        ? Streamlit.argsDataframeToObject(data[\"dfs\"])\r\n        : {}\r\n\r\n    args = {\r\n      ...args,\r\n      ...dataframeArgs,\r\n    }\r\n\r\n    const disabled = Boolean(data[\"disabled\"])\r\n\r\n    // Dispatch a render event!\r\n    const eventData = { disabled, args }\r\n    const event = new CustomEvent<RenderData>(Streamlit.RENDER_EVENT, {\r\n      detail: eventData,\r\n    })\r\n    Streamlit.events.dispatchEvent(event)\r\n  }\r\n\r\n  private static argsDataframeToObject = (\r\n    argsDataframe: ArgsDataframe[]\r\n  ): object => {\r\n    const argsDataframeArrow = argsDataframe.map(\r\n      ({ key, value }: ArgsDataframe) => [key, Streamlit.toArrowTable(value)]\r\n    )\r\n    return Object.fromEntries(argsDataframeArrow)\r\n  }\r\n\r\n  private static toArrowTable = (df: ArrowDataframeProto): ArrowTable => {\r\n    const { data, index, columns } = df.data\r\n    return new ArrowTable(data, index, columns)\r\n  }\r\n\r\n  /** Post a message to the Streamlit app. */\r\n  private static sendBackMsg = (type: string, data?: any): void => {\r\n    window.parent.postMessage(\r\n      {\r\n        isStreamlitMessage: true,\r\n        type: type,\r\n        ...data,\r\n      },\r\n      \"*\"\r\n    )\r\n  }\r\n}\r\n\r\ninterface ArgsDataframe {\r\n  key: string\r\n  value: ArrowDataframeProto\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2018-2019 Streamlit Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { Table, Type } from \"apache-arrow\"\r\n\r\ntype CellType = \"blank\" | \"index\" | \"columns\" | \"data\"\r\n\r\nexport interface ArrowDataframeProto {\r\n  data: ArrowTableProto\r\n  height: string\r\n  width: string\r\n}\r\n\r\nexport interface ArrowTableProto {\r\n  data: Uint8Array\r\n  index: Uint8Array\r\n  columns: Uint8Array\r\n  styler: Styler\r\n}\r\n\r\ninterface Cell {\r\n  classNames: string\r\n  content: string\r\n  id?: string\r\n  type: CellType\r\n}\r\n\r\ninterface Styler {\r\n  caption?: string\r\n  displayValuesTable: Table\r\n  styles?: string\r\n  uuid: string\r\n}\r\n\r\nexport class ArrowTable {\r\n  private readonly dataTable: Table\r\n  private readonly indexTable: Table\r\n  private readonly columnsTable: Table\r\n  private readonly styler?: Styler\r\n\r\n  constructor(\r\n    dataBuffer: Uint8Array,\r\n    indexBuffer: Uint8Array,\r\n    columnsBuffer: Uint8Array,\r\n    styler?: any\r\n  ) {\r\n    this.dataTable = Table.from(dataBuffer)\r\n    this.indexTable = Table.from(indexBuffer)\r\n    this.columnsTable = Table.from(columnsBuffer)\r\n    this.styler = styler\r\n      ? {\r\n          caption: styler.get(\"caption\"),\r\n          displayValuesTable: Table.from(styler.get(\"displayValues\")),\r\n          styles: styler.get(\"styles\"),\r\n          uuid: styler.get(\"uuid\"),\r\n        }\r\n      : undefined\r\n  }\r\n\r\n  get rows(): number {\r\n    return this.indexTable.length + this.columnsTable.numCols\r\n  }\r\n\r\n  get columns(): number {\r\n    return this.indexTable.numCols + this.columnsTable.length\r\n  }\r\n\r\n  get headerRows(): number {\r\n    return this.rows - this.dataRows\r\n  }\r\n\r\n  get headerColumns(): number {\r\n    return this.columns - this.dataColumns\r\n  }\r\n\r\n  get dataRows(): number {\r\n    return this.dataTable.length\r\n  }\r\n\r\n  get dataColumns(): number {\r\n    return this.dataTable.numCols\r\n  }\r\n\r\n  get uuid(): string | undefined {\r\n    return this.styler && this.styler.uuid\r\n  }\r\n\r\n  get caption(): string | undefined {\r\n    return this.styler && this.styler.caption\r\n  }\r\n\r\n  get styles(): string | undefined {\r\n    return this.styler && this.styler.styles\r\n  }\r\n\r\n  get table(): Table {\r\n    return this.dataTable\r\n  }\r\n\r\n  get index(): Table {\r\n    return this.indexTable\r\n  }\r\n\r\n  get columnTable(): Table {\r\n    return this.columnsTable\r\n  }\r\n\r\n  public getCell = (rowIndex: number, columnIndex: number): Cell => {\r\n    const isBlankCell =\r\n      rowIndex < this.headerRows && columnIndex < this.headerColumns\r\n    const isIndexCell =\r\n      rowIndex >= this.headerRows && columnIndex < this.headerColumns\r\n    const isColumnsCell =\r\n      rowIndex < this.headerRows && columnIndex >= this.headerColumns\r\n\r\n    if (isBlankCell) {\r\n      const classNames = [\"blank\"]\r\n      if (columnIndex > 0) {\r\n        classNames.push(\"level\" + rowIndex)\r\n      }\r\n\r\n      return {\r\n        type: \"blank\",\r\n        classNames: classNames.join(\" \"),\r\n        content: \"\",\r\n      }\r\n    } else if (isColumnsCell) {\r\n      const dataColumnIndex = columnIndex - this.headerColumns\r\n      const classNames = [\r\n        \"col_heading\",\r\n        \"level\" + rowIndex,\r\n        \"col\" + dataColumnIndex,\r\n      ]\r\n\r\n      return {\r\n        type: \"columns\",\r\n        classNames: classNames.join(\" \"),\r\n        content: this.getContent(this.columnsTable, dataColumnIndex, rowIndex),\r\n      }\r\n    } else if (isIndexCell) {\r\n      const dataRowIndex = rowIndex - this.headerRows\r\n      const classNames = [\r\n        \"row_heading\",\r\n        \"level\" + columnIndex,\r\n        \"row\" + dataRowIndex,\r\n      ]\r\n\r\n      return {\r\n        type: \"index\",\r\n        id: `T_${this.uuid}level${columnIndex}_row${dataRowIndex}`,\r\n        classNames: classNames.join(\" \"),\r\n        content: this.getContent(this.indexTable, dataRowIndex, columnIndex),\r\n      }\r\n    } else {\r\n      const dataRowIndex = rowIndex - this.headerRows\r\n      const dataColumnIndex = columnIndex - this.headerColumns\r\n      const classNames = [\r\n        \"data\",\r\n        \"row\" + dataRowIndex,\r\n        \"col\" + dataColumnIndex,\r\n      ]\r\n      const content = this.styler\r\n        ? this.getContent(\r\n            this.styler.displayValuesTable,\r\n            dataRowIndex,\r\n            dataColumnIndex\r\n          )\r\n        : this.getContent(this.dataTable, dataRowIndex, dataColumnIndex)\r\n\r\n      return {\r\n        type: \"data\",\r\n        id: `T_${this.uuid}row${dataRowIndex}_col${dataColumnIndex}`,\r\n        classNames: classNames.join(\" \"),\r\n        content,\r\n      }\r\n    }\r\n  }\r\n\r\n  public getContent = (\r\n    table: Table,\r\n    rowIndex: number,\r\n    columnIndex: number\r\n  ): any => {\r\n    const column = table.getColumnAt(columnIndex)\r\n    if (column === null) {\r\n      return \"\"\r\n    }\r\n\r\n    const columnTypeId = this.getColumnTypeId(table, columnIndex)\r\n    switch (columnTypeId) {\r\n      case Type.Timestamp: {\r\n        return this.nanosToDate(column.get(rowIndex))\r\n      }\r\n      default: {\r\n        return column.get(rowIndex)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns apache-arrow specific typeId of column.\r\n   */\r\n  private getColumnTypeId(table: Table, columnIndex: number): Type {\r\n    return table.schema.fields[columnIndex].type.typeId\r\n  }\r\n\r\n  private nanosToDate(nanos: number): Date {\r\n    return new Date(nanos / 1e6)\r\n  }\r\n}\r\n","import hoistNonReactStatics from \"hoist-non-react-statics\"\r\nimport React, { ReactNode } from \"react\"\r\nimport { RenderData, Streamlit } from \"./streamlit\"\r\n\r\n/**\r\n * Props passed to custom Streamlit components.\r\n */\r\nexport interface ComponentProps {\r\n  /** Named dictionary of arguments passed from Python. */\r\n  args: any\r\n\r\n  /** The component's width. */\r\n  width: number\r\n\r\n  /**\r\n   * True if the component should be disabled.\r\n   * All components get disabled while the app is being re-run,\r\n   * and become re-enabled when the re-run has finished.\r\n   */\r\n  disabled: boolean\r\n}\r\n\r\n/**\r\n * Optional Streamlit React-based component base class.\r\n *\r\n * You are not required to extend this base class to create a Streamlit\r\n * component. If you decide not to extend it, you should implement the\r\n * `componentDidMount` and `componentDidUpdate` functions in your own class,\r\n * so that your plugin properly resizes.\r\n */\r\nexport class StreamlitComponentBase<S = {}> extends React.PureComponent<\r\n  ComponentProps,\r\n  S\r\n> {\r\n  public componentDidMount(): void {\r\n    // After we're rendered for the first time, tell Streamlit that our height\r\n    // has changed.\r\n    Streamlit.setFrameHeight()\r\n  }\r\n\r\n  public componentDidUpdate(): void {\r\n    // After we're updated, tell Streamlit that our height may have changed.\r\n    Streamlit.setFrameHeight()\r\n  }\r\n}\r\n\r\n/**\r\n * Wrapper for React-based Streamlit components.\r\n *\r\n * Bootstraps the communication interface between Streamlit and the component.\r\n */\r\nexport function withStreamlitConnection(\r\n  WrappedComponent: React.ComponentType<ComponentProps>\r\n): React.ComponentType {\r\n  interface WrapperProps {}\r\n\r\n  interface WrapperState {\r\n    renderData?: RenderData\r\n    componentError?: Error\r\n  }\r\n\r\n  class ComponentWrapper extends React.PureComponent<\r\n    WrapperProps,\r\n    WrapperState\r\n  > {\r\n    public constructor(props: WrapperProps) {\r\n      super(props)\r\n      this.state = {\r\n        renderData: undefined,\r\n        componentError: undefined,\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Error boundary function. This will be called if our wrapped\r\n     * component throws an error. We store the caught error in our state,\r\n     * and display it in the next render().\r\n     */\r\n    public static getDerivedStateFromError = (\r\n      error: Error\r\n    ): Partial<WrapperState> => {\r\n      return { componentError: error }\r\n    }\r\n\r\n    public componentDidMount = (): void => {\r\n      // Set up event listeners, and signal to Streamlit that we're ready.\r\n      // We won't render the component until we receive the first RENDER_EVENT.\r\n      Streamlit.events.addEventListener(\r\n        Streamlit.RENDER_EVENT,\r\n        this.onRenderEvent\r\n      )\r\n      Streamlit.setComponentReady()\r\n    }\r\n\r\n    public componentDidUpdate = (): void => {\r\n      // If our child threw an error, we display it in render(). In this\r\n      // case, the child won't be mounted and therefore won't call\r\n      // `setFrameHeight` on its own. We do it here so that the rendered\r\n      // error will be visible.\r\n      if (this.state.componentError != null) {\r\n        Streamlit.setFrameHeight()\r\n      }\r\n    }\r\n\r\n    public componentWillUnmount = (): void => {\r\n      Streamlit.events.removeEventListener(\r\n        Streamlit.RENDER_EVENT,\r\n        this.onRenderEvent\r\n      )\r\n    }\r\n\r\n    /**\r\n     * Streamlit is telling this component to redraw.\r\n     * We save the render data in State, so that it can be passed to the\r\n     * component in our own render() function.\r\n     */\r\n    private onRenderEvent = (event: Event): void => {\r\n      // Update our state with the newest render data\r\n      const renderEvent = event as CustomEvent<RenderData>\r\n      this.setState({ renderData: renderEvent.detail })\r\n    }\r\n\r\n    public render = (): ReactNode => {\r\n      // If our wrapped component threw an error, display it.\r\n      if (this.state.componentError != null) {\r\n        return (\r\n          <div>\r\n            <h1>Component Error</h1>\r\n            <span>{this.state.componentError.message}</span>\r\n          </div>\r\n        )\r\n      }\r\n\r\n      // Don't render until we've gotten our first RENDER_EVENT from Streamlit.\r\n      if (this.state.renderData == null) {\r\n        return null\r\n      }\r\n\r\n      return (\r\n        <WrappedComponent\r\n          width={window.innerWidth}\r\n          disabled={this.state.renderData.disabled}\r\n          args={this.state.renderData.args}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n  return hoistNonReactStatics(ComponentWrapper, WrappedComponent)\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport {ComponentProps, Streamlit, withStreamlitConnection} from \"./streamlit\";\r\nimport {fabric} from 'fabric';\r\n\r\ninterface PythonArgs {\r\n    canvasWidth: number\r\n    canvasHeight: number\r\n    rectTop: number\r\n    rectLeft: number\r\n    rectWidth: number\r\n    rectHeight: number\r\n    realtimeUpdate: boolean\r\n    boxColor: string\r\n    imageData: Uint8ClampedArray\r\n    lockAspect: boolean\r\n}\r\n\r\n\r\nconst StreamlitCropper = (props: ComponentProps) => {\r\n    const [canvas, setCanvas] = useState(new fabric.Canvas(\"\"))\r\n    const {canvasWidth, canvasHeight, imageData}: PythonArgs = props.args\r\n    /*\r\n    * Translate Python image data to a JavaScript Image\r\n    */\r\n    var invisCanvas = document.createElement(\"canvas\")\r\n    var ctx = invisCanvas.getContext('2d')\r\n\r\n    invisCanvas.width = canvasWidth\r\n    invisCanvas.height = canvasHeight\r\n\r\n    // create imageData object\r\n    if (ctx) {\r\n    var idata = ctx.createImageData(canvasWidth, canvasHeight);\r\n\r\n    // set our buffer as source\r\n    idata.data.set(imageData);\r\n\r\n    // update canvas with new data\r\n    ctx.putImageData(idata, 0, 0);\r\n    var dataUri = invisCanvas.toDataURL()\r\n    }\r\n    else {\r\n        // eslint-disable-next-line\r\n        var dataUri = \"\"\r\n    }\r\n    \r\n    /**\r\n     * Initialize canvas on mount and add a rectangle\r\n     */\r\n    useEffect  (() => {\r\n        const {rectTop, rectLeft, rectWidth, rectHeight, boxColor, lockAspect}: PythonArgs = props.args\r\n        const canvas = new fabric.Canvas('c', {\r\n            enableRetinaScaling: false,\r\n            backgroundImage: dataUri,\r\n            uniScaleTransform: lockAspect\r\n        })\r\n\r\n        var rect = new fabric.Rect({\r\n            left: rectLeft,\r\n            top: rectTop,\r\n            fill: '',\r\n            width: rectWidth,\r\n            height: rectHeight,\r\n            objectCaching: true,\r\n            stroke: boxColor,\r\n            strokeWidth: 3,\r\n            hasRotatingPoint: false\r\n\r\n          });\r\n        canvas.add(rect)\r\n\r\n        setCanvas(canvas)\r\n        Streamlit.setFrameHeight()\r\n        // eslint-disable-next-line\r\n    }, [canvasHeight, canvasWidth]);\r\n\r\n\r\n    /**\r\n     * On update (either realtime or doubleclick), send the coordinates of the rectangle\r\n     * back to streamlit.\r\n     */\r\n    useEffect(() => {\r\n        const {realtimeUpdate}: PythonArgs = props.args\r\n        if (!canvas) {\r\n            return;\r\n        }\r\n        const handleEvent = () => {\r\n            canvas.renderAll()\r\n            const coords = canvas.getObjects()[0].getBoundingRect()\r\n            Streamlit.setComponentValue({coords:coords})\r\n        }\r\n        \r\n        if (realtimeUpdate) {\r\n        canvas.on(\"object:modified\", handleEvent)\r\n        return () => {\r\n            canvas.off(\"object:modified\");\r\n        }\r\n        }\r\n        else {\r\n        canvas.on(\"mouse:dblclick\", handleEvent)\r\n        return () => {\r\n            canvas.off(\"mouse:dblclick\");\r\n        }\r\n        }\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <canvas id=\"c\" width={canvasWidth} height={canvasHeight}/>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default withStreamlitConnection(StreamlitCropper);\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport StreamlitCropper from \"./StreamlitCropper\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StreamlitCropper />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}