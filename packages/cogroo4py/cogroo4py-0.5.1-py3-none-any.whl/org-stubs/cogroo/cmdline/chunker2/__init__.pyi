import java.io
import java.util
import opennlp.tools.cmdline
import opennlp.tools.util.eval
import org.cogroo.tools.chunker2
import typing



class ChunkEvaluationErrorListener(opennlp.tools.cmdline.EvaluationErrorPrinter[org.cogroo.tools.chunker2.ChunkSample], org.cogroo.tools.chunker2.ChunkerEvaluationMonitor):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, outputStream: java.io.OutputStream): ...
    def missclassified(self, chunkSample: org.cogroo.tools.chunker2.ChunkSample, chunkSample2: org.cogroo.tools.chunker2.ChunkSample) -> None: ...

class Chunker2ConverterTool(opennlp.tools.cmdline.AbstractConverterTool[org.cogroo.tools.chunker2.ChunkSample]):
    def __init__(self): ...

class Chunker2CrossValidatorTool(opennlp.tools.cmdline.AbstractCrossValidatorTool[org.cogroo.tools.chunker2.ChunkSample, 'Chunker2CrossValidatorTool.CVToolParams']):
    def __init__(self): ...
    def getShortDescription(self) -> str: ...
    def run(self, string: str, stringArray: typing.List[str]) -> None: ...

class Chunker2EvaluatorTool(opennlp.tools.cmdline.AbstractEvaluatorTool[org.cogroo.tools.chunker2.ChunkSample, 'Chunker2EvaluatorTool.EvalToolParams']):
    def __init__(self): ...
    def getShortDescription(self) -> str: ...
    def run(self, string: str, stringArray: typing.List[str]) -> None: ...

class Chunker2Tool(opennlp.tools.cmdline.BasicCmdLineTool):
    def __init__(self): ...
    def getHelp(self) -> str: ...
    def getShortDescription(self) -> str: ...
    def run(self, stringArray: typing.List[str]) -> None: ...

class Chunker2TrainerTool(opennlp.tools.cmdline.AbstractTrainerTool[org.cogroo.tools.chunker2.ChunkSample, 'Chunker2TrainerTool.TrainerToolParams']):
    def __init__(self): ...
    def getShortDescription(self) -> str: ...
    def run(self, string: str, stringArray: typing.List[str]) -> None: ...

class ChunkerDetailedFMeasureListener(opennlp.tools.cmdline.DetailedFMeasureListener[org.cogroo.tools.chunker2.ChunkSample], org.cogroo.tools.chunker2.ChunkerEvaluationMonitor):
    def __init__(self): ...

class ChunkerModelLoader(opennlp.tools.cmdline.ModelLoader[org.cogroo.tools.chunker2.ChunkerModel]):
    def __init__(self): ...

_DetailedFMeasureForSizeListener__T = typing.TypeVar('_DetailedFMeasureForSizeListener__T')  # <T>
class DetailedFMeasureForSizeListener(opennlp.tools.util.eval.EvaluationMonitor[_DetailedFMeasureForSizeListener__T], typing.Generic[_DetailedFMeasureForSizeListener__T]):
    def __init__(self): ...
    def correctlyClassified(self, t: _DetailedFMeasureForSizeListener__T, t2: _DetailedFMeasureForSizeListener__T) -> None: ...
    @typing.overload
    def createReport(self) -> str: ...
    @typing.overload
    def createReport(self, locale: java.util.Locale) -> str: ...
    def missclassified(self, t: _DetailedFMeasureForSizeListener__T, t2: _DetailedFMeasureForSizeListener__T) -> None: ...
    def toString(self) -> str: ...

class ChunkerDetailedFMeasureSizeListener(DetailedFMeasureForSizeListener[org.cogroo.tools.chunker2.ChunkSample], org.cogroo.tools.chunker2.ChunkerEvaluationMonitor):
    def __init__(self): ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.cogroo.cmdline.chunker2")``.

    ChunkEvaluationErrorListener: typing.Type[ChunkEvaluationErrorListener]
    Chunker2ConverterTool: typing.Type[Chunker2ConverterTool]
    Chunker2CrossValidatorTool: typing.Type[Chunker2CrossValidatorTool]
    Chunker2EvaluatorTool: typing.Type[Chunker2EvaluatorTool]
    Chunker2Tool: typing.Type[Chunker2Tool]
    Chunker2TrainerTool: typing.Type[Chunker2TrainerTool]
    ChunkerDetailedFMeasureListener: typing.Type[ChunkerDetailedFMeasureListener]
    ChunkerDetailedFMeasureSizeListener: typing.Type[ChunkerDetailedFMeasureSizeListener]
    ChunkerModelLoader: typing.Type[ChunkerModelLoader]
    DetailedFMeasureForSizeListener: typing.Type[DetailedFMeasureForSizeListener]
