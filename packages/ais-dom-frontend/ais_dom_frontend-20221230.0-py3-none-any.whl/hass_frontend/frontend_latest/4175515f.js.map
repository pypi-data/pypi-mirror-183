{"version":3,"file":"4175515f.js","mappings":";;;AAwDA;AACA;;;AAMA;;AAIA;;;AAIA;AACA;;;AAGA;AACA;AACA;;;AAGA;;AAEA;AAGA;AArFA;;;;;AA4FA;AACA;AA7FA;;;;;;;AAuGA;AACA;;AAEA;;;;AAIA;AACA;;AAEA;;;AAMA;;;;;;;;;;;;;;;;;;;;;;AAyEA","sources":["webpack://home-assistant-frontend/./src/panels/config/entities/entity-aliases/dialog-entity-aliases.ts"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport { mdiDeleteOutline, mdiPlus } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { computeStateName } from \"../../../../common/entity/compute_state_name\";\nimport \"../../../../components/ha-alert\";\nimport \"../../../../components/ha-area-picker\";\nimport \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-textfield\";\nimport type { HaTextField } from \"../../../../components/ha-textfield\";\nimport { haStyle, haStyleDialog } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { EntityAliasesDialogParams } from \"./show-dialog-entity-aliases\";\n\n@customElement(\"dialog-entity-aliases\")\nclass DialogEntityAliases extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _error?: string;\n\n  @state() private _params?: EntityAliasesDialogParams;\n\n  @state() private _aliases!: string[];\n\n  @state() private _submitting = false;\n\n  public async showDialog(params: EntityAliasesDialogParams): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    this._aliases =\n      this._params.entity.aliases?.length > 0\n        ? this._params.entity.aliases\n        : [\"\"];\n    await this.updateComplete;\n  }\n\n  public closeDialog(): void {\n    this._error = \"\";\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    const entityId = this._params.entity.entity_id;\n    const stateObj = entityId ? this.hass.states[entityId] : undefined;\n\n    const name = (stateObj && computeStateName(stateObj)) || entityId;\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${this.hass.localize(\n          \"ui.dialogs.entity_registry.editor.aliases.heading\",\n          { name }\n        )}\n      >\n        <div>\n          ${this._error\n            ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert> `\n            : \"\"}\n          <div class=\"form\">\n            ${this._aliases.map(\n              (alias, index) => html`\n                <div class=\"layout horizontal center-center row\">\n                  <ha-textfield\n                    dialogInitialFocus=${index}\n                    .index=${index}\n                    class=\"flex-auto\"\n                    label=\"Alias\"\n                    .value=${alias}\n                    ?data-last=${index === this._aliases.length - 1}\n                    @change=${this._editAlias}\n                  ></ha-textfield>\n                  <ha-icon-button\n                    .index=${index}\n                    slot=\"navigationIcon\"\n                    label=${this.hass!.localize(\n                      \"ui.dialogs.entity_registry.editor.aliases.remove_alias\"\n                    )}\n                    @click=${this._removeAlias}\n                    .path=${mdiDeleteOutline}\n                  ></ha-icon-button>\n                </div>\n              `\n            )}\n            <div class=\"layout horizontal center-center\">\n              <mwc-button @click=${this._addAlias}>\n                ${this.hass!.localize(\n                  \"ui.dialogs.entity_registry.editor.aliases.add_alias\"\n                )}\n                <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n              </mwc-button>\n            </div>\n          </div>\n        </div>\n        <mwc-button\n          slot=\"secondaryAction\"\n          @click=${this.closeDialog}\n          .disabled=${this._submitting}\n        >\n          ${this.hass.localize(\"ui.common.cancel\")}\n        </mwc-button>\n        <mwc-button\n          slot=\"primaryAction\"\n          @click=${this._updateEntry}\n          .disabled=${this._submitting}\n        >\n          ${this.hass.localize(\n            \"ui.dialogs.entity_registry.editor.aliases.save\"\n          )}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private async _addAlias() {\n    this._aliases = [...this._aliases, \"\"];\n    await this.updateComplete;\n    const field = this.shadowRoot?.querySelector(`ha-textfield[data-last]`) as\n      | HaTextField\n      | undefined;\n    field?.focus();\n  }\n\n  private async _editAlias(ev: Event) {\n    const index = (ev.target as any).index;\n    this._aliases[index] = (ev.target as any).value;\n  }\n\n  private async _removeAlias(ev: Event) {\n    const index = (ev.target as any).index;\n    const aliases = [...this._aliases];\n    aliases.splice(index, 1);\n    this._aliases = aliases;\n  }\n\n  private async _updateEntry(): Promise<void> {\n    this._submitting = true;\n    const noEmptyAliases = this._aliases\n      .map((alias) => alias.trim())\n      .filter((alias) => alias);\n\n    try {\n      await this._params!.updateEntry({\n        aliases: noEmptyAliases,\n      });\n      this.closeDialog();\n    } catch (err: any) {\n      this._error =\n        err.message ||\n        this.hass.localize(\n          \"ui.dialogs.entity_registry.editor.aliases.unknown_error\"\n        );\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        .row {\n          margin-bottom: 8px;\n        }\n        ha-textfield {\n          display: block;\n        }\n        ha-icon-button {\n          display: block;\n        }\n        mwc-button {\n          margin-left: 8px;\n        }\n        #alias_input {\n          margin-top: 8px;\n        }\n        .alias {\n          border: 1px solid var(--divider-color);\n          border-radius: 4px;\n          margin-top: 4px;\n          --mdc-icon-button-size: 24px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-entity-aliases\": DialogEntityAliases;\n  }\n}\n"],"names":[],"sourceRoot":""}