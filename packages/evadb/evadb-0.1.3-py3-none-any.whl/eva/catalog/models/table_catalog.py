# coding=utf-8
# Copyright 2018-2022 EVA
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
from sqlalchemy import Column, Enum, String
from sqlalchemy.orm import relationship

from eva.catalog.catalog_type import TableType
from eva.catalog.df_schema import DataFrameSchema
from eva.catalog.models.base_model import BaseModel


class TableCatalog(BaseModel):
    """The `TableCatalog` catalog stores information about all tables (structured, media, etc.) and materialized views. It has the following columns, not all of which are relevant for all table types.
    `_row_id:` an autogenerated unique identifier.
    `_name:` the name of the table, view, etc.
    `_file_url:` the path to the data file on disk
    `_table_type:` the type of the table (refer to TableType).
    """

    __tablename__ = "table_catalog"

    _name = Column("name", String(100), unique=True)
    _file_url = Column("file_url", String(100))
    _unique_identifier_column = Column("identifier_column", String(100))
    _table_type = Column("table_type", Enum(TableType))

    # the child table containing information about the columns of the each table
    _columns = relationship(
        "ColumnCatalog",
        back_populates="_table_catalog",
        cascade="all, delete, delete-orphan",
    )

    def __init__(self, name: str, file_url: str, table_type: int, identifier_id="id"):
        self._name = name
        self._file_url = file_url
        self._schema = None
        self._unique_identifier_column = identifier_id
        self._table_type = table_type

    @property
    def schema(self):
        return self._schema

    @schema.setter
    def schema(self, column_list):
        self._schema = DataFrameSchema(self._name, column_list)

    @property
    def row_id(self):
        return self._row_id

    @property
    def name(self):
        return self._name

    @property
    def file_url(self):
        return self._file_url

    @property
    def columns(self):
        return self._columns

    @property
    def identifier_column(self):
        return self._unique_identifier_column

    @property
    def table_type(self):
        return self._table_type

    def __eq__(self, other):
        return (
            self.row_id == other.row_id
            and self.file_url == other.file_url
            and self.schema == other.schema
            and self.identifier_column == other.identifier_column
            and self.name == other.name
            and self.table_type == other.table_type
        )

    def __hash__(self) -> int:
        return hash(
            (
                self.row_id,
                self.file_url,
                self.schema,
                self.identifier_column,
                self.name,
                self.table_type,
            )
        )
