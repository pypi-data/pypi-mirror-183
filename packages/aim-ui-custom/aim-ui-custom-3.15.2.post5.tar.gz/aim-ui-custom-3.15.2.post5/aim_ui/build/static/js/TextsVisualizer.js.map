{"version":3,"sources":["pages/RunDetail/TextsVisualizer/TextsVisualizer.tsx","pages/RunDetail/TextsVisualizer/index.ts"],"names":["MyFullScreen","props","handler","useFullScreenHandle","onClick","enter","style","zIndex","left","position","className","handle","children","is_all_custom_data","rs","i","length","text","startsWith","is_moleculer_data","content","molecular_types","Set","add","has","split","is_html_data","html_escape","html","rules","expression","replacement","result","toString","rule","replaceAll","render_table_data","data","substring","JSON","parse","e","console","log","columns","j","render_html_data","render_large_table_data","map","name","accessorKey","header","records","reduce","d","column","enableFullScreenToggle","render_moleculer_data2","dtype","indexOf","encodeURIComponent","autoFullScreenBtn","elem","url","width","height","loading","display","allowFullScreen","styles","border","backgroudColor","TextsVisualizer","tableRef","React","useRef","tableColumns","dataKey","key","title","flexGrow","cellRenderer","cellData","overflow","ErrorBoundary","processedValues","reverse","object","step","DataList","tableData","isLoading","searchableKeys","displayName","memo"],"mappings":"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","file":"static/js/TextsVisualizer.js?version=be7feb961a76920fbe97","sourcesContent":["import React from 'react';\nimport Iframe from 'react-iframe';\nimport Viewer from 'miew-react';\nimport MaterialReactTable, { MRT_ColumnDef } from 'material-react-table';\nimport { FullScreen, useFullScreenHandle } from 'react-full-screen';\n\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport DataList from 'components/kit/DataList';\n\nimport { ITableRef } from 'types/components/Table/Table';\n\nimport { ITextsVisualizerProps } from '../types';\n\nimport './TextsVisualizer.scss';\n\nconst MyFullScreen = (props: any) => {\n  const handler = useFullScreenHandle();\n  return (\n    <>\n      <button\n        onClick={handler.enter}\n        style={{ zIndex: 99999, left: '55%', position: 'fixed' }}\n      >\n        Enter Full-Screen Mode\n      </button>\n      <FullScreen className='myfullscreen' handle={handler}>\n        {props.children}\n      </FullScreen>\n    </>\n  );\n};\n\nfunction is_all_custom_data(rs: any): Boolean {\n  if (!rs) {\n    return false;\n  }\n  for (var i = 0; i < rs.length; i++) {\n    if (!rs[i].text.startsWith('data:text/')) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction is_table_data(content: string): Boolean {\n  return content.startsWith('data:text/table,');\n}\n\nfunction is_moleculer_data(content: string): Boolean {\n  let molecular_types = new Set<string>();\n  molecular_types.add('data:text/pdb');\n  molecular_types.add('data:text/sdf');\n  molecular_types.add('data:text/pdbqt');\n  molecular_types.add('data:text/mol2');\n  return molecular_types.has(content.split(',', 1)[0]);\n}\n\nfunction is_html_data(content: string): Boolean {\n  return content.startsWith('data:text/html,');\n}\n\nfunction html_escape(html: string) {\n  var rules = [\n    { expression: /&/g, replacement: '&amp;' }, // keep this rule at first position\n    { expression: /</g, replacement: '&lt;' },\n    { expression: />/g, replacement: '&gt;' },\n    { expression: /\"/g, replacement: '&quot;' },\n    { expression: /'/g, replacement: '&#039;' }, // or  &#39;  or  &#0039;\n    // &apos;  is not supported by IE8\n    // &apos;  is not defined in HTML 4\n  ];\n  var result = html.toString();\n  for (var i = 0; i < rules.length; ++i) {\n    var rule = rules[i];\n    result = result.replaceAll(rule.expression, rule.replacement);\n  }\n  return result;\n}\n\nfunction render_large_table_data(data: any) {\n  var html: string = `data:text/html,<html>\n  <head>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.3/jquery.min.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.21/js/jquery.dataTables.min.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.21/css/jquery.dataTables.min.css\">\n  </head>\n  <div id=\"abc\">\n  `;\n\n  html += '<table class=\"dataframe\">';\n  html += '<thead><tr>';\n  for (var i = 0; i < data.columns.length; i++) {\n    html += '<th>' + html_escape(data.columns[i]) + '</th>';\n  }\n  html += '</tr></thead>';\n  html += '<tbody>';\n  for (var i = 0; i < data.data.length; i++) {\n    html += '<tr>';\n    for (var j = 0; j < data.data[i].length; j++) {\n      html += '<td>' + html_escape(data.data[i][j]) + '</td>';\n    }\n    html += '</tr>';\n  }\n  html += '</tbody>';\n  html += '<table>';\n  html += `\n  <div>\n<script>\n$(document).ready(function () {\n    $('.dataframe').DataTable();\n});\n</script>\n</html>\n  `;\n  return render_html_data(html, true);\n}\n\nfunction render_table_data(content: string) {\n  content = content.substring('data:text/table,'.length);\n  var data: any;\n  try {\n    data = JSON.parse(content);\n  } catch (e) {\n    console.log(e);\n    return null;\n  }\n  if (data.columns.length > 50) {\n    return render_large_table_data(data);\n  }\n  const columns: MRT_ColumnDef<any>[] = data?.columns.map((name: string) => ({\n    accessorKey: name,\n    header: name,\n  }));\n  const records = data.data.map((rs: any) =>\n    data.columns.reduce((d: any, column: string, i: number) => {\n      d[column] = rs[i];\n      return d;\n    }, {}),\n  );\n  return (\n    <MaterialReactTable\n      columns={columns}\n      data={records}\n      enableFullScreenToggle={true}\n    />\n  );\n}\n\nfunction init_miew(content: string, dtype: string) {\n  function x(miew: any): void {\n    miew.run();\n    try {\n      miew.load(content, {\n        sourceType: 'immediate',\n        fileType: dtype,\n        keepRepsInfo: true,\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  return x;\n}\n\nfunction render_moleculer_data(content: string) {\n  const dtype = content.substring(0, content.indexOf(',')).split('/')[1];\n  content = content.substring(content.indexOf(',') + 1);\n  try {\n    return (\n      <div style={{ height: '300px', position: 'relative' }}>\n        <MyFullScreen>\n          <Viewer\n            onInit={init_miew(content, dtype)}\n            options={{\n              settings: {\n                ao: true,\n                aromatic: true,\n                fps: true,\n                fxaa: true,\n                outline: true,\n                fox: true,\n                autobuild: true,\n                editing: true,\n                interpolateViews: false,\n                zSprite: true,\n              },\n            }}\n          />\n        </MyFullScreen>\n      </div>\n    );\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction render_moleculer_data2(content: string) {\n  const dtype = content.substring(0, content.indexOf(',')).split('/')[1];\n  content = content.substring(content.indexOf(',') + 1);\n  const html: string =\n    `data:text/html,<!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n    <title>NGL - embedded</title>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0\">\n  </head>\n  <body>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/ngl/2.0.2/ngl.js\"></script>\n    <script>\n      var stage;\n      function toggleFullscreen() {\n        stage.toggleFullscreen();\n      }\n      var stringBlob = new Blob([decodeURIComponent(\"` +\n    encodeURIComponent(content) +\n    `\")], { type: 'text/plain'} );\n      document.addEventListener(\"DOMContentLoaded\", function () {\n        stage = new NGL.Stage(\"viewport\", { backgroundColor: \"black\" } );\n        stage.loadFile( stringBlob, {defaultRepresentation: true, ext: \"` +\n    dtype +\n    `\"});\n        stage.setSpin(true);\n      });\n    </script>\n    <button onclick=\"toggleFullscreen()\" style=\"position: fixed;top: 0;right: 50%;z-index: 100;\"><span>Enter Full-Screen Mode</span></button>\n    <div style=\"width:100%; height:300px;\">\n      <div id=\"viewport\" style=\"width:100%; height:100%;\"></div>\n    </div>\n  </body>\n  </html>`;\n  return render_html_data(html, false);\n}\n\nfunction render_html_data(content: string, autoFullScreenBtn: Boolean) {\n  content = content.substring('data:text/html,'.length);\n  const elem = (\n    <Iframe\n      url={'data:text/html,' + encodeURIComponent(content)}\n      width='100%'\n      height='100%'\n      loading='lazy'\n      className=''\n      display='block'\n      position='relative'\n      allowFullScreen={true}\n      styles={{ border: '1px solid #FFA630', backgroudColor: '#fff' }}\n    />\n  );\n  return (\n    <div style={{ height: '300px', position: 'relative' }}>\n      {autoFullScreenBtn ? <MyFullScreen>{elem}</MyFullScreen> : elem}\n    </div>\n  );\n}\n\nfunction TextsVisualizer(\n  props: ITextsVisualizerProps | any,\n): React.FunctionComponentElement<React.ReactNode> {\n  const tableRef = React.useRef<ITableRef>(null);\n\n  const tableColumns = [\n    {\n      dataKey: 'step',\n      key: 'step',\n      title: 'Step',\n      width: 100,\n    },\n    {\n      dataKey: 'index',\n      key: 'index',\n      title: 'Index',\n      width: 100,\n    },\n    {\n      dataKey: 'text',\n      key: 'text',\n      title: 'Text',\n      width: 0,\n      flexGrow: 1,\n      // TODO: replace with a wrapper component for all types of texts visualization\n      // eslint-disable-next-line react/display-name\n      cellRenderer: ({ cellData }: any) => (\n        <div className='ScrollBar__hidden' style={{ overflow: 'auto' }}>\n          <pre>{cellData}</pre>\n        </div>\n      ),\n    },\n  ];\n  return (\n    <ErrorBoundary>\n      <div\n        className='TextsVisualizer'\n        style={{ height: '100%', overflow: 'auto' }}\n      >\n        {is_all_custom_data(props?.data?.processedValues) ? (\n          (props?.data?.processedValues || []).reverse().map((object: any) => (\n            <div key={'custom-resource-' + object.step}>\n              <span>{object.step}</span>\n              {is_moleculer_data(object.text)\n                ? render_moleculer_data2(object.text)\n                : null}\n              {is_table_data(object.text)\n                ? render_table_data(object.text)\n                : null}\n              {is_html_data(object.text)\n                ? render_html_data(object.text, true)\n                : null}\n            </div>\n          ))\n        ) : (\n          <DataList\n            tableRef={tableRef}\n            tableData={props?.data?.processedValues}\n            tableColumns={tableColumns}\n            isLoading={props?.isLoading}\n            searchableKeys={['text']}\n          />\n        )}\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nTextsVisualizer.displayName = 'TextsVisualizer';\n\nexport default React.memo<ITextsVisualizerProps>(TextsVisualizer);\n","import TextsVisualizer from './TextsVisualizer';\n\nexport default TextsVisualizer;\n"],"sourceRoot":""}