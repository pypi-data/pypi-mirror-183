{"version":3,"sources":["pages/RunDetail/TextsVisualizer/TextsVisualizer.tsx","pages/RunDetail/TextsVisualizer/index.ts"],"names":["MyFullScreen","props","handler","useFullScreenHandle","className","onClick","enter","style","zIndex","handle","children","is_all_custom_data","rs","i","length","text","startsWith","is_moleculer_data","content","molecular_types","Set","add","has","split","is_html_data","render_table_data","data","substring","JSON","parse","e","console","log","columns","map","name","accessorKey","header","records","reduce","d","column","enableFullScreenToggle","init_miew","dtype","miew","run","load","sourceType","fileType","render_moleculer_data","indexOf","height","position","onInit","options","settings","editing","interpolateViews","zSprite","render_html_data","url","encodeURIComponent","width","loading","display","allowFullScreen","styles","border","backgroudColor","TextsVisualizer","tableRef","React","useRef","tableColumns","dataKey","key","title","flexGrow","cellRenderer","cellData","overflow","ErrorBoundary","processedValues","reverse","object","index","step","DataList","tableData","isLoading","searchableKeys","displayName","memo"],"mappings":"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","file":"static/js/TextsVisualizer.js?version=8e5a1a293fcc5c125cdc","sourcesContent":["import React from 'react';\nimport Iframe from 'react-iframe';\nimport Viewer from 'miew-react';\nimport MaterialReactTable, { MRT_ColumnDef } from 'material-react-table';\nimport { FullScreen, useFullScreenHandle } from 'react-full-screen';\n\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport DataList from 'components/kit/DataList';\n\nimport { ITableRef } from 'types/components/Table/Table';\n\nimport { ITextsVisualizerProps } from '../types';\n\nimport './TextsVisualizer.scss';\n\nconst MyFullScreen = (props: any) => {\n  const handler = useFullScreenHandle();\n  return (\n    <>\n      <button\n        className='btn button'\n        onClick={handler.enter}\n        style={{ zIndex: 99999 }}\n      >\n        Enter fullscreen\n      </button>\n      <FullScreen className='myfullscreen' handle={handler}>\n        {props.children}\n      </FullScreen>\n    </>\n  );\n};\n\nfunction is_all_custom_data(rs: any): Boolean {\n  if (!rs) {\n    return false;\n  }\n  for (var i = 0; i < rs.length; i++) {\n    if (!rs[i].text.startsWith('data:text/')) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction is_table_data(content: string): Boolean {\n  return content.startsWith('data:text/table,');\n}\n\nfunction is_moleculer_data(content: string): Boolean {\n  let molecular_types = new Set<string>();\n  molecular_types.add('data:text/pdb');\n  molecular_types.add('data:text/sdf');\n  molecular_types.add('data:text/pdbqt');\n  molecular_types.add('data:text/mol2');\n  return molecular_types.has(content.split(',', 1)[0]);\n}\n\nfunction is_html_data(content: string): Boolean {\n  return content.startsWith('data:text/html,');\n}\n\nfunction render_table_data(content: string) {\n  content = content.substring('data:text/table,'.length);\n  var data: any;\n  try {\n    data = JSON.parse(content);\n  } catch (e) {\n    console.log(e);\n    return null;\n  }\n  const columns: MRT_ColumnDef<any>[] = data?.columns.map((name: string) => ({\n    accessorKey: name,\n    header: name,\n  }));\n  const records = data.data.map((rs: any) =>\n    data.columns.reduce((d: any, column: string, i: number) => {\n      d[column] = rs[i];\n      return d;\n    }, {}),\n  );\n  return (\n    <MaterialReactTable\n      columns={columns}\n      data={records}\n      enableFullScreenToggle={true}\n    />\n  );\n}\n\nfunction init_miew(content: string, dtype: string) {\n  function x(miew: any): void {\n    miew.run();\n    try {\n      miew.load(content, { sourceType: 'immediate', fileType: dtype });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  return x;\n}\n\nfunction render_moleculer_data(content: string) {\n  const dtype = content.substring(0, content.indexOf(',')).split('/')[1];\n  content = content.substring(content.indexOf(',') + 1);\n  try {\n    return (\n      <div style={{ height: '300px', position: 'relative' }}>\n        <MyFullScreen>\n          <Viewer\n            onInit={init_miew(content, dtype)}\n            options={{\n              settings: {\n                editing: true,\n                interpolateViews: true,\n                zSprite: true,\n              },\n            }}\n          />\n        </MyFullScreen>\n      </div>\n    );\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction render_html_data(content: string) {\n  content = content.substring('data:text/html,'.length);\n  return (\n    <div>\n      <MyFullScreen>\n        <Iframe\n          url={'data:text/html,' + encodeURIComponent(content)}\n          width='100%'\n          height='100%'\n          loading='lazy'\n          className=''\n          display='block'\n          position='relative'\n          allowFullScreen={true}\n          styles={{ border: '1px solid #FFA630', backgroudColor: '#fff' }}\n        />\n      </MyFullScreen>\n    </div>\n  );\n}\n\nfunction TextsVisualizer(\n  props: ITextsVisualizerProps | any,\n): React.FunctionComponentElement<React.ReactNode> {\n  const tableRef = React.useRef<ITableRef>(null);\n\n  const tableColumns = [\n    {\n      dataKey: 'step',\n      key: 'step',\n      title: 'Step',\n      width: 100,\n    },\n    {\n      dataKey: 'index',\n      key: 'index',\n      title: 'Index',\n      width: 100,\n    },\n    {\n      dataKey: 'text',\n      key: 'text',\n      title: 'Text',\n      width: 0,\n      flexGrow: 1,\n      // TODO: replace with a wrapper component for all types of texts visualization\n      // eslint-disable-next-line react/display-name\n      cellRenderer: ({ cellData }: any) => (\n        <div className='ScrollBar__hidden' style={{ overflow: 'auto' }}>\n          <pre>{cellData}</pre>\n        </div>\n      ),\n    },\n  ];\n  return (\n    <ErrorBoundary>\n      <div\n        className='TextsVisualizer'\n        style={{ height: '100%', overflow: 'auto' }}\n      >\n        {is_all_custom_data(props?.data?.processedValues) ? (\n          (props?.data?.processedValues || [])\n            .reverse()\n            .map((object: any, index: number) => (\n              <div key={'boxes-' + index}>\n                <span>{object.step}</span>\n                {is_moleculer_data(object.text)\n                  ? render_moleculer_data(object.text)\n                  : null}\n                {is_table_data(object.text)\n                  ? render_table_data(object.text)\n                  : null}\n                {is_html_data(object.text)\n                  ? render_html_data(object.text)\n                  : null}\n              </div>\n            ))\n        ) : (\n          <DataList\n            tableRef={tableRef}\n            tableData={props?.data?.processedValues}\n            tableColumns={tableColumns}\n            isLoading={props?.isLoading}\n            searchableKeys={['text']}\n          />\n        )}\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nTextsVisualizer.displayName = 'TextsVisualizer';\n\nexport default React.memo<ITextsVisualizerProps>(TextsVisualizer);\n","import TextsVisualizer from './TextsVisualizer';\n\nexport default TextsVisualizer;\n"],"sourceRoot":""}