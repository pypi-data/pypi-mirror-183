{"version":3,"sources":["pages/RunDetail/TextsVisualizer/TextsVisualizer.tsx","pages/RunDetail/TextsVisualizer/index.ts"],"names":["TextsVisualizer","props","tableRef","React","useRef","tableColumns","dataKey","key","title","width","flexGrow","cellRenderer","cellData","className","style","overflow","context","activeTraceContext","includes","split","reduce","d","i","trim","value","replaceAll","ErrorBoundary","height","data","processedValues","reverse","map","object","index","step","onInit","content","text","miew","run","load","sourceType","fileType","options","settings","editing","interpolateViews","zSprite","url","encodeURIComponent","id","loading","referrerpolicy","display","position","allowFullScreen","styles","border","DataList","tableData","isLoading","searchableKeys","displayName","memo"],"mappings":"0MAaA,SAASA,EACPC,GACkD,IAAD,IAC3CC,EAAWC,IAAMC,OAAkB,MAEnCC,EAAe,CACnB,CACEC,QAAS,OACTC,IAAK,OACLC,MAAO,OACPC,MAAO,KAET,CACEH,QAAS,QACTC,IAAK,QACLC,MAAO,QACPC,MAAO,KAET,CACEH,QAAS,OACTC,IAAK,OACLC,MAAO,OACPC,MAAO,EACPC,SAAU,EAGVC,aAAc,gBAAGC,EAAQ,EAARA,SAAQ,OACvB,qBAAKC,UAAU,oBAAoBC,MAAO,CAAEC,SAAU,QAAS,SAC7D,8BAAMH,SAKRI,GAAoB,OAALf,QAAK,IAALA,OAAK,EAALA,EAAOgB,mBAAmBC,SAAS,MAC/C,OAALjB,QAAK,IAALA,OAAK,EAALA,EAAOgB,mBAAmBE,MAAM,KAAKC,QAAO,SAACC,EAAQC,GACnD,IAAMf,EAAMe,EAAEC,OAAOJ,MAAM,KAAK,GAC1BK,EAAQF,EAAEC,OAAOE,WAAW,IAAK,IAAIN,MAAM,KAAK,GAEtD,OADAE,EAAEd,GAAOiB,EACFH,IACN,IACH,GAUJ,OACE,cAACK,EAAA,EAAa,UACZ,qBACEb,UAAU,kBACVC,MAAO,CAAEa,OAAQ,OAAQZ,SAAU,QAAS,SAE3CC,EAAe,QACR,OAALf,QAAK,IAALA,GAAW,QAAN,EAALA,EAAO2B,YAAI,WAAN,EAAL,EAAaC,kBAAmB,IAC9BC,UACAC,KAAI,SAACC,EAAaC,GAAa,OAC9B,gCACE,+BAAOD,EAAOE,OACd,qBAAKpB,MAAO,CAAEa,OAAQ,SAAU,SACR,SAArBX,EAAe,MACd,cAAC,IAAM,CACLmB,QAvBIC,EAuBmBJ,EAAOK,KAtBhD,SAAWC,GACTA,EAAKC,MACLD,EAAKE,KAAKJ,EAAS,CAAEK,WAAY,YAAaC,SAAU,UAqBxCC,QAAS,CACPC,SAAU,CACRC,SAAS,EACTC,kBAAkB,EAClBC,SAAS,MAKf,cAAC,IAAM,CACLC,IAAK,kBAAoBC,mBAAmBjB,EAAOK,MACnD5B,MAAM,OACNkB,OAAO,QACPuB,IAAS,OAALjD,QAAK,IAALA,OAAK,EAALA,EAAOgB,oBAAqBgB,EAChCkB,QAAQ,OACRtC,UAAU,GACVuC,eAAe,aACf5C,MAAOwB,EAAOE,KACdmB,QAAQ,QACRC,SAAS,WACTC,iBAAiB,EACjBC,OAAQ,CAAEC,OAAQ,2BA3BhB,SAAWxB,GAlBjC,IAAwBG,KAoDhB,cAACsB,EAAA,EAAQ,CACPxD,SAAUA,EACVyD,UAAgB,OAAL1D,QAAK,IAALA,GAAW,QAAN,EAALA,EAAO2B,YAAI,WAAN,EAAL,EAAaC,gBACxBxB,aAAcA,EACduD,UAAgB,OAAL3D,QAAK,IAALA,OAAK,EAALA,EAAO2D,UAClBC,eAAgB,CAAC,cAQ7B7D,EAAgB8D,YAAc,kBAEf3D,UAAM4D,KAA4B/D,GCxHlCA","file":"static/js/TextsVisualizer.js?version=346c9239f5b79f31def0","sourcesContent":["import React from 'react';\nimport Iframe from 'react-iframe';\nimport Viewer from 'miew-react';\n\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport DataList from 'components/kit/DataList';\n\nimport { ITableRef } from 'types/components/Table/Table';\n\nimport { ITextsVisualizerProps } from '../types';\n\nimport './TextsVisualizer.scss';\n\nfunction TextsVisualizer(\n  props: ITextsVisualizerProps | any,\n): React.FunctionComponentElement<React.ReactNode> {\n  const tableRef = React.useRef<ITableRef>(null);\n\n  const tableColumns = [\n    {\n      dataKey: 'step',\n      key: 'step',\n      title: 'Step',\n      width: 100,\n    },\n    {\n      dataKey: 'index',\n      key: 'index',\n      title: 'Index',\n      width: 100,\n    },\n    {\n      dataKey: 'text',\n      key: 'text',\n      title: 'Text',\n      width: 0,\n      flexGrow: 1,\n      // TODO: replace with a wrapper component for all types of texts visualization\n      // eslint-disable-next-line react/display-name\n      cellRenderer: ({ cellData }: any) => (\n        <div className='ScrollBar__hidden' style={{ overflow: 'auto' }}>\n          <pre>{cellData}</pre>\n        </div>\n      ),\n    },\n  ];\n  const context: any = props?.activeTraceContext.includes('=')\n    ? props?.activeTraceContext.split(',').reduce((d: any, i: string) => {\n        const key = i.trim().split('=')[0];\n        const value = i.trim().replaceAll('\"', '').split('=')[1];\n        d[key] = value;\n        return d;\n      }, {})\n    : {};\n\n  function init_molecular(content: string) {\n    function x(miew: any): void {\n      miew.run();\n      miew.load(content, { sourceType: 'immediate', fileType: 'pdb' });\n    }\n    return x;\n  }\n\n  return (\n    <ErrorBoundary>\n      <div\n        className='TextsVisualizer'\n        style={{ height: '100%', overflow: 'auto' }}\n      >\n        {context['dtype'] ? (\n          (props?.data?.processedValues || [])\n            .reverse()\n            .map((object: any, index: string) => (\n              <div key={'boxes-' + index}>\n                <span>{object.step}</span>\n                <div style={{ height: '320px' }}>\n                  {context['dtype'] !== 'html' ? (\n                    <Viewer\n                      onInit={init_molecular(object.text)}\n                      options={{\n                        settings: {\n                          editing: true,\n                          interpolateViews: true,\n                          zSprite: true,\n                        },\n                      }}\n                    />\n                  ) : (\n                    <Iframe\n                      url={'data:text/html,' + encodeURIComponent(object.text)}\n                      width='100%'\n                      height='320px'\n                      id={props?.activeTraceContext + index}\n                      loading='lazy'\n                      className=''\n                      referrerpolicy='unsafe-url'\n                      title={object.step as string}\n                      display='block'\n                      position='relative'\n                      allowFullScreen={true}\n                      styles={{ border: '1px solid #FFA630' }}\n                    />\n                  )}\n                </div>\n              </div>\n            ))\n        ) : (\n          <DataList\n            tableRef={tableRef}\n            tableData={props?.data?.processedValues}\n            tableColumns={tableColumns}\n            isLoading={props?.isLoading}\n            searchableKeys={['text']}\n          />\n        )}\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nTextsVisualizer.displayName = 'TextsVisualizer';\n\nexport default React.memo<ITextsVisualizerProps>(TextsVisualizer);\n","import TextsVisualizer from './TextsVisualizer';\n\nexport default TextsVisualizer;\n"],"sourceRoot":""}