<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="0" skipped="0" tests="161" time="1.765" timestamp="2022-12-27T22:17:42.854451" hostname="fv-az842-454"><testcase classname="tests.test_examples" name="test_example[./examples/example-03.py]" file="tests/test_examples.py" line="8" time="0.159" /><testcase classname="tests.test_examples" name="test_example[./examples/example-02.py]" file="tests/test_examples.py" line="8" time="0.146" /><testcase classname="tests.test_examples" name="test_example[./examples/example-01.py]" file="tests/test_examples.py" line="8" time="0.144" /><testcase classname="tests.test_fn_exec" name="test_execute_function" file="tests/test_fn_exec.py" line="24" time="0.002" /><testcase classname="tests.test_fn_exec" name="test_executor" file="tests/test_fn_exec.py" line="65" time="0.002" /><testcase classname="tests.test_fn_exec" name="test_executor_with_given_scoped_services" file="tests/test_fn_exec.py" line="95" time="0.002" /><testcase classname="tests.test_fn_exec" name="test_async_executor" file="tests/test_fn_exec.py" line="126" time="0.003" /><testcase classname="tests.test_services" name="test_standard_param_name[CamelCase-camel_case]" file="tests/test_services.py" line="115" time="0.001" /><testcase classname="tests.test_services" name="test_standard_param_name[HTTPResponse-http_response]" file="tests/test_services.py" line="115" time="0.001" /><testcase classname="tests.test_services" name="test_standard_param_name[ICatsRepository-icats_repository]" file="tests/test_services.py" line="115" time="0.001" /><testcase classname="tests.test_services" name="test_standard_param_name[Cat-cat]" file="tests/test_services.py" line="115" time="0.001" /><testcase classname="tests.test_services" name="test_standard_param_name[UFO-ufo]" file="tests/test_services.py" line="115" time="0.001" /><testcase classname="tests.test_services" name="test_singleton_by_instance" file="tests/test_services.py" line="130" time="0.001" /><testcase classname="tests.test_services" name="test_transient_by_type_without_parameters" file="tests/test_services.py" line="141" time="0.012" /><testcase classname="tests.test_services" name="test_transient_by_type_with_parameters" file="tests/test_services.py" line="154" time="0.001" /><testcase classname="tests.test_services" name="test_add_transient_shortcut" file="tests/test_services.py" line="171" time="0.001" /><testcase classname="tests.test_services" name="test_raises_for_overriding_service" file="tests/test_services.py" line="188" time="0.001" /><testcase classname="tests.test_services" name="test_raises_for_circular_dependency" file="tests/test_services.py" line="208" time="0.018" /><testcase classname="tests.test_services" name="test_raises_for_circular_dependency_class_annotation" file="tests/test_services.py" line="218" time="0.008" /><testcase classname="tests.test_services" name="test_raises_for_circular_dependency_with_dynamic_resolver" file="tests/test_services.py" line="228" time="0.015" /><testcase classname="tests.test_services" name="test_raises_for_deep_circular_dependency_with_dynamic_resolver" file="tests/test_services.py" line="237" time="0.013" /><testcase classname="tests.test_services" name="test_does_not_raise_for_deep_circular_dependency_with_one_factory" file="tests/test_services.py" line="248" time="0.001" /><testcase classname="tests.test_services" name="test_circular_dependency_is_supported_by_factory" file="tests/test_services.py" line="270" time="0.001" /><testcase classname="tests.test_services" name="test_add_instance_allows_for_circular_classes" file="tests/test_services.py" line="286" time="0.001" /><testcase classname="tests.test_services" name="test_add_instance_with_declared_type" file="tests/test_services.py" line="303" time="0.001" /><testcase classname="tests.test_services" name="test_raises_for_optional_parameter" file="tests/test_services.py" line="312" time="0.001" /><testcase classname="tests.test_services" name="test_raises_for_nested_circular_dependency" file="tests/test_services.py" line="323" time="0.014" /><testcase classname="tests.test_services" name="test_interdependencies" file="tests/test_services.py" line="334" time="0.002" /><testcase classname="tests.test_services" name="test_transient_service" file="tests/test_services.py" line="350" time="0.001" /><testcase classname="tests.test_services" name="test_singleton_services" file="tests/test_services.py" line="362" time="0.001" /><testcase classname="tests.test_services" name="test_scoped_services_context_used_more_than_once" file="tests/test_services.py" line="379" time="0.002" /><testcase classname="tests.test_services" name="test_scoped_services_context_used_more_than_once_manual_dispose" file="tests/test_services.py" line="429" time="0.001" /><testcase classname="tests.test_services" name="test_transient_services" file="tests/test_services.py" line="441" time="0.001" /><testcase classname="tests.test_services" name="test_scoped_services" file="tests/test_services.py" line="460" time="0.001" /><testcase classname="tests.test_services" name="test_scoped_services_with_shortcut" file="tests/test_services.py" line="477" time="0.001" /><testcase classname="tests.test_services" name="test_resolution_by_parameter_name" file="tests/test_services.py" line="494" time="0.001" /><testcase classname="tests.test_services" name="test_resolve_singleton_by_parameter_name" file="tests/test_services.py" line="508" time="0.001" /><testcase classname="tests.test_services" name="test_service_collection_contains" file="tests/test_services.py" line="524" time="0.001" /><testcase classname="tests.test_services" name="test_service_provider_contains" file="tests/test_services.py" line="532" time="0.001" /><testcase classname="tests.test_services" name="test_exact_alias" file="tests/test_services.py" line="542" time="0.002" /><testcase classname="tests.test_services" name="test_additional_alias" file="tests/test_services.py" line="562" time="0.003" /><testcase classname="tests.test_services" name="test_get_service_by_name_or_alias" file="tests/test_services.py" line="598" time="0.002" /><testcase classname="tests.test_services" name="test_missing_service_raises_exception" file="tests/test_services.py" line="612" time="0.001" /><testcase classname="tests.test_services" name="test_missing_service_can_return_default" file="tests/test_services.py" line="620" time="0.001" /><testcase classname="tests.test_services" name="test_by_factory_type_annotation_simple" file="tests/test_services.py" line="628" time="0.001" /><testcase classname="tests.test_services" name="test_by_factory_type_annotation_simple_local" file="tests/test_services.py" line="642" time="0.002" /><testcase classname="tests.test_services" name="test_by_factory_type_annotation[add_singleton_by_factory]" file="tests/test_services.py" line="661" time="0.001" /><testcase classname="tests.test_services" name="test_by_factory_type_annotation[add_transient_by_factory]" file="tests/test_services.py" line="661" time="0.001" /><testcase classname="tests.test_services" name="test_by_factory_type_annotation[add_scoped_by_factory]" file="tests/test_services.py" line="661" time="0.001" /><testcase classname="tests.test_services" name="test_invalid_factory_too_many_arguments_throws[add_singleton_by_factory]" file="tests/test_services.py" line="701" time="0.001" /><testcase classname="tests.test_services" name="test_invalid_factory_too_many_arguments_throws[add_transient_by_factory]" file="tests/test_services.py" line="701" time="0.001" /><testcase classname="tests.test_services" name="test_invalid_factory_too_many_arguments_throws[add_scoped_by_factory]" file="tests/test_services.py" line="701" time="0.001" /><testcase classname="tests.test_services" name="test_add_singleton_by_factory_given_type[add_singleton_by_factory]" file="tests/test_services.py" line="728" time="0.001" /><testcase classname="tests.test_services" name="test_add_singleton_by_factory_given_type[add_transient_by_factory]" file="tests/test_services.py" line="728" time="0.002" /><testcase classname="tests.test_services" name="test_add_singleton_by_factory_given_type[add_scoped_by_factory]" file="tests/test_services.py" line="728" time="0.001" /><testcase classname="tests.test_services" name="test_add_singleton_by_factory_raises_for_missing_type[add_singleton_by_factory]" file="tests/test_services.py" line="768" time="0.001" /><testcase classname="tests.test_services" name="test_add_singleton_by_factory_raises_for_missing_type[add_transient_by_factory]" file="tests/test_services.py" line="768" time="0.001" /><testcase classname="tests.test_services" name="test_add_singleton_by_factory_raises_for_missing_type[add_scoped_by_factory]" file="tests/test_services.py" line="768" time="0.001" /><testcase classname="tests.test_services" name="test_singleton_by_provider" file="tests/test_services.py" line="784" time="0.001" /><testcase classname="tests.test_services" name="test_singleton_by_provider_with_shortcut" file="tests/test_services.py" line="799" time="0.001" /><testcase classname="tests.test_services" name="test_singleton_by_provider_both_singletons" file="tests/test_services.py" line="814" time="0.001" /><testcase classname="tests.test_services" name="test_type_hints_precedence" file="tests/test_services.py" line="832" time="0.002" /><testcase classname="tests.test_services" name="test_type_hints_precedence_with_shortcuts" file="tests/test_services.py" line="850" time="0.002" /><testcase classname="tests.test_services" name="test_proper_handling_of_inheritance" file="tests/test_services.py" line="868" time="0.002" /><testcase classname="tests.test_services" name="test_by_factory_with_different_parameters[add_singleton_by_factory-cat_factory_no_args]" file="tests/test_services.py" line="904" time="0.001" /><testcase classname="tests.test_services" name="test_by_factory_with_different_parameters[add_singleton_by_factory-cat_factory_with_context]" file="tests/test_services.py" line="904" time="0.001" /><testcase classname="tests.test_services" name="test_by_factory_with_different_parameters[add_singleton_by_factory-cat_factory_with_context_and_activating_type]" file="tests/test_services.py" line="904" time="0.002" /><testcase classname="tests.test_services" name="test_by_factory_with_different_parameters[add_transient_by_factory-cat_factory_no_args]" file="tests/test_services.py" line="904" time="0.001" /><testcase classname="tests.test_services" name="test_by_factory_with_different_parameters[add_transient_by_factory-cat_factory_with_context]" file="tests/test_services.py" line="904" time="0.003" /><testcase classname="tests.test_services" name="test_by_factory_with_different_parameters[add_transient_by_factory-cat_factory_with_context_and_activating_type]" file="tests/test_services.py" line="904" time="0.001" /><testcase classname="tests.test_services" name="test_by_factory_with_different_parameters[add_scoped_by_factory-cat_factory_no_args]" file="tests/test_services.py" line="904" time="0.001" /><testcase classname="tests.test_services" name="test_by_factory_with_different_parameters[add_scoped_by_factory-cat_factory_with_context]" file="tests/test_services.py" line="904" time="0.001" /><testcase classname="tests.test_services" name="test_by_factory_with_different_parameters[add_scoped_by_factory-cat_factory_with_context_and_activating_type]" file="tests/test_services.py" line="904" time="0.001" /><testcase classname="tests.test_services" name="test_factory_can_receive_activating_type_as_parameter[add_transient_by_factory]" file="tests/test_services.py" line="934" time="0.002" /><testcase classname="tests.test_services" name="test_factory_can_receive_activating_type_as_parameter[add_scoped_by_factory]" file="tests/test_services.py" line="934" time="0.002" /><testcase classname="tests.test_services" name="test_factory_can_receive_activating_type_as_parameter_nested_resolution" file="tests/test_services.py" line="994" time="0.002" /><testcase classname="tests.test_services" name="test_factory_can_receive_activating_type_as_parameter_nested_resolution_many" file="tests/test_services.py" line="1039" time="0.003" /><testcase classname="tests.test_services" name="test_service_provider_supports_set_by_class" file="tests/test_services.py" line="1111" time="0.001" /><testcase classname="tests.test_services" name="test_service_provider_supports_set_by_name" file="tests/test_services.py" line="1129" time="0.001" /><testcase classname="tests.test_services" name="test_service_provider_supports_set_and_get_item_by_class" file="tests/test_services.py" line="1142" time="0.001" /><testcase classname="tests.test_services" name="test_service_provider_supports_set_and_get_item_by_name" file="tests/test_services.py" line="1160" time="0.001" /><testcase classname="tests.test_services" name="test_service_provider_supports_set_simple_values" file="tests/test_services.py" line="1173" time="0.001" /><testcase classname="tests.test_services" name="test_container_handles_class_without_init" file="tests/test_services.py" line="1185" time="0.001" /><testcase classname="tests.test_services" name="test_raises_invalid_factory_for_non_callable" file="tests/test_services.py" line="1198" time="0.001" /><testcase classname="tests.test_services" name="test_set_alias_raises_in_strict_mode" file="tests/test_services.py" line="1205" time="0.001" /><testcase classname="tests.test_services" name="test_set_alias_raises_if_alias_is_defined" file="tests/test_services.py" line="1212" time="0.001" /><testcase classname="tests.test_services" name="test_set_alias_requires_configured_type" file="tests/test_services.py" line="1221" time="0.001" /><testcase classname="tests.test_services" name="test_set_aliases" file="tests/test_services.py" line="1230" time="0.001" /><testcase classname="tests.test_services" name="test_add_alias_raises_in_strict_mode" file="tests/test_services.py" line="1248" time="0.001" /><testcase classname="tests.test_services" name="test_add_alias_raises_if_alias_is_defined" file="tests/test_services.py" line="1255" time="0.001" /><testcase classname="tests.test_services" name="test_add_aliases" file="tests/test_services.py" line="1264" time="0.001" /><testcase classname="tests.test_services" name="test_add_alias_requires_configured_type" file="tests/test_services.py" line="1286" time="0.001" /><testcase classname="tests.test_services" name="test_build_provider_raises_for_missing_transient_parameter" file="tests/test_services.py" line="1295" time="0.001" /><testcase classname="tests.test_services" name="test_build_provider_raises_for_missing_scoped_parameter" file="tests/test_services.py" line="1304" time="0.001" /><testcase classname="tests.test_services" name="test_build_provider_raises_for_missing_singleton_parameter" file="tests/test_services.py" line="1313" time="0.002" /><testcase classname="tests.test_services" name="test_overriding_alias_from_class_name_throws" file="tests/test_services.py" line="1322" time="0.001" /><testcase classname="tests.test_services" name="test_cannot_resolve_parameter_in_strict_mode_throws" file="tests/test_services.py" line="1345" time="0.001" /><testcase classname="tests.test_services" name="test_services_set_throws_if_service_is_already_defined" file="tests/test_services.py" line="1363" time="0.001" /><testcase classname="tests.test_services" name="test_scoped_services_exact" file="tests/test_services.py" line="1372" time="0.002" /><testcase classname="tests.test_services" name="test_scoped_services_abstract" file="tests/test_services.py" line="1405" time="0.002" /><testcase classname="tests.test_services" name="test_instance_resolver_representation" file="tests/test_services.py" line="1449" time="0.001" /><testcase classname="tests.test_services" name="test_factories_activating_transient_type_consistency[add_transient_by_factory]" file="tests/test_services.py" line="1458" time="0.001" /><testcase classname="tests.test_services" name="test_factories_activating_transient_type_consistency[add_scoped_by_factory]" file="tests/test_services.py" line="1458" time="0.002" /><testcase classname="tests.test_services" name="test_factories_activating_transient_type_consistency[add_singleton_by_factory]" file="tests/test_services.py" line="1458" time="0.002" /><testcase classname="tests.test_services" name="test_factories_activating_scoped_type_consistency[add_transient_by_factory]" file="tests/test_services.py" line="1499" time="0.002" /><testcase classname="tests.test_services" name="test_factories_activating_scoped_type_consistency[add_scoped_by_factory]" file="tests/test_services.py" line="1499" time="0.002" /><testcase classname="tests.test_services" name="test_factories_activating_scoped_type_consistency[add_singleton_by_factory]" file="tests/test_services.py" line="1499" time="0.004" /><testcase classname="tests.test_services" name="test_factories_activating_singleton_type_consistency[add_transient_by_factory]" file="tests/test_services.py" line="1540" time="0.002" /><testcase classname="tests.test_services" name="test_factories_activating_singleton_type_consistency[add_scoped_by_factory]" file="tests/test_services.py" line="1540" time="0.002" /><testcase classname="tests.test_services" name="test_factories_activating_singleton_type_consistency[add_singleton_by_factory]" file="tests/test_services.py" line="1540" time="0.001" /><testcase classname="tests.test_services" name="test_factories_type_transient_consistency_nested[add_transient_by_factory]" file="tests/test_services.py" line="1581" time="0.003" /><testcase classname="tests.test_services" name="test_factories_type_transient_consistency_nested[add_scoped_by_factory]" file="tests/test_services.py" line="1581" time="0.003" /><testcase classname="tests.test_services" name="test_factories_type_transient_consistency_nested[add_singleton_by_factory]" file="tests/test_services.py" line="1581" time="0.003" /><testcase classname="tests.test_services" name="test_factories_type_scoped_consistency_nested[add_transient_by_factory]" file="tests/test_services.py" line="1632" time="0.002" /><testcase classname="tests.test_services" name="test_factories_type_scoped_consistency_nested[add_scoped_by_factory]" file="tests/test_services.py" line="1632" time="0.002" /><testcase classname="tests.test_services" name="test_factories_type_scoped_consistency_nested[add_singleton_by_factory]" file="tests/test_services.py" line="1632" time="0.002" /><testcase classname="tests.test_services" name="test_factories_type_singleton_consistency_nested[add_transient_by_factory]" file="tests/test_services.py" line="1683" time="0.002" /><testcase classname="tests.test_services" name="test_factories_type_singleton_consistency_nested[add_scoped_by_factory]" file="tests/test_services.py" line="1683" time="0.002" /><testcase classname="tests.test_services" name="test_factories_type_singleton_consistency_nested[add_singleton_by_factory]" file="tests/test_services.py" line="1683" time="0.002" /><testcase classname="tests.test_services" name="test_annotation_resolution" file="tests/test_services.py" line="1734" time="0.001" /><testcase classname="tests.test_services" name="test_annotation_resolution_scoped" file="tests/test_services.py" line="1757" time="0.001" /><testcase classname="tests.test_services" name="test_annotation_nested_resolution_1" file="tests/test_services.py" line="1787" time="0.001" /><testcase classname="tests.test_services" name="test_annotation_nested_resolution_2" file="tests/test_services.py" line="1827" time="0.013" /><testcase classname="tests.test_services" name="test_annotation_resolution_singleton" file="tests/test_services.py" line="1877" time="0.001" /><testcase classname="tests.test_services" name="test_annotation_resolution_transient" file="tests/test_services.py" line="1903" time="0.001" /><testcase classname="tests.test_services" name="test_annotations_abstract_type_transient_service" file="tests/test_services.py" line="1934" time="0.001" /><testcase classname="tests.test_services" name="test_support_for_dataclasses" file="tests/test_services.py" line="1962" time="0.002" /><testcase classname="tests.test_services" name="test_list" file="tests/test_services.py" line="1987" time="0.001" /><testcase classname="tests.test_services" name="test_list_generic_alias" file="tests/test_services.py" line="2004" time="0.001" /><testcase classname="tests.test_services" name="test_mapping_generic_alias" file="tests/test_services.py" line="2029" time="0.001" /><testcase classname="tests.test_services" name="test_dict_generic_alias" file="tests/test_services.py" line="2054" time="0.001" /><testcase classname="tests.test_services" name="test_list_generic_alias_list" file="tests/test_services.py" line="2079" time="0.001" /><testcase classname="tests.test_services" name="test_dict_generic_alias_dict" file="tests/test_services.py" line="2105" time="0.001" /><testcase classname="tests.test_services" name="test_generic" file="tests/test_services.py" line="2131" time="0.002" /><testcase classname="tests.test_services" name="test_iterables_annotations_singleton[Iterable-value0]" file="tests/test_services.py" line="2171" time="0.002" /><testcase classname="tests.test_services" name="test_iterables_annotations_singleton[Iterable-value1]" file="tests/test_services.py" line="2171" time="0.001" /><testcase classname="tests.test_services" name="test_iterables_annotations_singleton[List-value2]" file="tests/test_services.py" line="2171" time="0.001" /><testcase classname="tests.test_services" name="test_iterables_annotations_singleton[Tuple-value3]" file="tests/test_services.py" line="2171" time="0.002" /><testcase classname="tests.test_services" name="test_iterables_annotations_singleton[Sequence-value4]" file="tests/test_services.py" line="2171" time="0.001" /><testcase classname="tests.test_services" name="test_iterables_annotations_singleton[List-value5]" file="tests/test_services.py" line="2171" time="0.001" /><testcase classname="tests.test_services" name="test_iterables_annotations_scoped_factory[Iterable-value0]" file="tests/test_services.py" line="2190" time="0.002" /><testcase classname="tests.test_services" name="test_iterables_annotations_scoped_factory[Iterable-value1]" file="tests/test_services.py" line="2190" time="0.002" /><testcase classname="tests.test_services" name="test_iterables_annotations_scoped_factory[List-value2]" file="tests/test_services.py" line="2190" time="0.001" /><testcase classname="tests.test_services" name="test_iterables_annotations_scoped_factory[Tuple-value3]" file="tests/test_services.py" line="2190" time="0.002" /><testcase classname="tests.test_services" name="test_iterables_annotations_scoped_factory[Sequence-value4]" file="tests/test_services.py" line="2190" time="0.001" /><testcase classname="tests.test_services" name="test_iterables_annotations_scoped_factory[List-value5]" file="tests/test_services.py" line="2190" time="0.002" /><testcase classname="tests.test_services" name="test_iterables_annotations_transient_factory[Iterable-value0]" file="tests/test_services.py" line="2211" time="0.002" /><testcase classname="tests.test_services" name="test_iterables_annotations_transient_factory[Iterable-value1]" file="tests/test_services.py" line="2211" time="0.002" /><testcase classname="tests.test_services" name="test_iterables_annotations_transient_factory[List-value2]" file="tests/test_services.py" line="2211" time="0.002" /><testcase classname="tests.test_services" name="test_iterables_annotations_transient_factory[Tuple-value3]" file="tests/test_services.py" line="2211" time="0.002" /><testcase classname="tests.test_services" name="test_iterables_annotations_transient_factory[Sequence-value4]" file="tests/test_services.py" line="2211" time="0.002" /><testcase classname="tests.test_services" name="test_iterables_annotations_transient_factory[List-value5]" file="tests/test_services.py" line="2211" time="0.002" /><testcase classname="tests.test_services" name="test_factory_without_locals_raises" file="tests/test_services.py" line="2232" time="0.001" /><testcase classname="tests.test_services" name="test_factory_with_locals_get_annotations" file="tests/test_services.py" line="2240" time="0.002" /><testcase classname="tests.test_services" name="test_deps_github_scenario" file="tests/test_services.py" line="2250" time="0.002" /><testcase classname="tests.test_services" name="test_container_protocol" file="tests/test_services.py" line="2309" time="0.002" /><testcase classname="tests.test_services" name="test_container_protocol_register" file="tests/test_services.py" line="2328" time="0.001" /><testcase classname="tests.test_services" name="test_container_protocol_any_argument" file="tests/test_services.py" line="2343" time="0.001" /><testcase classname="tests.test_services" name="test_container_register_instance" file="tests/test_services.py" line="2355" time="0.001" /><testcase classname="tests.test_services" name="test_import_version" file="tests/test_services.py" line="2365" time="0.002" /><testcase classname="tests.test_services" name="test_container_iter" file="tests/test_services.py" line="2369" time="0.001" /></testsuite></testsuites>