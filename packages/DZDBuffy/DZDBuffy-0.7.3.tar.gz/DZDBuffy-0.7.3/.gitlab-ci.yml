image: python:3

stages:
  - test
  - deploy-to-pypi
  - buffy-server-container-image-build-prod
  - buffy-server-container-image-build-latest
  - build-and-deploy-docs

.prepare-python:
  before_script:
    - python -V # Print out python version for debugging
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate

test:
  stage: test
  extends: .prepare-python
  image: python:3
  variables:
    CI_REDIS_HOST: redis01
  services:
    - name: redis:latest
      alias: redis01

  script:
    - python3 --version
    - python3 -m pip install .[test]
    - python3 tests/full_integration_test.py

deploy-to-pypi:
  stage: deploy-to-pypi
  extends: .prepare-python
  only:
    - tags
  needs:
    - test
  script:
    - python3 -m pip install .
    - python3 setup.py sdist bdist_wheel
    - python3 -m pip install twine
    #- TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
    - TWINE_PASSWORD=${PYPI_TOKEN} TWINE_USERNAME=__token__ python -m twine upload dist/*

buffy-server-container-image-build-prod:
  stage: buffy-server-container-image-build-prod
  image: docker:git
  only:
    - tags
  needs:
    - test
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --no-cache . -t $CI_REGISTRY_IMAGE:prod -t $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE --all-tags

buffy-server-container-image-build-latest:
  stage: buffy-server-container-image-build-latest
  image: docker:git
  only:
    # Only "master" should be tagged "latest"
    - master
  needs:
    - test
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --no-cache . -t $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE --all-tags

pages:
  stage: build-and-deploy-docs
  needs:
    - test
  rules:
    # run if manual schedule with variable DOC_BUILD_ONLY is started or when a tag is released
    - if: $DOC_BUILD_ONLY == "1"
    - if: $CI_COMMIT_TAG
  script:
    - python3 -m pip install .[docs]
    # build docs localy
    - ./make_docs.sh
    # clone the remote github repo, which will be the target of the doc files
    - git config --global user.email "dzdconnect@helmholtz-muenchen.de"
    - git config --global user.name "Docs Pipeline"
    - git clone https://github.com/dzd-ev/buffy-docs.github.io.git buffy-docs
    - cd buffy-docs
    - shopt -s extglob
    # Wipe the repo besided license file and git config
    - rm -r !(LICENSE|.git)
    # Copy local build documentation into the github repo and commit/push to github. Github will build the pages automagic
    - cp -r ../public/* .
    - git add --all
    - git commit -m ${CI_COMMIT_TAG:-manual_schedule}
    - git remote set-url origin https://dzd-ev:$GITHUB_DZDEV_ACCESS_TOKEN@github.com/dzd-ev/buffy-docs.github.io.git
    - git push origin main
