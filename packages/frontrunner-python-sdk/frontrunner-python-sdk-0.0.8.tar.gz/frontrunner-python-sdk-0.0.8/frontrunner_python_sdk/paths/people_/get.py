# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from frontrunner_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from frontrunner_python_sdk import schemas  # noqa: F401

from frontrunner_python_sdk.model.person import Person

from . import path

# query params
AgeGroupSchema = schemas.StrSchema
BookmarkedSchema = schemas.BoolSchema
BoxQuerySchema = schemas.StrSchema
EmailSchema = schemas.StrSchema
NearLocationSchema = schemas.StrSchema
PhoneSchema = schemas.StrSchema
PrimaryAddrCitySchema = schemas.StrSchema
PrimaryAddrCountySchema = schemas.StrSchema
PrimaryAddrStateSchema = schemas.StrSchema
PrimaryAddrZipSchema = schemas.StrSchema
SearchSchema = schemas.StrSchema
SearchLocationOnlySchema = schemas.BoolSchema


class SortSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
        
        
            class MetaOapg:
                enum_value_to_name = {
                    "-date_added": "DATE_ADDED",
                    "-date_updated": "DATE_UPDATED",
                    "-dob": "DOB",
                    "-first_name": "FIRST_NAME",
                    "-last_name": "LAST_NAME",
                    "date_added": "DATE_ADDED",
                    "date_updated": "DATE_UPDATED",
                    "dob": "DOB",
                    "first_name": "FIRST_NAME",
                    "last_name": "LAST_NAME",
                }
            
            @schemas.classproperty
            def DATE_ADDED(cls):
                return cls("-date_added")
            
            @schemas.classproperty
            def DATE_UPDATED(cls):
                return cls("-date_updated")
            
            @schemas.classproperty
            def DOB(cls):
                return cls("-dob")
            
            @schemas.classproperty
            def FIRST_NAME(cls):
                return cls("-first_name")
            
            @schemas.classproperty
            def LAST_NAME(cls):
                return cls("-last_name")
            
            @schemas.classproperty
            def DATE_ADDED(cls):
                return cls("date_added")
            
            @schemas.classproperty
            def DATE_UPDATED(cls):
                return cls("date_updated")
            
            @schemas.classproperty
            def DOB(cls):
                return cls("dob")
            
            @schemas.classproperty
            def FIRST_NAME(cls):
                return cls("first_name")
            
            @schemas.classproperty
            def LAST_NAME(cls):
                return cls("last_name")

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SortSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
TagsSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'age_group': typing.Union[AgeGroupSchema, str, ],
        'bookmarked': typing.Union[BookmarkedSchema, bool, ],
        'box_query': typing.Union[BoxQuerySchema, str, ],
        'email': typing.Union[EmailSchema, str, ],
        'near_location': typing.Union[NearLocationSchema, str, ],
        'phone': typing.Union[PhoneSchema, str, ],
        'primary_addr__city': typing.Union[PrimaryAddrCitySchema, str, ],
        'primary_addr__county': typing.Union[PrimaryAddrCountySchema, str, ],
        'primary_addr__state': typing.Union[PrimaryAddrStateSchema, str, ],
        'primary_addr__zip': typing.Union[PrimaryAddrZipSchema, str, ],
        'search': typing.Union[SearchSchema, str, ],
        'search_location_only': typing.Union[SearchLocationOnlySchema, bool, ],
        'sort': typing.Union[SortSchema, list, tuple, ],
        'tags': typing.Union[TagsSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_age_group = api_client.QueryParameter(
    name="age_group",
    style=api_client.ParameterStyle.FORM,
    schema=AgeGroupSchema,
    explode=True,
)
request_query_bookmarked = api_client.QueryParameter(
    name="bookmarked",
    style=api_client.ParameterStyle.FORM,
    schema=BookmarkedSchema,
    explode=True,
)
request_query_box_query = api_client.QueryParameter(
    name="box_query",
    style=api_client.ParameterStyle.FORM,
    schema=BoxQuerySchema,
    explode=True,
)
request_query_email = api_client.QueryParameter(
    name="email",
    style=api_client.ParameterStyle.FORM,
    schema=EmailSchema,
    explode=True,
)
request_query_near_location = api_client.QueryParameter(
    name="near_location",
    style=api_client.ParameterStyle.FORM,
    schema=NearLocationSchema,
    explode=True,
)
request_query_phone = api_client.QueryParameter(
    name="phone",
    style=api_client.ParameterStyle.FORM,
    schema=PhoneSchema,
    explode=True,
)
request_query_primary_addr__city = api_client.QueryParameter(
    name="primary_addr__city",
    style=api_client.ParameterStyle.FORM,
    schema=PrimaryAddrCitySchema,
    explode=True,
)
request_query_primary_addr__county = api_client.QueryParameter(
    name="primary_addr__county",
    style=api_client.ParameterStyle.FORM,
    schema=PrimaryAddrCountySchema,
    explode=True,
)
request_query_primary_addr__state = api_client.QueryParameter(
    name="primary_addr__state",
    style=api_client.ParameterStyle.FORM,
    schema=PrimaryAddrStateSchema,
    explode=True,
)
request_query_primary_addr__zip = api_client.QueryParameter(
    name="primary_addr__zip",
    style=api_client.ParameterStyle.FORM,
    schema=PrimaryAddrZipSchema,
    explode=True,
)
request_query_search = api_client.QueryParameter(
    name="search",
    style=api_client.ParameterStyle.FORM,
    schema=SearchSchema,
    explode=True,
)
request_query_search_location_only = api_client.QueryParameter(
    name="search_location_only",
    style=api_client.ParameterStyle.FORM,
    schema=SearchLocationOnlySchema,
    explode=True,
)
request_query_sort = api_client.QueryParameter(
    name="sort",
    style=api_client.ParameterStyle.FORM,
    schema=SortSchema,
)
request_query_tags = api_client.QueryParameter(
    name="tags",
    style=api_client.ParameterStyle.FORM,
    schema=TagsSchema,
    explode=True,
)
_auth = [
    'basicAuth',
    'cookieAuth',
    'firebaseAuth',
    'tokenAuth',
]


class SchemaFor200ResponseBodyApplicationJson(
    schemas.ListSchema
):


    class MetaOapg:
        
        @staticmethod
        def items() -> typing.Type['Person']:
            return Person

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple['Person'], typing.List['Person']],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> 'Person':
        return super().__getitem__(i)


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _people_list_oapg(
        self: api_client.Api,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_age_group,
            request_query_bookmarked,
            request_query_box_query,
            request_query_email,
            request_query_near_location,
            request_query_phone,
            request_query_primary_addr__city,
            request_query_primary_addr__county,
            request_query_primary_addr__state,
            request_query_primary_addr__zip,
            request_query_search,
            request_query_search_location_only,
            request_query_sort,
            request_query_tags,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class PeopleList(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def people_list(
        self: BaseApi,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._people_list_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def get(
        self: BaseApi,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._people_list_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


