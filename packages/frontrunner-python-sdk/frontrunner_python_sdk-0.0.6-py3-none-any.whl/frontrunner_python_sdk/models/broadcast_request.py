# coding: utf-8

"""
    FrontRunner API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from frontrunner_python_sdk.configuration import Configuration


class BroadcastRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'contact_list': 'ContactListRequest',
        'delivery_report': 'DeliveryReportRequest',
        'description': 'str',
        'message': 'str',
        'delivery_count': 'int',
        'status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'contact_list': 'contact_list',
        'delivery_report': 'delivery_report',
        'description': 'description',
        'message': 'message',
        'delivery_count': 'delivery_count',
        'status': 'status'
    }

    def __init__(self, id=None, contact_list=None, delivery_report=None, description=None, message=None, delivery_count=None, status=None, local_vars_configuration=None):  # noqa: E501
        """BroadcastRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._contact_list = None
        self._delivery_report = None
        self._description = None
        self._message = None
        self._delivery_count = None
        self._status = None
        self.discriminator = None

        self.id = id
        self.contact_list = contact_list
        self.delivery_report = delivery_report
        if description is not None:
            self.description = description
        if message is not None:
            self.message = message
        self.delivery_count = delivery_count
        if status is not None:
            self.status = status

    @property
    def id(self):
        """Gets the id of this BroadcastRequest.  # noqa: E501


        :return: The id of this BroadcastRequest.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BroadcastRequest.


        :param id: The id of this BroadcastRequest.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and id > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and id < 0):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def contact_list(self):
        """Gets the contact_list of this BroadcastRequest.  # noqa: E501


        :return: The contact_list of this BroadcastRequest.  # noqa: E501
        :rtype: ContactListRequest
        """
        return self._contact_list

    @contact_list.setter
    def contact_list(self, contact_list):
        """Sets the contact_list of this BroadcastRequest.


        :param contact_list: The contact_list of this BroadcastRequest.  # noqa: E501
        :type: ContactListRequest
        """

        self._contact_list = contact_list

    @property
    def delivery_report(self):
        """Gets the delivery_report of this BroadcastRequest.  # noqa: E501


        :return: The delivery_report of this BroadcastRequest.  # noqa: E501
        :rtype: DeliveryReportRequest
        """
        return self._delivery_report

    @delivery_report.setter
    def delivery_report(self, delivery_report):
        """Sets the delivery_report of this BroadcastRequest.


        :param delivery_report: The delivery_report of this BroadcastRequest.  # noqa: E501
        :type: DeliveryReportRequest
        """

        self._delivery_report = delivery_report

    @property
    def description(self):
        """Gets the description of this BroadcastRequest.  # noqa: E501


        :return: The description of this BroadcastRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BroadcastRequest.


        :param description: The description of this BroadcastRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 250):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `250`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) < 1):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    @property
    def message(self):
        """Gets the message of this BroadcastRequest.  # noqa: E501


        :return: The message of this BroadcastRequest.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this BroadcastRequest.


        :param message: The message of this BroadcastRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                message is not None and len(message) < 1):
            raise ValueError("Invalid value for `message`, length must be greater than or equal to `1`")  # noqa: E501

        self._message = message

    @property
    def delivery_count(self):
        """Gets the delivery_count of this BroadcastRequest.  # noqa: E501


        :return: The delivery_count of this BroadcastRequest.  # noqa: E501
        :rtype: int
        """
        return self._delivery_count

    @delivery_count.setter
    def delivery_count(self, delivery_count):
        """Sets the delivery_count of this BroadcastRequest.


        :param delivery_count: The delivery_count of this BroadcastRequest.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                delivery_count is not None and delivery_count > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `delivery_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                delivery_count is not None and delivery_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `delivery_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._delivery_count = delivery_count

    @property
    def status(self):
        """Gets the status of this BroadcastRequest.  # noqa: E501


        :return: The status of this BroadcastRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BroadcastRequest.


        :param status: The status of this BroadcastRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["ABORTED", "SENDING", "COMPLETED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BroadcastRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BroadcastRequest):
            return True

        return self.to_dict() != other.to_dict()
