# coding: utf-8

"""
    FrontRunner API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from frontrunner_python_sdk.configuration import Configuration


class PersonRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'first_name': 'str',
        'last_name': 'str',
        'dob': 'date',
        'date_added': 'date',
        'date_updated': 'date',
        'email': 'str',
        'phone': 'str',
        'primary_addr': 'AddressRequest',
        'tags': 'list[PersonTagRequest]',
        'bookmarked': 'bool'
    }

    attribute_map = {
        'first_name': 'first_name',
        'last_name': 'last_name',
        'dob': 'dob',
        'date_added': 'date_added',
        'date_updated': 'date_updated',
        'email': 'email',
        'phone': 'phone',
        'primary_addr': 'primary_addr',
        'tags': 'tags',
        'bookmarked': 'bookmarked'
    }

    def __init__(self, first_name=None, last_name=None, dob=None, date_added=None, date_updated=None, email=None, phone=None, primary_addr=None, tags=None, bookmarked=None, local_vars_configuration=None):  # noqa: E501
        """PersonRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._first_name = None
        self._last_name = None
        self._dob = None
        self._date_added = None
        self._date_updated = None
        self._email = None
        self._phone = None
        self._primary_addr = None
        self._tags = None
        self._bookmarked = None
        self.discriminator = None

        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        self.dob = dob
        self.date_added = date_added
        self.date_updated = date_updated
        if email is not None:
            self.email = email
        if phone is not None:
            self.phone = phone
        self.primary_addr = primary_addr
        if tags is not None:
            self.tags = tags
        if bookmarked is not None:
            self.bookmarked = bookmarked

    @property
    def first_name(self):
        """Gets the first_name of this PersonRequest.  # noqa: E501


        :return: The first_name of this PersonRequest.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this PersonRequest.


        :param first_name: The first_name of this PersonRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                first_name is not None and len(first_name) > 50):
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `50`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this PersonRequest.  # noqa: E501


        :return: The last_name of this PersonRequest.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this PersonRequest.


        :param last_name: The last_name of this PersonRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                last_name is not None and len(last_name) > 50):
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `50`")  # noqa: E501

        self._last_name = last_name

    @property
    def dob(self):
        """Gets the dob of this PersonRequest.  # noqa: E501


        :return: The dob of this PersonRequest.  # noqa: E501
        :rtype: date
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this PersonRequest.


        :param dob: The dob of this PersonRequest.  # noqa: E501
        :type: date
        """

        self._dob = dob

    @property
    def date_added(self):
        """Gets the date_added of this PersonRequest.  # noqa: E501


        :return: The date_added of this PersonRequest.  # noqa: E501
        :rtype: date
        """
        return self._date_added

    @date_added.setter
    def date_added(self, date_added):
        """Sets the date_added of this PersonRequest.


        :param date_added: The date_added of this PersonRequest.  # noqa: E501
        :type: date
        """

        self._date_added = date_added

    @property
    def date_updated(self):
        """Gets the date_updated of this PersonRequest.  # noqa: E501


        :return: The date_updated of this PersonRequest.  # noqa: E501
        :rtype: date
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this PersonRequest.


        :param date_updated: The date_updated of this PersonRequest.  # noqa: E501
        :type: date
        """

        self._date_updated = date_updated

    @property
    def email(self):
        """Gets the email of this PersonRequest.  # noqa: E501


        :return: The email of this PersonRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PersonRequest.


        :param email: The email of this PersonRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                email is not None and len(email) > 254):
            raise ValueError("Invalid value for `email`, length must be less than or equal to `254`")  # noqa: E501

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this PersonRequest.  # noqa: E501


        :return: The phone of this PersonRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this PersonRequest.


        :param phone: The phone of this PersonRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                phone is not None and len(phone) > 10):
            raise ValueError("Invalid value for `phone`, length must be less than or equal to `10`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                phone is not None and not re.search(r'^(\d{1,10})?$', phone)):  # noqa: E501
            raise ValueError(r"Invalid value for `phone`, must be a follow pattern or equal to `/^(\d{1,10})?$/`")  # noqa: E501

        self._phone = phone

    @property
    def primary_addr(self):
        """Gets the primary_addr of this PersonRequest.  # noqa: E501


        :return: The primary_addr of this PersonRequest.  # noqa: E501
        :rtype: AddressRequest
        """
        return self._primary_addr

    @primary_addr.setter
    def primary_addr(self, primary_addr):
        """Sets the primary_addr of this PersonRequest.


        :param primary_addr: The primary_addr of this PersonRequest.  # noqa: E501
        :type: AddressRequest
        """

        self._primary_addr = primary_addr

    @property
    def tags(self):
        """Gets the tags of this PersonRequest.  # noqa: E501


        :return: The tags of this PersonRequest.  # noqa: E501
        :rtype: list[PersonTagRequest]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PersonRequest.


        :param tags: The tags of this PersonRequest.  # noqa: E501
        :type: list[PersonTagRequest]
        """

        self._tags = tags

    @property
    def bookmarked(self):
        """Gets the bookmarked of this PersonRequest.  # noqa: E501


        :return: The bookmarked of this PersonRequest.  # noqa: E501
        :rtype: bool
        """
        return self._bookmarked

    @bookmarked.setter
    def bookmarked(self, bookmarked):
        """Sets the bookmarked of this PersonRequest.


        :param bookmarked: The bookmarked of this PersonRequest.  # noqa: E501
        :type: bool
        """

        self._bookmarked = bookmarked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PersonRequest):
            return True

        return self.to_dict() != other.to_dict()
