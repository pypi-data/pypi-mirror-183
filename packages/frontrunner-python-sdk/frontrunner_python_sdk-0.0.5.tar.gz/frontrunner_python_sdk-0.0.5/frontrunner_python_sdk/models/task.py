# coding: utf-8

"""
    FrontRunner API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from frontrunner_python_sdk.configuration import Configuration


class Task(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'author': 'int',
        'title': 'str',
        'description': 'str',
        'date_added': 'datetime',
        'date_updated': 'datetime',
        'date_due': 'date',
        'completed': 'bool',
        'assigned_to': 'list[TenantUserPart]',
        'linked_contacts': 'list[PersonPart]',
        'overdue': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'author': 'author',
        'title': 'title',
        'description': 'description',
        'date_added': 'date_added',
        'date_updated': 'date_updated',
        'date_due': 'date_due',
        'completed': 'completed',
        'assigned_to': 'assigned_to',
        'linked_contacts': 'linked_contacts',
        'overdue': 'overdue'
    }

    def __init__(self, id=None, author=None, title=None, description=None, date_added=None, date_updated=None, date_due=None, completed=None, assigned_to=None, linked_contacts=None, overdue=None, local_vars_configuration=None):  # noqa: E501
        """Task - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._author = None
        self._title = None
        self._description = None
        self._date_added = None
        self._date_updated = None
        self._date_due = None
        self._completed = None
        self._assigned_to = None
        self._linked_contacts = None
        self._overdue = None
        self.discriminator = None

        self.id = id
        self.author = author
        self.title = title
        self.description = description
        self.date_added = date_added
        self.date_updated = date_updated
        self.date_due = date_due
        if completed is not None:
            self.completed = completed
        if assigned_to is not None:
            self.assigned_to = assigned_to
        if linked_contacts is not None:
            self.linked_contacts = linked_contacts
        self.overdue = overdue

    @property
    def id(self):
        """Gets the id of this Task.  # noqa: E501


        :return: The id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Task.


        :param id: The id of this Task.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def author(self):
        """Gets the author of this Task.  # noqa: E501


        :return: The author of this Task.  # noqa: E501
        :rtype: int
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Task.


        :param author: The author of this Task.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and author is None:  # noqa: E501
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def title(self):
        """Gets the title of this Task.  # noqa: E501


        :return: The title of this Task.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Task.


        :param title: The title of this Task.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                title is not None and len(title) > 500):
            raise ValueError("Invalid value for `title`, length must be less than or equal to `500`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this Task.  # noqa: E501


        :return: The description of this Task.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Task.


        :param description: The description of this Task.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def date_added(self):
        """Gets the date_added of this Task.  # noqa: E501


        :return: The date_added of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._date_added

    @date_added.setter
    def date_added(self, date_added):
        """Sets the date_added of this Task.


        :param date_added: The date_added of this Task.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and date_added is None:  # noqa: E501
            raise ValueError("Invalid value for `date_added`, must not be `None`")  # noqa: E501

        self._date_added = date_added

    @property
    def date_updated(self):
        """Gets the date_updated of this Task.  # noqa: E501


        :return: The date_updated of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this Task.


        :param date_updated: The date_updated of this Task.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and date_updated is None:  # noqa: E501
            raise ValueError("Invalid value for `date_updated`, must not be `None`")  # noqa: E501

        self._date_updated = date_updated

    @property
    def date_due(self):
        """Gets the date_due of this Task.  # noqa: E501


        :return: The date_due of this Task.  # noqa: E501
        :rtype: date
        """
        return self._date_due

    @date_due.setter
    def date_due(self, date_due):
        """Sets the date_due of this Task.


        :param date_due: The date_due of this Task.  # noqa: E501
        :type: date
        """

        self._date_due = date_due

    @property
    def completed(self):
        """Gets the completed of this Task.  # noqa: E501


        :return: The completed of this Task.  # noqa: E501
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this Task.


        :param completed: The completed of this Task.  # noqa: E501
        :type: bool
        """

        self._completed = completed

    @property
    def assigned_to(self):
        """Gets the assigned_to of this Task.  # noqa: E501


        :return: The assigned_to of this Task.  # noqa: E501
        :rtype: list[TenantUserPart]
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this Task.


        :param assigned_to: The assigned_to of this Task.  # noqa: E501
        :type: list[TenantUserPart]
        """

        self._assigned_to = assigned_to

    @property
    def linked_contacts(self):
        """Gets the linked_contacts of this Task.  # noqa: E501


        :return: The linked_contacts of this Task.  # noqa: E501
        :rtype: list[PersonPart]
        """
        return self._linked_contacts

    @linked_contacts.setter
    def linked_contacts(self, linked_contacts):
        """Sets the linked_contacts of this Task.


        :param linked_contacts: The linked_contacts of this Task.  # noqa: E501
        :type: list[PersonPart]
        """

        self._linked_contacts = linked_contacts

    @property
    def overdue(self):
        """Gets the overdue of this Task.  # noqa: E501


        :return: The overdue of this Task.  # noqa: E501
        :rtype: bool
        """
        return self._overdue

    @overdue.setter
    def overdue(self, overdue):
        """Sets the overdue of this Task.


        :param overdue: The overdue of this Task.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and overdue is None:  # noqa: E501
            raise ValueError("Invalid value for `overdue`, must not be `None`")  # noqa: E501

        self._overdue = overdue

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Task):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Task):
            return True

        return self.to_dict() != other.to_dict()
