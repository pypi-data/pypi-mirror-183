# coding: utf-8

"""
    FrontRunner API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from frontrunner_python_sdk.configuration import Configuration


class DeliveryReport(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'delivered': 'int',
        'queued': 'int',
        'waiting': 'int',
        'errors': 'int',
        'replied': 'int',
        'opt_outs': 'int'
    }

    attribute_map = {
        'id': 'id',
        'delivered': 'delivered',
        'queued': 'queued',
        'waiting': 'waiting',
        'errors': 'errors',
        'replied': 'replied',
        'opt_outs': 'opt_outs'
    }

    def __init__(self, id=None, delivered=None, queued=None, waiting=None, errors=None, replied=None, opt_outs=None, local_vars_configuration=None):  # noqa: E501
        """DeliveryReport - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._delivered = None
        self._queued = None
        self._waiting = None
        self._errors = None
        self._replied = None
        self._opt_outs = None
        self.discriminator = None

        self.id = id
        self.delivered = delivered
        self.queued = queued
        self.waiting = waiting
        self.errors = errors
        self.replied = replied
        self.opt_outs = opt_outs

    @property
    def id(self):
        """Gets the id of this DeliveryReport.  # noqa: E501


        :return: The id of this DeliveryReport.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeliveryReport.


        :param id: The id of this DeliveryReport.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def delivered(self):
        """Gets the delivered of this DeliveryReport.  # noqa: E501


        :return: The delivered of this DeliveryReport.  # noqa: E501
        :rtype: int
        """
        return self._delivered

    @delivered.setter
    def delivered(self, delivered):
        """Sets the delivered of this DeliveryReport.


        :param delivered: The delivered of this DeliveryReport.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                delivered is not None and delivered > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `delivered`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                delivered is not None and delivered < 0):  # noqa: E501
            raise ValueError("Invalid value for `delivered`, must be a value greater than or equal to `0`")  # noqa: E501

        self._delivered = delivered

    @property
    def queued(self):
        """Gets the queued of this DeliveryReport.  # noqa: E501


        :return: The queued of this DeliveryReport.  # noqa: E501
        :rtype: int
        """
        return self._queued

    @queued.setter
    def queued(self, queued):
        """Sets the queued of this DeliveryReport.


        :param queued: The queued of this DeliveryReport.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                queued is not None and queued > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `queued`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                queued is not None and queued < 0):  # noqa: E501
            raise ValueError("Invalid value for `queued`, must be a value greater than or equal to `0`")  # noqa: E501

        self._queued = queued

    @property
    def waiting(self):
        """Gets the waiting of this DeliveryReport.  # noqa: E501


        :return: The waiting of this DeliveryReport.  # noqa: E501
        :rtype: int
        """
        return self._waiting

    @waiting.setter
    def waiting(self, waiting):
        """Sets the waiting of this DeliveryReport.


        :param waiting: The waiting of this DeliveryReport.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                waiting is not None and waiting > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `waiting`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                waiting is not None and waiting < 0):  # noqa: E501
            raise ValueError("Invalid value for `waiting`, must be a value greater than or equal to `0`")  # noqa: E501

        self._waiting = waiting

    @property
    def errors(self):
        """Gets the errors of this DeliveryReport.  # noqa: E501


        :return: The errors of this DeliveryReport.  # noqa: E501
        :rtype: int
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this DeliveryReport.


        :param errors: The errors of this DeliveryReport.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                errors is not None and errors > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `errors`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                errors is not None and errors < 0):  # noqa: E501
            raise ValueError("Invalid value for `errors`, must be a value greater than or equal to `0`")  # noqa: E501

        self._errors = errors

    @property
    def replied(self):
        """Gets the replied of this DeliveryReport.  # noqa: E501


        :return: The replied of this DeliveryReport.  # noqa: E501
        :rtype: int
        """
        return self._replied

    @replied.setter
    def replied(self, replied):
        """Sets the replied of this DeliveryReport.


        :param replied: The replied of this DeliveryReport.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                replied is not None and replied > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `replied`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                replied is not None and replied < 0):  # noqa: E501
            raise ValueError("Invalid value for `replied`, must be a value greater than or equal to `0`")  # noqa: E501

        self._replied = replied

    @property
    def opt_outs(self):
        """Gets the opt_outs of this DeliveryReport.  # noqa: E501


        :return: The opt_outs of this DeliveryReport.  # noqa: E501
        :rtype: int
        """
        return self._opt_outs

    @opt_outs.setter
    def opt_outs(self, opt_outs):
        """Sets the opt_outs of this DeliveryReport.


        :param opt_outs: The opt_outs of this DeliveryReport.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                opt_outs is not None and opt_outs > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `opt_outs`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                opt_outs is not None and opt_outs < 0):  # noqa: E501
            raise ValueError("Invalid value for `opt_outs`, must be a value greater than or equal to `0`")  # noqa: E501

        self._opt_outs = opt_outs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeliveryReport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeliveryReport):
            return True

        return self.to_dict() != other.to_dict()
