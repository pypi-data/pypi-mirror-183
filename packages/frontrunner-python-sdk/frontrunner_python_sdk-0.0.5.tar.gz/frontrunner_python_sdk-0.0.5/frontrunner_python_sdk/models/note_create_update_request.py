# coding: utf-8

"""
    FrontRunner API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from frontrunner_python_sdk.configuration import Configuration


class NoteCreateUpdateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'title': 'str',
        'content': 'str',
        'linked_contacts': 'list[int]'
    }

    attribute_map = {
        'title': 'title',
        'content': 'content',
        'linked_contacts': 'linked_contacts'
    }

    def __init__(self, title=None, content=None, linked_contacts=None, local_vars_configuration=None):  # noqa: E501
        """NoteCreateUpdateRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._title = None
        self._content = None
        self._linked_contacts = None
        self.discriminator = None

        self.title = title
        self.content = content
        if linked_contacts is not None:
            self.linked_contacts = linked_contacts

    @property
    def title(self):
        """Gets the title of this NoteCreateUpdateRequest.  # noqa: E501


        :return: The title of this NoteCreateUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NoteCreateUpdateRequest.


        :param title: The title of this NoteCreateUpdateRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                title is not None and len(title) > 100):
            raise ValueError("Invalid value for `title`, length must be less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                title is not None and len(title) < 1):
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def content(self):
        """Gets the content of this NoteCreateUpdateRequest.  # noqa: E501


        :return: The content of this NoteCreateUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this NoteCreateUpdateRequest.


        :param content: The content of this NoteCreateUpdateRequest.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def linked_contacts(self):
        """Gets the linked_contacts of this NoteCreateUpdateRequest.  # noqa: E501


        :return: The linked_contacts of this NoteCreateUpdateRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._linked_contacts

    @linked_contacts.setter
    def linked_contacts(self, linked_contacts):
        """Sets the linked_contacts of this NoteCreateUpdateRequest.


        :param linked_contacts: The linked_contacts of this NoteCreateUpdateRequest.  # noqa: E501
        :type: list[int]
        """

        self._linked_contacts = linked_contacts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NoteCreateUpdateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NoteCreateUpdateRequest):
            return True

        return self.to_dict() != other.to_dict()
