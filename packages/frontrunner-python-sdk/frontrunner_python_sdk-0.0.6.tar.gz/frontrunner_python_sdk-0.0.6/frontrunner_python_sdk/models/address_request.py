# coding: utf-8

"""
    FrontRunner API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from frontrunner_python_sdk.configuration import Configuration


class AddressRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address1': 'str',
        'address2': 'str',
        'county': 'str',
        'city': 'str',
        'state': 'str',
        'state_full': 'str',
        'zip': 'str',
        'latitude': 'float',
        'longitude': 'float'
    }

    attribute_map = {
        'address1': 'address1',
        'address2': 'address2',
        'county': 'county',
        'city': 'city',
        'state': 'state',
        'state_full': 'state_full',
        'zip': 'zip',
        'latitude': 'latitude',
        'longitude': 'longitude'
    }

    def __init__(self, address1=None, address2=None, county=None, city=None, state=None, state_full=None, zip=None, latitude=None, longitude=None, local_vars_configuration=None):  # noqa: E501
        """AddressRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._address1 = None
        self._address2 = None
        self._county = None
        self._city = None
        self._state = None
        self._state_full = None
        self._zip = None
        self._latitude = None
        self._longitude = None
        self.discriminator = None

        if address1 is not None:
            self.address1 = address1
        if address2 is not None:
            self.address2 = address2
        if county is not None:
            self.county = county
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if state_full is not None:
            self.state_full = state_full
        if zip is not None:
            self.zip = zip
        self.latitude = latitude
        self.longitude = longitude

    @property
    def address1(self):
        """Gets the address1 of this AddressRequest.  # noqa: E501


        :return: The address1 of this AddressRequest.  # noqa: E501
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this AddressRequest.


        :param address1: The address1 of this AddressRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                address1 is not None and len(address1) > 50):
            raise ValueError("Invalid value for `address1`, length must be less than or equal to `50`")  # noqa: E501

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this AddressRequest.  # noqa: E501


        :return: The address2 of this AddressRequest.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this AddressRequest.


        :param address2: The address2 of this AddressRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                address2 is not None and len(address2) > 30):
            raise ValueError("Invalid value for `address2`, length must be less than or equal to `30`")  # noqa: E501

        self._address2 = address2

    @property
    def county(self):
        """Gets the county of this AddressRequest.  # noqa: E501


        :return: The county of this AddressRequest.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this AddressRequest.


        :param county: The county of this AddressRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                county is not None and len(county) > 30):
            raise ValueError("Invalid value for `county`, length must be less than or equal to `30`")  # noqa: E501

        self._county = county

    @property
    def city(self):
        """Gets the city of this AddressRequest.  # noqa: E501


        :return: The city of this AddressRequest.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AddressRequest.


        :param city: The city of this AddressRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                city is not None and len(city) > 30):
            raise ValueError("Invalid value for `city`, length must be less than or equal to `30`")  # noqa: E501

        self._city = city

    @property
    def state(self):
        """Gets the state of this AddressRequest.  # noqa: E501


        :return: The state of this AddressRequest.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AddressRequest.


        :param state: The state of this AddressRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                state is not None and len(state) > 2):
            raise ValueError("Invalid value for `state`, length must be less than or equal to `2`")  # noqa: E501

        self._state = state

    @property
    def state_full(self):
        """Gets the state_full of this AddressRequest.  # noqa: E501


        :return: The state_full of this AddressRequest.  # noqa: E501
        :rtype: str
        """
        return self._state_full

    @state_full.setter
    def state_full(self, state_full):
        """Sets the state_full of this AddressRequest.


        :param state_full: The state_full of this AddressRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                state_full is not None and len(state_full) > 30):
            raise ValueError("Invalid value for `state_full`, length must be less than or equal to `30`")  # noqa: E501

        self._state_full = state_full

    @property
    def zip(self):
        """Gets the zip of this AddressRequest.  # noqa: E501


        :return: The zip of this AddressRequest.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this AddressRequest.


        :param zip: The zip of this AddressRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                zip is not None and len(zip) > 30):
            raise ValueError("Invalid value for `zip`, length must be less than or equal to `30`")  # noqa: E501

        self._zip = zip

    @property
    def latitude(self):
        """Gets the latitude of this AddressRequest.  # noqa: E501


        :return: The latitude of this AddressRequest.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this AddressRequest.


        :param latitude: The latitude of this AddressRequest.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this AddressRequest.  # noqa: E501


        :return: The longitude of this AddressRequest.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this AddressRequest.


        :param longitude: The longitude of this AddressRequest.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddressRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddressRequest):
            return True

        return self.to_dict() != other.to_dict()
