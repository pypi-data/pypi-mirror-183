# coding: utf-8

"""
    FrontRunner API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from frontrunner_python_sdk.configuration import Configuration


class MailchimpActionObjectRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'class_name': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'name': 'str',
        'dob': 'date',
        'id': 'str',
        'title': 'str'
    }

    attribute_map = {
        'class_name': 'class_name',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'name': 'name',
        'dob': 'dob',
        'id': 'id',
        'title': 'title'
    }

    discriminator_value_class_map = {
    }

    def __init__(self, class_name='Campaign', first_name=None, last_name=None, name=None, dob=None, id=None, title=None, local_vars_configuration=None):  # noqa: E501
        """MailchimpActionObjectRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._class_name = None
        self._first_name = None
        self._last_name = None
        self._name = None
        self._dob = None
        self._id = None
        self._title = None
        self.discriminator = 'class_name'

        if class_name is not None:
            self.class_name = class_name
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if name is not None:
            self.name = name
        self.dob = dob
        self.id = id
        if title is not None:
            self.title = title

    @property
    def class_name(self):
        """Gets the class_name of this MailchimpActionObjectRequest.  # noqa: E501


        :return: The class_name of this MailchimpActionObjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this MailchimpActionObjectRequest.


        :param class_name: The class_name of this MailchimpActionObjectRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                class_name is not None and len(class_name) < 1):
            raise ValueError("Invalid value for `class_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._class_name = class_name

    @property
    def first_name(self):
        """Gets the first_name of this MailchimpActionObjectRequest.  # noqa: E501


        :return: The first_name of this MailchimpActionObjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this MailchimpActionObjectRequest.


        :param first_name: The first_name of this MailchimpActionObjectRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                first_name is not None and len(first_name) > 50):
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `50`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this MailchimpActionObjectRequest.  # noqa: E501


        :return: The last_name of this MailchimpActionObjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this MailchimpActionObjectRequest.


        :param last_name: The last_name of this MailchimpActionObjectRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                last_name is not None and len(last_name) > 50):
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `50`")  # noqa: E501

        self._last_name = last_name

    @property
    def name(self):
        """Gets the name of this MailchimpActionObjectRequest.  # noqa: E501


        :return: The name of this MailchimpActionObjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MailchimpActionObjectRequest.


        :param name: The name of this MailchimpActionObjectRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def dob(self):
        """Gets the dob of this MailchimpActionObjectRequest.  # noqa: E501


        :return: The dob of this MailchimpActionObjectRequest.  # noqa: E501
        :rtype: date
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this MailchimpActionObjectRequest.


        :param dob: The dob of this MailchimpActionObjectRequest.  # noqa: E501
        :type: date
        """

        self._dob = dob

    @property
    def id(self):
        """Gets the id of this MailchimpActionObjectRequest.  # noqa: E501

        Mailchimp campaign id  # noqa: E501

        :return: The id of this MailchimpActionObjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MailchimpActionObjectRequest.

        Mailchimp campaign id  # noqa: E501

        :param id: The id of this MailchimpActionObjectRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) > 50):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) < 1):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def title(self):
        """Gets the title of this MailchimpActionObjectRequest.  # noqa: E501


        :return: The title of this MailchimpActionObjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MailchimpActionObjectRequest.


        :param title: The title of this MailchimpActionObjectRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                title is not None and len(title) > 250):
            raise ValueError("Invalid value for `title`, length must be less than or equal to `250`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                title is not None and len(title) < 1):
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MailchimpActionObjectRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MailchimpActionObjectRequest):
            return True

        return self.to_dict() != other.to_dict()
