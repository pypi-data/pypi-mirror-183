# coding: utf-8

"""
    FrontRunner API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from frontrunner_python_sdk.configuration import Configuration


class MailchimpActionRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'actor': 'MailchimpActionActorRequest',
        'verb': 'str',
        'action_object': 'MailchimpActionObjectRequest',
        'target': 'MailchimpActionTargetRequest',
        'public': 'bool',
        'description': 'str',
        'timestamp': 'datetime',
        'total_revenue': 'float',
        'total_opens': 'int',
        'successful_deliveries': 'int'
    }

    attribute_map = {
        'actor': 'actor',
        'verb': 'verb',
        'action_object': 'action_object',
        'target': 'target',
        'public': 'public',
        'description': 'description',
        'timestamp': 'timestamp',
        'total_revenue': 'total_revenue',
        'total_opens': 'total_opens',
        'successful_deliveries': 'successful_deliveries'
    }

    def __init__(self, actor=None, verb=None, action_object=None, target=None, public=None, description=None, timestamp=None, total_revenue=None, total_opens=None, successful_deliveries=None, local_vars_configuration=None):  # noqa: E501
        """MailchimpActionRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._actor = None
        self._verb = None
        self._action_object = None
        self._target = None
        self._public = None
        self._description = None
        self._timestamp = None
        self._total_revenue = None
        self._total_opens = None
        self._successful_deliveries = None
        self.discriminator = None

        self.actor = actor
        self.verb = verb
        if action_object is not None:
            self.action_object = action_object
        if target is not None:
            self.target = target
        if public is not None:
            self.public = public
        self.description = description
        if timestamp is not None:
            self.timestamp = timestamp
        self.total_revenue = total_revenue
        self.total_opens = total_opens
        self.successful_deliveries = successful_deliveries

    @property
    def actor(self):
        """Gets the actor of this MailchimpActionRequest.  # noqa: E501


        :return: The actor of this MailchimpActionRequest.  # noqa: E501
        :rtype: MailchimpActionActorRequest
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this MailchimpActionRequest.


        :param actor: The actor of this MailchimpActionRequest.  # noqa: E501
        :type: MailchimpActionActorRequest
        """
        if self.local_vars_configuration.client_side_validation and actor is None:  # noqa: E501
            raise ValueError("Invalid value for `actor`, must not be `None`")  # noqa: E501

        self._actor = actor

    @property
    def verb(self):
        """Gets the verb of this MailchimpActionRequest.  # noqa: E501


        :return: The verb of this MailchimpActionRequest.  # noqa: E501
        :rtype: str
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """Sets the verb of this MailchimpActionRequest.


        :param verb: The verb of this MailchimpActionRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and verb is None:  # noqa: E501
            raise ValueError("Invalid value for `verb`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                verb is not None and len(verb) > 255):
            raise ValueError("Invalid value for `verb`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                verb is not None and len(verb) < 1):
            raise ValueError("Invalid value for `verb`, length must be greater than or equal to `1`")  # noqa: E501

        self._verb = verb

    @property
    def action_object(self):
        """Gets the action_object of this MailchimpActionRequest.  # noqa: E501


        :return: The action_object of this MailchimpActionRequest.  # noqa: E501
        :rtype: MailchimpActionObjectRequest
        """
        return self._action_object

    @action_object.setter
    def action_object(self, action_object):
        """Sets the action_object of this MailchimpActionRequest.


        :param action_object: The action_object of this MailchimpActionRequest.  # noqa: E501
        :type: MailchimpActionObjectRequest
        """

        self._action_object = action_object

    @property
    def target(self):
        """Gets the target of this MailchimpActionRequest.  # noqa: E501


        :return: The target of this MailchimpActionRequest.  # noqa: E501
        :rtype: MailchimpActionTargetRequest
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this MailchimpActionRequest.


        :param target: The target of this MailchimpActionRequest.  # noqa: E501
        :type: MailchimpActionTargetRequest
        """

        self._target = target

    @property
    def public(self):
        """Gets the public of this MailchimpActionRequest.  # noqa: E501


        :return: The public of this MailchimpActionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this MailchimpActionRequest.


        :param public: The public of this MailchimpActionRequest.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def description(self):
        """Gets the description of this MailchimpActionRequest.  # noqa: E501


        :return: The description of this MailchimpActionRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MailchimpActionRequest.


        :param description: The description of this MailchimpActionRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def timestamp(self):
        """Gets the timestamp of this MailchimpActionRequest.  # noqa: E501


        :return: The timestamp of this MailchimpActionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MailchimpActionRequest.


        :param timestamp: The timestamp of this MailchimpActionRequest.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def total_revenue(self):
        """Gets the total_revenue of this MailchimpActionRequest.  # noqa: E501


        :return: The total_revenue of this MailchimpActionRequest.  # noqa: E501
        :rtype: float
        """
        return self._total_revenue

    @total_revenue.setter
    def total_revenue(self, total_revenue):
        """Sets the total_revenue of this MailchimpActionRequest.


        :param total_revenue: The total_revenue of this MailchimpActionRequest.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                total_revenue is not None and total_revenue >= 100000000):  # noqa: E501
            raise ValueError("Invalid value for `total_revenue`, must be a value less than `100000000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                total_revenue is not None and total_revenue <= -100000000):  # noqa: E501
            raise ValueError("Invalid value for `total_revenue`, must be a value greater than `-100000000`")  # noqa: E501

        self._total_revenue = total_revenue

    @property
    def total_opens(self):
        """Gets the total_opens of this MailchimpActionRequest.  # noqa: E501


        :return: The total_opens of this MailchimpActionRequest.  # noqa: E501
        :rtype: int
        """
        return self._total_opens

    @total_opens.setter
    def total_opens(self, total_opens):
        """Sets the total_opens of this MailchimpActionRequest.


        :param total_opens: The total_opens of this MailchimpActionRequest.  # noqa: E501
        :type: int
        """

        self._total_opens = total_opens

    @property
    def successful_deliveries(self):
        """Gets the successful_deliveries of this MailchimpActionRequest.  # noqa: E501


        :return: The successful_deliveries of this MailchimpActionRequest.  # noqa: E501
        :rtype: int
        """
        return self._successful_deliveries

    @successful_deliveries.setter
    def successful_deliveries(self, successful_deliveries):
        """Sets the successful_deliveries of this MailchimpActionRequest.


        :param successful_deliveries: The successful_deliveries of this MailchimpActionRequest.  # noqa: E501
        :type: int
        """

        self._successful_deliveries = successful_deliveries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MailchimpActionRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MailchimpActionRequest):
            return True

        return self.to_dict() != other.to_dict()
