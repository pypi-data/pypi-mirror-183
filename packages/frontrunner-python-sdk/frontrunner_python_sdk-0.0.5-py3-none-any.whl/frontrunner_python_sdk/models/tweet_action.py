# coding: utf-8

"""
    FrontRunner API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from frontrunner_python_sdk.configuration import Configuration


class TweetAction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'class_name': 'str',
        'text': 'str',
        'url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'class_name': 'class_name',
        'text': 'text',
        'url': 'url'
    }

    def __init__(self, id=None, class_name='Tweet', text=None, url=None, local_vars_configuration=None):  # noqa: E501
        """TweetAction - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._class_name = None
        self._text = None
        self._url = None
        self.discriminator = None

        self.id = id
        if class_name is not None:
            self.class_name = class_name
        if text is not None:
            self.text = text
        self.url = url

    @property
    def id(self):
        """Gets the id of this TweetAction.  # noqa: E501


        :return: The id of this TweetAction.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TweetAction.


        :param id: The id of this TweetAction.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and id > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and id < 0):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def class_name(self):
        """Gets the class_name of this TweetAction.  # noqa: E501


        :return: The class_name of this TweetAction.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this TweetAction.


        :param class_name: The class_name of this TweetAction.  # noqa: E501
        :type: str
        """

        self._class_name = class_name

    @property
    def text(self):
        """Gets the text of this TweetAction.  # noqa: E501


        :return: The text of this TweetAction.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this TweetAction.


        :param text: The text of this TweetAction.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                text is not None and len(text) > 280):
            raise ValueError("Invalid value for `text`, length must be less than or equal to `280`")  # noqa: E501

        self._text = text

    @property
    def url(self):
        """Gets the url of this TweetAction.  # noqa: E501


        :return: The url of this TweetAction.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TweetAction.


        :param url: The url of this TweetAction.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                url is not None and len(url) > 200):
            raise ValueError("Invalid value for `url`, length must be less than or equal to `200`")  # noqa: E501

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TweetAction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TweetAction):
            return True

        return self.to_dict() != other.to_dict()
