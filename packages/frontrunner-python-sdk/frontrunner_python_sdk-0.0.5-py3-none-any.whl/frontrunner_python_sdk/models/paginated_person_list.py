# coding: utf-8

"""
    FrontRunner API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from frontrunner_python_sdk.configuration import Configuration


class PaginatedPersonList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'next_page': 'int',
        'previous_page': 'int',
        'count': 'int',
        'page_size': 'int',
        'results': 'list[Person]'
    }

    attribute_map = {
        'next_page': 'nextPage',
        'previous_page': 'previousPage',
        'count': 'count',
        'page_size': 'pageSize',
        'results': 'results'
    }

    def __init__(self, next_page=None, previous_page=None, count=None, page_size=None, results=None, local_vars_configuration=None):  # noqa: E501
        """PaginatedPersonList - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._next_page = None
        self._previous_page = None
        self._count = None
        self._page_size = None
        self._results = None
        self.discriminator = None

        self.next_page = next_page
        self.previous_page = previous_page
        if count is not None:
            self.count = count
        if page_size is not None:
            self.page_size = page_size
        if results is not None:
            self.results = results

    @property
    def next_page(self):
        """Gets the next_page of this PaginatedPersonList.  # noqa: E501


        :return: The next_page of this PaginatedPersonList.  # noqa: E501
        :rtype: int
        """
        return self._next_page

    @next_page.setter
    def next_page(self, next_page):
        """Sets the next_page of this PaginatedPersonList.


        :param next_page: The next_page of this PaginatedPersonList.  # noqa: E501
        :type: int
        """

        self._next_page = next_page

    @property
    def previous_page(self):
        """Gets the previous_page of this PaginatedPersonList.  # noqa: E501


        :return: The previous_page of this PaginatedPersonList.  # noqa: E501
        :rtype: int
        """
        return self._previous_page

    @previous_page.setter
    def previous_page(self, previous_page):
        """Sets the previous_page of this PaginatedPersonList.


        :param previous_page: The previous_page of this PaginatedPersonList.  # noqa: E501
        :type: int
        """

        self._previous_page = previous_page

    @property
    def count(self):
        """Gets the count of this PaginatedPersonList.  # noqa: E501


        :return: The count of this PaginatedPersonList.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this PaginatedPersonList.


        :param count: The count of this PaginatedPersonList.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def page_size(self):
        """Gets the page_size of this PaginatedPersonList.  # noqa: E501


        :return: The page_size of this PaginatedPersonList.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this PaginatedPersonList.


        :param page_size: The page_size of this PaginatedPersonList.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def results(self):
        """Gets the results of this PaginatedPersonList.  # noqa: E501


        :return: The results of this PaginatedPersonList.  # noqa: E501
        :rtype: list[Person]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this PaginatedPersonList.


        :param results: The results of this PaginatedPersonList.  # noqa: E501
        :type: list[Person]
        """

        self._results = results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaginatedPersonList):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaginatedPersonList):
            return True

        return self.to_dict() != other.to_dict()
