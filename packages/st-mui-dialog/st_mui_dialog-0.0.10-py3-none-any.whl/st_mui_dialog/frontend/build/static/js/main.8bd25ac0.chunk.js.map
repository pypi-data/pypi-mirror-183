{"version":3,"sources":["MuiDialog.tsx","index.tsx"],"names":["BootstrapDialogTitle","props","children","onClose","sx","other","DialogTitle","IconButton","aria-label","onClick","position","right","top","color","theme","palette","grey","Transition","React","forwardRef","ref","Slide","direction","withStreamlitConnection","useState","open","setOpen","args","title","content","abortlabel","agreelabel","height","fullscreen","styling_dialog","button_txt","button_open_type","divider","styling_open_button","styling_agree_button","styling_abort_button","width_dialog","adapt_width_dialog","styling_dialog_content","styling_dialog_title","styling_dialog_content_text","button_abort_type","transition_mode","slide_direction","button_agree_type","sx_dialog_json","JSON","parse","sx_open_btn_json","sx_agree_btn_json","sx_abort_btn_json","sx_dialog_content_json","sx_dialog_title_json","sx_dialog_content_text_json","handleClose","useEffect","Streamlit","setFrameHeight","Button","variant","Dialog","fullScreen","aria-labelledby","aria-describedby","maxWidth","fullWidth","TransitionComponent","id","DialogContent","dividers","DialogContentText","DialogActions","setComponentValue","autoFocus","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6UA2BA,SAASA,EAAqBC,GAC5B,IAAQC,EAAoCD,EAApCC,SAAUC,EAA0BF,EAA1BE,QAASC,EAAiBH,EAAjBG,GAAOC,EAAK,YAAKJ,EAAK,GAEjD,OACE,kBAACK,EAAA,EAAW,eAACF,GAAIA,GAAQC,GACtBH,EACAC,EACC,kBAACI,EAAA,EAAU,CACTC,aAAW,QACXC,QAASN,EACTC,GAAI,CACFM,SAAU,WACVC,MAAO,EACPC,IAAK,EACLC,MAAO,SAACC,GAAK,OAAKA,EAAMC,QAAQC,KAAK,QAGvC,kBAAC,IAAS,OAEV,MAgCV,IAAMC,EAAaC,IAAMC,YAAW,SAClClB,EAGAmB,GAEA,OAAO,kBAACC,EAAA,EAAK,eAACC,UAAU,OAAOF,IAAKA,GAASnB,OA2EhCsB,eAxES,SAACtB,GACvB,MAAwBiB,IAAMM,UAAS,GAAM,mBAAtCC,EAAI,KAAEC,EAAO,KAEpB,EAGwCzB,EAAM0B,KAHvCC,EAAK,EAALA,MAAOC,EAAO,EAAPA,QAASC,EAAU,EAAVA,WAAYC,EAAU,EAAVA,WAAYC,EAAM,EAANA,OAAQC,EAAU,EAAVA,WAAYC,EAAc,EAAdA,eAAgBC,EAAU,EAAVA,WAAYC,EAAgB,EAAhBA,iBAC7FC,EAAO,EAAPA,QAASC,EAAmB,EAAnBA,oBAAqBC,EAAoB,EAApBA,qBAAsBC,EAAoB,EAApBA,qBAAsBC,EAAY,EAAZA,aAAcC,EAAkB,EAAlBA,mBACxFC,EAAsB,EAAtBA,uBAAwBC,EAAoB,EAApBA,qBAAsBC,EAA2B,EAA3BA,4BAChDC,GAD4F,EAAfC,gBAAgC,EAAfC,gBAC7E,EAAjBF,mBAAmBG,EAAiB,EAAjBA,kBAEbC,EAAiBC,KAAKC,MAAMlB,GAC5BmB,EAAmBF,KAAKC,MAAMd,GAC9BgB,EAAoBH,KAAKC,MAAMb,GAC/BgB,EAAoBJ,KAAKC,MAAMZ,GAC/BgB,EAAyBL,KAAKC,MAAMT,GACpCc,EAAuBN,KAAKC,MAAMR,GAClCc,EAA8BP,KAAKC,MAAMP,GAOzCc,EAAc,WAClBjC,GAAQ,IAcV,OARAkC,qBAAU,WACJnC,EACFoC,IAAUC,eAAe9B,GAEzB6B,IAAUC,mBAEX,CAACrC,IAGF,6BACE,kBAACsC,EAAA,EAAM,CAAClD,MAAOuB,EAAkB4B,QAAQ,WAAWvD,QArBhC,WACtBiB,GAAQ,IAoBwEtB,GAAKiD,GAChFlB,GAEH,kBAAC8B,EAAA,EAAM,CACLC,WAAYjC,EACZR,KAAMA,EACNtB,QAASwD,EACTQ,kBAAgB,qBAChBC,mBAAiB,2BACjBhE,GAAK8C,EACLmB,SAAU5B,EACV6B,UAAW5B,EACX6B,oBAAqBtD,GAEzB,kBAACjB,EAAoB,CAACwE,GAAG,qBAAqBrE,QAASwD,EAAavD,GAAMqD,GACvE7B,GAEC,kBAAC6C,EAAA,EAAa,CAACC,SAAYrC,EAASjC,GAAMoD,GACxC,kBAACmB,EAAA,EAAiB,CAACH,GAAG,2BAA2BpE,GAAMsD,GACtD7B,IAGH,kBAAC+C,EAAA,EAAa,KACZ,kBAACb,EAAA,EAAM,CAACtD,QAAS,WAAOkD,IAAeE,IAAUgB,mBAAkB,IAAUzE,GAAMmD,EAAmB1C,MAASiC,GAAoBhB,GACnI,kBAACiC,EAAA,EAAM,CAACtD,QAAS,WAAOkD,IAAeE,IAAUgB,mBAAkB,IAASzE,GAAMkD,EAAmBwB,WAAS,EAACjE,MAASoC,GACrHlB,SC7IbgD,IAASC,OACP,kBAAC,IAAMC,WAAU,KACf,kBAAC,EAAe,OAElBC,SAASC,eAAe,W","file":"static/js/main.8bd25ac0.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport Slide from '@mui/material/Slide';\r\nimport Fade from '@mui/material/Fade';\r\nimport Grow from '@mui/material/Grow';\r\nimport Zoom from '@mui/material/Zoom';\r\nimport { TransitionProps } from '@mui/material/transitions';\r\n\r\nexport interface DialogTitleProps {\r\n  id: string;\r\n  children?: React.ReactNode;\r\n  onClose: () => void;\r\n  sx?: any;\r\n}\r\n\r\nfunction BootstrapDialogTitle(props: DialogTitleProps) {\r\n  const { children, onClose, sx, ...other } = props;\r\n\r\n  return (\r\n    <DialogTitle sx={sx} {...other}>\r\n      {children}\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          onClick={onClose}\r\n          sx={{\r\n            position: 'absolute',\r\n            right: 8,\r\n            top: 8,\r\n            color: (theme) => theme.palette.grey[500],\r\n          }}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </DialogTitle>\r\n  );\r\n}\r\n\r\n\r\nexport interface TransitionProbsCustom {\r\n  transition_mode: any;\r\n  slide_direction: any;\r\n}\r\n//read out the transition mode from the ComponentProps and return the corresponding transition component\r\n// const Transition_custom = React.forwardRef(function Transition(\r\n//   props: TransitionProbsCustom & {\r\n//     children: React.ReactElement<any, any>;\r\n//   },\r\n//   ref: React.Ref<unknown>,\r\n// ) {\r\n//   const {slide_direction, transition_mode} = props;\r\n//   if (transition_mode == \"slide\") {\r\n//     return <Slide direction={slide_direction} ref={ref} {...props} />;\r\n//   } else if (transition_mode == \"fade\") {\r\n//     return <Fade ref={ref} {...props} />;\r\n//   } else if (transition_mode == \"grow\") {\r\n//     return <Grow ref={ref} {...props} />;\r\n//   } else if (transition_mode == \"zoom\") {\r\n//     return <Zoom ref={ref} {...props} />;\r\n//   }\r\n//   else {\r\n//     return <Slide direction=\"up\" ref={ref} {...props} />;\r\n//   }\r\n// });\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & {\r\n    children: React.ReactElement<any, any>;\r\n  },\r\n  ref: React.Ref<unknown>,\r\n) {\r\n  return <Slide direction=\"down\" ref={ref} {...props} />;\r\n});\r\n\r\nconst DialogComponent = (props: ComponentProps) => {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const {title, content, abortlabel, agreelabel, height, fullscreen, styling_dialog, button_txt, button_open_type,\r\n    divider, styling_open_button, styling_agree_button, styling_abort_button, width_dialog, adapt_width_dialog,\r\n    styling_dialog_content, styling_dialog_title, styling_dialog_content_text, transition_mode, slide_direction,\r\n  button_abort_type, button_agree_type} = props.args;\r\n\r\n  const sx_dialog_json = JSON.parse(styling_dialog);\r\n  const sx_open_btn_json = JSON.parse(styling_open_button);\r\n  const sx_agree_btn_json = JSON.parse(styling_agree_button);\r\n  const sx_abort_btn_json = JSON.parse(styling_abort_button);\r\n  const sx_dialog_content_json = JSON.parse(styling_dialog_content);\r\n  const sx_dialog_title_json = JSON.parse(styling_dialog_title);\r\n  const sx_dialog_content_text_json = JSON.parse(styling_dialog_content_text);\r\n\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  //if open is true, then set the frame height to 500 else\r\n  //set the frame height to 100\r\n\r\n  useEffect(() => {\r\n    if (open) {\r\n      Streamlit.setFrameHeight(height);\r\n    } else {\r\n      Streamlit.setFrameHeight();\r\n    }\r\n  }, [open]);\r\n  \r\n  return (\r\n    <div>\r\n      <Button color={button_open_type} variant=\"outlined\" onClick={handleClickOpen} sx= {sx_open_btn_json}>\r\n        {button_txt}\r\n      </Button>\r\n      <Dialog\r\n        fullScreen={fullscreen}\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n        sx= {sx_dialog_json}\r\n        maxWidth={width_dialog}\r\n        fullWidth={adapt_width_dialog}\r\n        TransitionComponent={Transition}\r\n      >\r\n    <BootstrapDialogTitle id=\"alert-dialog-title\" onClose={handleClose} sx = {sx_dialog_title_json}>\r\n      {title}\r\n      </BootstrapDialogTitle>\r\n        <DialogContent dividers = {divider} sx = {sx_dialog_content_json}>\r\n          <DialogContentText id=\"alert-dialog-description\" sx = {sx_dialog_content_text_json}>\r\n          {content}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => {handleClose(); Streamlit.setComponentValue(false);}} sx = {sx_abort_btn_json} color = {button_abort_type}>{abortlabel}</Button>\r\n          <Button onClick={() => {handleClose(); Streamlit.setComponentValue(true);}} sx = {sx_agree_btn_json} autoFocus color = {button_agree_type}>\r\n            {agreelabel}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default withStreamlitConnection(DialogComponent);\r\n","\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport DialogComponent from \"./MuiDialog\"\r\n\r\n// Lots of import to define a Styletron engine and load the light theme of baseui\r\n\r\n\r\n// Wrap your CustomSlider with the baseui them\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <DialogComponent />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)"],"sourceRoot":""}