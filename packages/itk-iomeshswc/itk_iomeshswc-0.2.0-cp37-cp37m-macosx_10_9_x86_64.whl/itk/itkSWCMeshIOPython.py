# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _IOMeshSWCPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSWCMeshIOPython
else:
    import _itkSWCMeshIOPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkSWCMeshIOPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkSWCMeshIOPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.itkMeshIOBasePython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkArrayPython

def itkSWCMeshIO_New():
    return itkSWCMeshIO.New()

class itkSWCMeshIO(itk.itkMeshIOBasePython.itkMeshIOBase):
    r"""Proxy of C++ itkSWCMeshIO class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSWCMeshIOPython.itkSWCMeshIO___New_orig__)
    Clone = _swig_new_instance_method(_itkSWCMeshIOPython.itkSWCMeshIO_Clone)
    SetHeaderContent = _swig_new_instance_method(_itkSWCMeshIOPython.itkSWCMeshIO_SetHeaderContent)
    GetHeaderContent = _swig_new_instance_method(_itkSWCMeshIOPython.itkSWCMeshIO_GetHeaderContent)
    SetSampleIdentifiers = _swig_new_instance_method(_itkSWCMeshIOPython.itkSWCMeshIO_SetSampleIdentifiers)
    GetSampleIdentifiers = _swig_new_instance_method(_itkSWCMeshIOPython.itkSWCMeshIO_GetSampleIdentifiers)
    SetTypeIdentifiers = _swig_new_instance_method(_itkSWCMeshIOPython.itkSWCMeshIO_SetTypeIdentifiers)
    GetTypeIdentifiers = _swig_new_instance_method(_itkSWCMeshIOPython.itkSWCMeshIO_GetTypeIdentifiers)
    SetRadii = _swig_new_instance_method(_itkSWCMeshIOPython.itkSWCMeshIO_SetRadii)
    GetRadii = _swig_new_instance_method(_itkSWCMeshIOPython.itkSWCMeshIO_GetRadii)
    SetParentIdentifiers = _swig_new_instance_method(_itkSWCMeshIOPython.itkSWCMeshIO_SetParentIdentifiers)
    GetParentIdentifiers = _swig_new_instance_method(_itkSWCMeshIOPython.itkSWCMeshIO_GetParentIdentifiers)
    GetPointDataContent = _swig_new_instance_method(_itkSWCMeshIOPython.itkSWCMeshIO_GetPointDataContent)
    SetPointDataContent = _swig_new_instance_method(_itkSWCMeshIOPython.itkSWCMeshIO_SetPointDataContent)
    __swig_destroy__ = _itkSWCMeshIOPython.delete_itkSWCMeshIO
    cast = _swig_new_static_method(_itkSWCMeshIOPython.itkSWCMeshIO_cast)

    def New(*args, **kargs):
        """New() -> itkSWCMeshIO

        Create a new object of the class itkSWCMeshIO and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSWCMeshIO.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSWCMeshIO.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSWCMeshIO.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSWCMeshIO in _itkSWCMeshIOPython:
_itkSWCMeshIOPython.itkSWCMeshIO_swigregister(itkSWCMeshIO)
itkSWCMeshIO___New_orig__ = _itkSWCMeshIOPython.itkSWCMeshIO___New_orig__
itkSWCMeshIO_cast = _itkSWCMeshIOPython.itkSWCMeshIO_cast

class itkSWCMeshIOEnums(object):
    r"""Proxy of C++ itkSWCMeshIOEnums class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SWCPointData_SampleIdentifier = _itkSWCMeshIOPython.itkSWCMeshIOEnums_SWCPointData_SampleIdentifier
    
    SWCPointData_TypeIdentifier = _itkSWCMeshIOPython.itkSWCMeshIOEnums_SWCPointData_TypeIdentifier
    
    SWCPointData_Radius = _itkSWCMeshIOPython.itkSWCMeshIOEnums_SWCPointData_Radius
    
    SWCPointData_ParentIdentifier = _itkSWCMeshIOPython.itkSWCMeshIOEnums_SWCPointData_ParentIdentifier
    

    def __init__(self, *args):
        r"""
        __init__(self) -> itkSWCMeshIOEnums
        __init__(self, arg0) -> itkSWCMeshIOEnums

        Parameters
        ----------
        arg0: itkSWCMeshIOEnums const &

        """
        _itkSWCMeshIOPython.itkSWCMeshIOEnums_swiginit(self, _itkSWCMeshIOPython.new_itkSWCMeshIOEnums(*args))
    __swig_destroy__ = _itkSWCMeshIOPython.delete_itkSWCMeshIOEnums

# Register itkSWCMeshIOEnums in _itkSWCMeshIOPython:
_itkSWCMeshIOPython.itkSWCMeshIOEnums_swigregister(itkSWCMeshIOEnums)


def itkSWCMeshIOFactory_New():
    return itkSWCMeshIOFactory.New()

class itkSWCMeshIOFactory(itk.ITKCommonBasePython.itkObjectFactoryBase):
    r"""Proxy of C++ itkSWCMeshIOFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSWCMeshIOPython.itkSWCMeshIOFactory___New_orig__)
    RegisterOneFactory = _swig_new_static_method(_itkSWCMeshIOPython.itkSWCMeshIOFactory_RegisterOneFactory)
    __swig_destroy__ = _itkSWCMeshIOPython.delete_itkSWCMeshIOFactory
    cast = _swig_new_static_method(_itkSWCMeshIOPython.itkSWCMeshIOFactory_cast)

    def New(*args, **kargs):
        """New() -> itkSWCMeshIOFactory

        Create a new object of the class itkSWCMeshIOFactory and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSWCMeshIOFactory.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSWCMeshIOFactory.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSWCMeshIOFactory.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSWCMeshIOFactory in _itkSWCMeshIOPython:
_itkSWCMeshIOPython.itkSWCMeshIOFactory_swigregister(itkSWCMeshIOFactory)
itkSWCMeshIOFactory___New_orig__ = _itkSWCMeshIOPython.itkSWCMeshIOFactory___New_orig__
itkSWCMeshIOFactory_RegisterOneFactory = _itkSWCMeshIOPython.itkSWCMeshIOFactory_RegisterOneFactory
itkSWCMeshIOFactory_cast = _itkSWCMeshIOPython.itkSWCMeshIOFactory_cast



