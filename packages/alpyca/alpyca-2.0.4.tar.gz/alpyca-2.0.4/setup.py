# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['alpaca']

package_data = \
{'': ['*']}

install_requires = \
['enum-tools>=0.9.0,<0.10.0',
 'netifaces>=0.11.0,<0.12.0',
 'python-dateutil>=2.8.2,<3.0.0',
 'requests>=2.27.1,<3.0.0',
 'typing-extensions>=4.2.0,<5.0.0']

setup_kwargs = {
    'name': 'alpyca',
    'version': '2.0.4',
    'description': 'API library for all ASCOM Alpaca devices, management, and discovery',
    'long_description': '# alpyca (2.0.4)\n\n## Python 3.7+ API library for all [ASCOM Alpaca](https://ascom-standards.org/Developer/Alpaca.htm) universal interfaces\n\n<img align="right" width="210" height="166" hspace="20" vspace="20" src="https://ascom-standards.org/alpyca/readme-assets/AlpacaLogo210.png">\n\nProduced by the [ASCOM Initiative](https://ascom-standards.org/), and derived from Ethan Chappel\'s\nAlpyca 1.0.0. Ethan kindly released the name **Alpyca** to the ASCOM Initiative, hence this expanded\npackage starts life as Version 2.0.\n\n## Requirements\n\nThis package runs under Python 3.7 or later. It is compatible with most Linux distros, Windows , and MacOS.\nDependencies are minimal: [requests](https://pypi.org/project/requests/),\n[netifaces](https://pypi.org/project/netifaces/),\n[typing-extensions](https://pypi.org/project/typing-extensions/),\n[python-dateutil](https://pypi.org/project/python-dateutil/), and\n[enum-tools](https://pypi.org/project/enum-tools/).\n\n## Installation\n\nThe package installs from PyPi as\n\n```sh\npip install alpyca\n```\n\nor if you have the source code in a tar file, extract it and run (with **Python 3**)\n\n```sh\npython setup.py install\n```\n\nThe dependencies listed above (and others they may depend on) are automatically \ninstalled with alpyca.\n\n## Current Status & Documentation\n\nThis version 2.0.4 is the third production release (2.0.3 is unpublished). \nThe documentation is extensive and available\nonline as **[Alpyca: API Library for Alpaca](https://ascom-standards.org/alpyca/)** as well as a\n**[PDF Document here](https://ascom-standards.org/alpyca/alpyca.pdf)**. See \n**[CHANGES.rst](https://github.com/ASCOMInitiative/alpyca/blob/master/CHANGES.rst)** (on GitHub) for\nchange log.\n\n## Feedback and Discussion\n\nFeedback can be given on the\n[ASCOM Driver and Application Development Support Forum](https://ascomtalk.groups.io/g/Developer).\nPlease note that the protocols are universal and strictly curated. This library is an\n_implementation_ of the protocols, not the protocols themselves. For background please visit\n[About Alpaca and ASCOM](https://ascom-standards.org/About/Index.htm), as well as the\n[ASCOM Interface Principle](https://ascom-standards.org/Standards/InterfacePrinciple.htm),\n[The Standards Process](https://ascom-standards.org/Standards/StandardsProcess.htm), and\nthe [General Requirements](https://ascom-standards.org/Standards/Requirements.htm).\n\n## Example\n\nFirst download, install and run the _cross-platform_\n**[Alpaca Omni Simulator](https://github.com/ASCOMInitiative/ASCOM.Alpaca.Simulators#readme)**\nwhich will give you fully functional simulators for _all_ Alpaca devices, as well as a _live_\nOpenAPI/Swagger interface to the Alpaca RESTful endpoints (_see the details below_). This example will\nuse the Telescope simulator. Assuming you are running the Omni Simulator on your local host\nat its default port of 32323, its address is then <code>localhost:32323</code>. Here is a sample\nprogram using alpaca:\n\n```python\n    import time\n    from alpaca.telescope import *      # Multiple Classes including Enumerations\n    from alpaca.exceptions import *     # Or just the exceptions you want to catch\n\n    T = Telescope(\'localhost:32323\', 0) # Local Omni Simulator\n    try:\n        T.Connected = True\n        print(f\'Connected to {T.Name}\')\n        print(T.Description)\n        T.Tracking = True               # Needed for slewing (see below)\n        print(\'Starting slew...\')\n        T.SlewToCoordinatesAsync(T.SiderealTime + 2, 50)    # 2 hrs east of meridian\n        while(T.Slewing):\n            time.sleep(5)               # What do a few seconds matter?\n        print(\'... slew completed successfully.\')\n        print(f\'RA={T.RightAscension} DE={T.Declination}\')\n        print(\'Turning off tracking then attempting to slew...\')\n        T.Tracking = False\n        T.SlewToCoordinatesAsync(T.SiderealTime + 2, 55)    # 5 deg slew N\n        # This will fail for tracking being off\n        print("... you won\'t get here!")\n    except Exception as e:              # Should catch specific InvalidOperationException\n        print(f\'Slew failed: {str(e)}\')\n    finally:                            # Assure that you disconnect\n        print("Disconnecting...")\n        T.Connected = False\n```\n\n### Results\n\n```tt\n    Connected to Alpaca Telescope Sim\n    Software Telescope Simulator for ASCOM\n    Starting slew...\n    ... slew completed successfully.\n    RA=10.939969572854931 DE=50\n    Turning off tracking then attempting to slew...\n    Slew failed: SlewToCoordinatesAsync is not allowed when tracking is False\n    Disconnecting...\n    done\n```\n\n## Alpaca Omni Simulators\n\nThe ASCOM Alpaca Simulators are [available via GitHub here](https://github.com/ASCOMInitiative/ASCOM.Alpaca.Simulators).\nUsing the \\[[Latest](https://github.com/ASCOMInitiative/ASCOM.Alpaca.Simulators/releases/latest)\\] link, scroll down the\nAssets section and pick the package for your OS and CPU type. Extract all files to a directory and start via\n\n```sh\n./ascom-alpaca.simulators\n```\n\n(or the equivalent on Windows or MacOS). A web browser should appear. This is the primary user interface to the simulator\nserver and simulated devices. Once you get this running you are ready to try the sample above.\n\n![Initial OmniSim Display](https://ascom-standards.org/alpyca/readme-assets/InitialBrowserAnnotated.png)\n\n\n## ASCOM Remote\n\nAny current ASCOM COM device that is hosted on a Windows system can have an Alpaca interface added via the\n**[ASCOM Remote Windows app](https://github.com/ASCOMInitiative/ASCOMRemote/releases/latest)**. This app allows you to\nexpose any of your Windows-hosted astronomy devices to the Alpaca world, making them reachable from programs\nusing alpyca.\n\n## Wireshark\n\nIf you are interested in monitoring the HTTP/REST traffic that alpyca creates and exchanges with the\nAlpaca devices, you can install the [Wireshark network protocol analyzer](https://www.wireshark.org/).\nOne thing that trips people up is making the installation so that Wireshark has access to all of the\nnetwork insterfaces without needing root privs (linux) or running "As Administrator" on Windows. Pay close\nattention the installation steps on this. On WIndows the capture driver installation will require elevation,\nas it is a privileged module. For example installinn on Linux (e.g Debian/Raspberry Pi) you\'ll see this,\nand **be sure to answer Yes**.\n\n![Wireshark Privileges](https://ascom-standards.org/alpyca/readme-assets/WireSharkPrivs.png)\n\nTo watch Alpaca traffic, set this simple display filter <code>http and tcp.port == 32323</code>\n(with <code>32323</code> being the port of the OmniSim, see above). You\'ll get a nice analysis\nof the Alpaca traffic like this\n\n![Wireshark Privileges](https://ascom-standards.org/alpyca/readme-assets/Wireshark1.png)\n',
    'author': 'Robert B. Denny',
    'author_email': 'rdenny@dc3.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/BobDenny/alpyca',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
