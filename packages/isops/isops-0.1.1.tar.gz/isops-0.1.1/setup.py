# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['isops', 'isops.utils']

package_data = \
{'': ['*']}

install_requires = \
['click>=8.1.3,<9.0.0', 'ruamel-yaml>=0.17.21,<0.18.0']

entry_points = \
{'console_scripts': ['isops = isops.cli:cli']}

setup_kwargs = {
    'name': 'isops',
    'version': '0.1.1',
    'description': 'Utility to ensure SOPS secrets are encrypterd.',
    'long_description': '# IsOPS: **Is** **OP**erations **S**ecure\n\n![release](https://img.shields.io/github/v/release/lorenzophys/isops)\n[![codecov](https://codecov.io/gh/lorenzophys/isops/branch/main/graph/badge.svg?token=7RQ5P3X22D)](https://codecov.io/gh/lorenzophys/isops)\n![GitHub Workflow Status (with branch)](https://img.shields.io/github/actions/workflow/status/lorenzophys/isops/test-workflow.yml?branch=main&label=tests)\n![pver](https://img.shields.io/pypi/pyversions/isops)\n![MIT](https://img.shields.io/github/license/lorenzophys/isops)\n\n```ascii\n__/\\\\\\\\\\\\\\\\\\\\\\____________________/\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\___        \n _\\/////\\\\\\///___________________/\\\\\\///\\\\\\____\\/\\\\\\/////////\\\\\\___/\\\\\\/////////\\\\\\_       \n  _____\\/\\\\\\____________________/\\\\\\/__\\///\\\\\\__\\/\\\\\\_______\\/\\\\\\__\\//\\\\\\______\\///__      \n   _____\\/\\\\\\______/\\\\\\\\\\\\\\\\\\\\__/\\\\\\______\\//\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\\\\\/____\\////\\\\\\_________     \n    _____\\/\\\\\\_____\\/\\\\\\//////__\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\/////////_________\\////\\\\\\______    \n     _____\\/\\\\\\_____\\/\\\\\\\\\\\\\\\\\\\\_\\//\\\\\\______/\\\\\\__\\/\\\\\\_____________________\\////\\\\\\___   \n      _____\\/\\\\\\_____\\////////\\\\\\__\\///\\\\\\__/\\\\\\____\\/\\\\\\______________/\\\\\\______\\//\\\\\\__  \n       __/\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\____\\///\\\\\\\\\\/_____\\/\\\\\\_____________\\///\\\\\\\\\\\\\\\\\\\\\\/___ \n        _\\///////////__\\//////////_______\\/////_______\\///________________\\///////////_____\n\n```\n\nIsOPS (**Is** **OP**erations **S**ecure) is a minimal command line utility that helps you ensure that your secrets are encrypted correctly with [sops](https://github.com/mozilla/sops) before committing them. `isops` will read your configuration files, will scan all your secrets and alerts you if it finds any key that should be encrypted but it\'s not.\n\n## Installation\n\nYou can install `isops` via `pip`:\n\n```console\nuser@laptop:~$ pip install isops\n```\n\nThe CLI is minimal:\n\n```console\nuser@laptop:~$ isops\nUsage: isops [OPTIONS] PATH\n\n  Top level command.\n\nOptions:\n  -h, --help           Show this message and exit.\n  --version            Show the version and exit.\n  --config-regex TEXT  The regex that matches all the config files to use.\n                       [required]\n```\n\nYou must provide a directory to scan and a regex that matches all the sops configuration files.\n\n## How it works?\n\n`isops` is called with a directory and a regex. Then:\n\n1. It finds the config files using the provided regex.\n2. For each rule in `creation_rules` it finds the files according to the `path_regex`.\n3. For each file found, `isops` scans all the keys, no matter how nested the yaml is, in search for those keys that match the `encrypted_regex`.\n4. For each matched key, it checks if the associated value matches the sops regex `"^ENC\\[AES256_GCM,data:(.+),iv:(.+),tag:(.+),type:(.+)\\]"`.\n\nIf the config file doesn\'t provide a `path_regex` or a `encrypted_regex`, the default values are, respectively, `"\\.ya?ml$"` and `""`.\n\n## Usage example\n\nSuppose you have this situation:\n\n```text\nexample\n├── .sops.yaml\n└── secret.yaml\n```\n\nA `.sops.yaml`:\n\n```yaml\ncreation_rules:\n  - path_regex: (.*)?secret.yaml$\n    encrypted_regex: "^(data|stringData)$"\n    pgp: "FBC7B9E2A4F9289AC0C1D4843D16CEE4A27381B4"\n```\n\nand a `secret.yaml`:\n\n```yaml\napiVersion: v1\ndata:\n  key: aGhkZDg4OGRoODRmaDQ4ZmJlbnNta21rbHdtc2k4\nkind: Secret\nmetadata:\n  name: api-key\ntype: Opaque\n```\n\nIf you run `isops` you get a warning because your secret is not encrypted:\n\n```console\nuser@laptop:~$ isops ./example --config-regex .sops.yaml\nFound config file: example/.sops.yaml\nexample/secret.yaml::key [UNSAFE]\nuser@laptop:~$ echo $?\n1\n```\n\nIf the same secret is encrypted with sops:\n\n```yaml\napiVersion: v1\ndata:\n    key: ENC[AES256_GCM,data:iCBh27Ort/dNVhP9D4y/AqI5d78U+2EHtHPX9u0/s9ANhA2VeqKSOQ==,iv:HkQVUgB6nvN3TU355K/PTU2NroahHAdoJhzJdgZFMwo=,tag:ayNppVmYJ/MLGrW9RtjV1A==,type:str]\nkind: Secret\nmetadata:\n    name: api-key\ntype: Opaque\nsops:\n    etc...\n\n```\n\nthen `isops` will give you the green light:\n\n```console\nuser@laptop:~$ isops ./example --config-regex .sops.yaml\nFound config file: example/.sops.yaml\nexample/secret.yaml::key [SAFE]\nuser@laptop:~$ echo $?\n0\n```\n\n## Another example\n\nYou can have a more complicated scenario where there are multiple sops configuration files, multiple environments and lots of secrets.\n\nSuppose you have this situation:\n\n```text\nexample\n├── .sops\n│   ├── sops-dev.yaml\n│   └── sops-prod.yaml\n├── dev\n│   ├── api-key-secret.yaml        <- Encrypted\n│   ├── db-password-secret.yaml    <- Encrypted\n│   ├── deployment.yaml\n│   └── service.yaml\n└── prod\n    ├── api-key-secret.yaml        <- Not encrypted!\n    ├── db-password-secret.yaml    <- Encrypted\n    ├── deployment.yaml\n    └── service.yaml\n```\n\nThen if you run `isops` you get:\n\n```console\nuser@laptop:~$ isops example --config-regex "example/.sops/(.*).yaml$"\nFound config file: example/.sops/sops-dev.yaml\nFound config file: example/.sops/sops-prod.yaml\nexample/dev/db-password-secret.yaml::password [SAFE]\nexample/dev/api-key-secret.yaml::key [SAFE]\nexample/prod/db-password-secret.yaml::password [SAFE]\nexample/prod/api-key-secret.yaml::key [UNSAFE]\n```\n\nThe previous example can be found in the `example` directory. The sample application was generated by [ChatGPT](https://chat.openai.com/chat) with the prompt: "Please, generate an example Kubernetes application with two secrets".\n\n## Pre-commit hook\n\n`isops` can be also used as a [pre-commit](https://pre-commit.com) hook. For example:\n\n```yaml\nrepos:\n  - repo: https://github.com/lorenzophys/isops\n    rev: v0.1.1\n    hooks:\n      - id: isops\n        args:\n        - --config-regex=.sops/(.*).yaml$\n```\n\n## License\n\nThis project is licensed under the **MIT License** - see the *LICENSE* file for details.\n',
    'author': 'Lorenzo Maffioli',
    'author_email': 'lorenzo.maffioli@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/lorenzophys/isops',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
