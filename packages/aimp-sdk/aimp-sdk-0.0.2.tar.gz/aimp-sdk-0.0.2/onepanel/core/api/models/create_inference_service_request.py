# coding: utf-8

"""
    Onepanel

    Onepanel API  # noqa: E501

    The version of the OpenAPI document: 1.0.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from onepanel.core.api.configuration import Configuration


class CreateInferenceServiceRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'namespace': 'str',
        'name': 'str',
        'default_transformer_image': 'str',
        'predictor': 'InferenceServicePredictor',
        'transformer': 'InferenceServiceTransformer'
    }

    attribute_map = {
        'namespace': 'namespace',
        'name': 'name',
        'default_transformer_image': 'defaultTransformerImage',
        'predictor': 'predictor',
        'transformer': 'transformer'
    }

    def __init__(self, namespace=None, name=None, default_transformer_image=None, predictor=None, transformer=None, local_vars_configuration=None):  # noqa: E501
        """CreateInferenceServiceRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._namespace = None
        self._name = None
        self._default_transformer_image = None
        self._predictor = None
        self._transformer = None
        self.discriminator = None

        if namespace is not None:
            self.namespace = namespace
        if name is not None:
            self.name = name
        if default_transformer_image is not None:
            self.default_transformer_image = default_transformer_image
        if predictor is not None:
            self.predictor = predictor
        if transformer is not None:
            self.transformer = transformer

    @property
    def namespace(self):
        """Gets the namespace of this CreateInferenceServiceRequest.  # noqa: E501


        :return: The namespace of this CreateInferenceServiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this CreateInferenceServiceRequest.


        :param namespace: The namespace of this CreateInferenceServiceRequest.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def name(self):
        """Gets the name of this CreateInferenceServiceRequest.  # noqa: E501


        :return: The name of this CreateInferenceServiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateInferenceServiceRequest.


        :param name: The name of this CreateInferenceServiceRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def default_transformer_image(self):
        """Gets the default_transformer_image of this CreateInferenceServiceRequest.  # noqa: E501


        :return: The default_transformer_image of this CreateInferenceServiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._default_transformer_image

    @default_transformer_image.setter
    def default_transformer_image(self, default_transformer_image):
        """Sets the default_transformer_image of this CreateInferenceServiceRequest.


        :param default_transformer_image: The default_transformer_image of this CreateInferenceServiceRequest.  # noqa: E501
        :type: str
        """

        self._default_transformer_image = default_transformer_image

    @property
    def predictor(self):
        """Gets the predictor of this CreateInferenceServiceRequest.  # noqa: E501


        :return: The predictor of this CreateInferenceServiceRequest.  # noqa: E501
        :rtype: InferenceServicePredictor
        """
        return self._predictor

    @predictor.setter
    def predictor(self, predictor):
        """Sets the predictor of this CreateInferenceServiceRequest.


        :param predictor: The predictor of this CreateInferenceServiceRequest.  # noqa: E501
        :type: InferenceServicePredictor
        """

        self._predictor = predictor

    @property
    def transformer(self):
        """Gets the transformer of this CreateInferenceServiceRequest.  # noqa: E501


        :return: The transformer of this CreateInferenceServiceRequest.  # noqa: E501
        :rtype: InferenceServiceTransformer
        """
        return self._transformer

    @transformer.setter
    def transformer(self, transformer):
        """Sets the transformer of this CreateInferenceServiceRequest.


        :param transformer: The transformer of this CreateInferenceServiceRequest.  # noqa: E501
        :type: InferenceServiceTransformer
        """

        self._transformer = transformer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateInferenceServiceRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateInferenceServiceRequest):
            return True

        return self.to_dict() != other.to_dict()
